
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ANDAND ARROW AS ASIGNAR ASIGNATION_TYPE ASYNC AWAIT BRACKETL BRACKETR BREAK B_FALSE B_TRUE COMMA CONST CONTAINS_SLICE CONTIN CRATE DATATYPES DIFFERENT DIVISION DOLLAR DOT DOTDOTDOT DYN ELSE ENDLINE ENUM EQUAL ERRORPROP EXTERN FOR FUNCTION GET_SLICE GREATEQ GREATER HASHSET IF IMPL IN INSERT_HASH LESSEQ LESST LET LLAVEDER LLAVEIZ LOOP LPAREN MAS MATCH MAYOR MAYORIGUAL MENOS MINUSEQ MOD MODULO MOVE MULT MUT NEWFUNC NOT NUMBER NUMDATATYPES OR OROR PATHSEP PLUSEQ POP_VEC PRINT PRINTS PUB PUSH_VEC REF RETURN RPAREN SELF SELFLOWERCASE SLASHEQ STAREQ STATIC STRING STRUCT SUPER TRAIT TUPLE TYPE U8 UNION_HASH UNIT UNSAFE USE VARIABLE VECTOR WHERE WHILE\n    rust : asignacion\n         | prints\n         | hashset\n         | hashfunc\n         | conditional\n         | conditional_asigned\n         | for_loop\n         | struct_s\n         | asig_mate\n    \n    asignacion : declarador ASIGNAR expresion ENDLINE\n                | other_operators ENDLINE\n    \n    other_operators : VARIABLE oper_asig expresion\n    \n    declarador : VARIABLE\n                | let_asig\n    \n    let_asig : LET var_tipo\n             | LET MUT var_tipo\n    \n    var_tipo : VARIABLE\n             | VARIABLE  ASIGNATION_TYPE tipos\n    \n    tipos : DATATYPES\n            | NUMDATATYPES\n    \n    oper_asig : ASIGNAR\n                | PLUSEQ\n                | MINUSEQ\n                | STAREQ\n                | SLASHEQ\n    \n    expresion : STRING\n                | U8\n    \n    prints : PRINTS LPAREN print_expresion RPAREN ENDLINE\n    \n    print_expresion : STRING\n                    | STRING COMMA print_args\n    \n    print_args : print_datos COMMA print_args \n                | print_datos\n    \n    print_datos : expresion\n    \n    hashset : LET MUT VARIABLE ASIGNAR HASHSET PATHSEP NEWFUNC ENDLINE\n    \n    hashfunc : hashset_insert\n            | hashset_union\n    \n    hashset_insert : VARIABLE DOT INSERT_HASH LPAREN expresion RPAREN ENDLINE\n    \n    hashset_union : VARIABLE DOT UNION_HASH LPAREN AND VARIABLE RPAREN ENDLINE\n    \n    conditional_asigned : declarador ASIGNAR conditional ENDLINE\n    \n    conditional : if_type validations LLAVEIZ rust LLAVEDER\n    \n    if_type : IF\n            | ELSE IF\n            | ELSE\n    \n    validations : comparison\n                | comparison ANDAND validations\n                | comparison OROR validations\n    \n    comparison : VARIABLE signo_comp VARIABLE\n                | VARIABLE signo_comp U8\n                | U8 signo_comp VARIABLE\n    \n    signo_comp : GREATER\n                | LESST\n                | GREATEQ\n                | EQUAL\n                | DIFFERENT\n    \n    f_comparacion : U8 DOT DOT U8\n                    | VARIABLE\n    \n    for_loop : FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER\n    \n    struct_s : STRUCT sent_stru\n    \n    argumentos_juntos : VARIABLE ASIGNATION_TYPE tipos\n                        | VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos\n                        | PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos\n    \n    argumentos_tipo : tipos\n                    | tipos COMMA argumentos_tipo\n    \n    sent_stru : UNIT ENDLINE\n                | TUPLE LPAREN argumentos_tipo RPAREN ENDLINE\n                | VARIABLE LLAVEIZ argumentos_juntos LLAVEDER\n    \n    asig_mate : VARIABLE ASIGNAR op_mat\n                | LET VARIABLE ASIGNAR op_mat\n                | LET MUT VARIABLE ASIGNAR op_mat\n    \n    op_mat : art_exp\n            | VARIABLE art_exp\n            | U8 art_exp\n    \n    art_exp : VARIABLE signo_arit VARIABLE\n            | U8 signo_arit VARIABLE\n            | VARIABLE signo_arit U8\n            | U8 signo_arit U8\n    \n    signo_arit : MAS\n                | MENOS\n                | MULT\n                | DIVISION\n                | MODULO\n    '
    
_lr_action_items = {'PRINTS':([0,64,127,],[13,13,13,]),'LET':([0,64,127,],[14,14,14,]),'FOR':([0,64,127,],[19,19,19,]),'STRUCT':([0,64,127,],[20,20,20,]),'VARIABLE':([0,14,18,19,20,22,23,27,30,46,55,57,60,64,65,66,67,68,69,70,71,72,73,74,77,82,89,91,92,93,94,95,97,113,125,127,150,155,],[15,28,39,41,45,-41,-43,53,57,-42,57,87,87,15,39,39,103,-50,-51,-52,-53,-54,105,106,111,57,120,-77,-78,-79,-80,-81,123,133,137,15,111,111,]),'IF':([0,23,24,64,127,],[22,46,22,22,22,]),'ELSE':([0,24,64,127,],[23,23,23,23,]),'$end':([1,2,3,4,5,6,7,8,9,10,16,17,25,42,58,59,75,78,79,83,88,96,114,119,120,121,122,123,126,132,140,146,148,152,153,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-35,-36,-11,-58,-67,-70,-64,-10,-39,-68,-71,-72,-28,-69,-73,-75,-76,-74,-40,-66,-65,-37,-57,-34,-38,]),'LLAVEDER':([2,3,4,5,6,7,8,9,10,16,17,25,42,58,59,75,78,79,83,85,86,88,96,100,112,114,119,120,121,122,123,126,132,138,140,142,146,148,152,153,154,156,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-35,-36,-11,-58,-67,-70,-64,-10,-39,-68,-19,-20,-71,-72,126,132,-28,-69,-73,-75,-76,-74,-40,-66,148,-65,-59,-37,-57,-34,-38,-60,-61,]),'ASIGNAR':([11,15,21,28,29,53,54,84,85,86,],[24,30,-14,55,-15,82,-16,-18,-19,-20,]),'ENDLINE':([12,43,47,48,49,50,61,80,126,129,136,145,147,],[25,75,78,79,-26,-27,-12,114,-40,140,146,152,153,]),'LPAREN':([13,44,62,63,],[26,76,98,99,]),'MUT':([14,],[27,]),'DOT':([15,108,128,],[32,128,139,]),'PLUSEQ':([15,],[33,]),'MINUSEQ':([15,],[34,]),'STAREQ':([15,],[35,]),'SLASHEQ':([15,],[36,]),'U8':([18,22,23,24,30,31,33,34,35,36,46,55,57,60,65,66,67,68,69,70,71,72,74,81,82,89,91,92,93,94,95,97,98,134,139,],[40,-41,-43,50,60,50,-22,-23,-24,-25,-42,60,90,90,40,40,104,-50,-51,-52,-53,-54,108,50,60,121,-77,-78,-79,-80,-81,122,50,50,149,]),'UNIT':([20,],[43,]),'TUPLE':([20,],[44,]),'STRING':([24,26,30,31,33,34,35,36,81,98,134,],[49,52,-21,49,-22,-23,-24,-25,49,49,49,]),'ASIGNATION_TYPE':([28,53,111,133,],[56,56,131,143,]),'INSERT_HASH':([32,],[62,]),'UNION_HASH':([32,],[63,]),'LLAVEIZ':([37,38,45,101,102,103,104,105,106,107,149,],[64,-44,77,-45,-46,-47,-48,-49,-56,127,-55,]),'ANDAND':([38,103,104,105,],[65,-47,-48,-49,]),'OROR':([38,103,104,105,],[66,-47,-48,-49,]),'GREATER':([39,40,],[68,68,]),'LESST':([39,40,],[69,69,]),'GREATEQ':([39,40,],[70,70,]),'EQUAL':([39,40,],[71,71,]),'DIFFERENT':([39,40,],[72,72,]),'IN':([41,],[74,]),'COMMA':([49,50,52,85,86,110,116,117,142,151,],[-26,-27,81,-19,-20,130,134,-33,150,155,]),'RPAREN':([49,50,51,52,85,86,109,110,115,116,117,124,137,141,144,],[-26,-27,80,-29,-19,-20,129,-62,-30,-32,-33,136,147,-63,-31,]),'DATATYPES':([56,76,130,131,143,],[85,85,85,85,85,]),'NUMDATATYPES':([56,76,130,131,143,],[86,86,86,86,86,]),'MAS':([57,60,87,90,],[91,91,91,91,]),'MENOS':([57,60,87,90,],[92,92,92,92,]),'MULT':([57,60,87,90,],[93,93,93,93,]),'DIVISION':([57,60,87,90,],[94,94,94,94,]),'MODULO':([57,60,87,90,],[95,95,95,95,]),'PUB':([77,150,155,],[113,113,113,]),'HASHSET':([82,],[118,]),'AND':([99,],[125,]),'PATHSEP':([118,],[135,]),'NEWFUNC':([135,],[145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rust':([0,64,127,],[1,100,138,]),'asignacion':([0,64,127,],[2,2,2,]),'prints':([0,64,127,],[3,3,3,]),'hashset':([0,64,127,],[4,4,4,]),'hashfunc':([0,64,127,],[5,5,5,]),'conditional':([0,24,64,127,],[6,48,6,6,]),'conditional_asigned':([0,64,127,],[7,7,7,]),'for_loop':([0,64,127,],[8,8,8,]),'struct_s':([0,64,127,],[9,9,9,]),'asig_mate':([0,64,127,],[10,10,10,]),'declarador':([0,64,127,],[11,11,11,]),'other_operators':([0,64,127,],[12,12,12,]),'hashset_insert':([0,64,127,],[16,16,16,]),'hashset_union':([0,64,127,],[17,17,17,]),'if_type':([0,24,64,127,],[18,18,18,18,]),'let_asig':([0,64,127,],[21,21,21,]),'var_tipo':([14,27,],[29,54,]),'oper_asig':([15,],[31,]),'validations':([18,65,66,],[37,101,102,]),'comparison':([18,65,66,],[38,38,38,]),'sent_stru':([20,],[42,]),'expresion':([24,31,81,98,134,],[47,61,117,124,117,]),'print_expresion':([26,],[51,]),'op_mat':([30,55,82,],[58,83,119,]),'art_exp':([30,55,57,60,82,],[59,59,88,96,59,]),'signo_comp':([39,40,],[67,73,]),'tipos':([56,76,130,131,143,],[84,110,110,142,151,]),'signo_arit':([57,60,87,90,],[89,97,89,97,]),'f_comparacion':([74,],[107,]),'argumentos_tipo':([76,130,],[109,141,]),'argumentos_juntos':([77,150,155,],[112,154,156,]),'print_args':([81,134,],[115,144,]),'print_datos':([81,134,],[116,116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> rust","S'",1,None,None,None),
  ('rust -> asignacion','rust',1,'p_rust','sintactico.py',14),
  ('rust -> prints','rust',1,'p_rust','sintactico.py',15),
  ('rust -> hashset','rust',1,'p_rust','sintactico.py',16),
  ('rust -> hashfunc','rust',1,'p_rust','sintactico.py',17),
  ('rust -> conditional','rust',1,'p_rust','sintactico.py',18),
  ('rust -> conditional_asigned','rust',1,'p_rust','sintactico.py',19),
  ('rust -> for_loop','rust',1,'p_rust','sintactico.py',20),
  ('rust -> struct_s','rust',1,'p_rust','sintactico.py',21),
  ('rust -> asig_mate','rust',1,'p_rust','sintactico.py',22),
  ('asignacion -> declarador ASIGNAR expresion ENDLINE','asignacion',4,'p_asignacion','sintactico.py',27),
  ('asignacion -> other_operators ENDLINE','asignacion',2,'p_asignacion','sintactico.py',28),
  ('other_operators -> VARIABLE oper_asig expresion','other_operators',3,'p_other_operators','sintactico.py',33),
  ('declarador -> VARIABLE','declarador',1,'p_declarador','sintactico.py',38),
  ('declarador -> let_asig','declarador',1,'p_declarador','sintactico.py',39),
  ('let_asig -> LET var_tipo','let_asig',2,'p_let_asig','sintactico.py',44),
  ('let_asig -> LET MUT var_tipo','let_asig',3,'p_let_asig','sintactico.py',45),
  ('var_tipo -> VARIABLE','var_tipo',1,'p_var_tipo','sintactico.py',50),
  ('var_tipo -> VARIABLE ASIGNATION_TYPE tipos','var_tipo',3,'p_var_tipo','sintactico.py',51),
  ('tipos -> DATATYPES','tipos',1,'p_tipos','sintactico.py',56),
  ('tipos -> NUMDATATYPES','tipos',1,'p_tipos','sintactico.py',57),
  ('oper_asig -> ASIGNAR','oper_asig',1,'p_oper_asig','sintactico.py',62),
  ('oper_asig -> PLUSEQ','oper_asig',1,'p_oper_asig','sintactico.py',63),
  ('oper_asig -> MINUSEQ','oper_asig',1,'p_oper_asig','sintactico.py',64),
  ('oper_asig -> STAREQ','oper_asig',1,'p_oper_asig','sintactico.py',65),
  ('oper_asig -> SLASHEQ','oper_asig',1,'p_oper_asig','sintactico.py',66),
  ('expresion -> STRING','expresion',1,'p_expresion','sintactico.py',71),
  ('expresion -> U8','expresion',1,'p_expresion','sintactico.py',72),
  ('prints -> PRINTS LPAREN print_expresion RPAREN ENDLINE','prints',5,'p_prints','sintactico.py',77),
  ('print_expresion -> STRING','print_expresion',1,'p_print_expresion','sintactico.py',82),
  ('print_expresion -> STRING COMMA print_args','print_expresion',3,'p_print_expresion','sintactico.py',83),
  ('print_args -> print_datos COMMA print_args','print_args',3,'p_print_args','sintactico.py',88),
  ('print_args -> print_datos','print_args',1,'p_print_args','sintactico.py',89),
  ('print_datos -> expresion','print_datos',1,'p_print_datos','sintactico.py',94),
  ('hashset -> LET MUT VARIABLE ASIGNAR HASHSET PATHSEP NEWFUNC ENDLINE','hashset',8,'p_hashset','sintactico.py',99),
  ('hashfunc -> hashset_insert','hashfunc',1,'p_hashfunc','sintactico.py',103),
  ('hashfunc -> hashset_union','hashfunc',1,'p_hashfunc','sintactico.py',104),
  ('hashset_insert -> VARIABLE DOT INSERT_HASH LPAREN expresion RPAREN ENDLINE','hashset_insert',7,'p_hashset_insert','sintactico.py',109),
  ('hashset_union -> VARIABLE DOT UNION_HASH LPAREN AND VARIABLE RPAREN ENDLINE','hashset_union',8,'p_hashset_union','sintactico.py',114),
  ('conditional_asigned -> declarador ASIGNAR conditional ENDLINE','conditional_asigned',4,'p_conditional_asigned','sintactico.py',120),
  ('conditional -> if_type validations LLAVEIZ rust LLAVEDER','conditional',5,'p_conditional','sintactico.py',125),
  ('if_type -> IF','if_type',1,'p_if_type','sintactico.py',130),
  ('if_type -> ELSE IF','if_type',2,'p_if_type','sintactico.py',131),
  ('if_type -> ELSE','if_type',1,'p_if_type','sintactico.py',132),
  ('validations -> comparison','validations',1,'p_validations','sintactico.py',137),
  ('validations -> comparison ANDAND validations','validations',3,'p_validations','sintactico.py',138),
  ('validations -> comparison OROR validations','validations',3,'p_validations','sintactico.py',139),
  ('comparison -> VARIABLE signo_comp VARIABLE','comparison',3,'p_comparison','sintactico.py',147),
  ('comparison -> VARIABLE signo_comp U8','comparison',3,'p_comparison','sintactico.py',148),
  ('comparison -> U8 signo_comp VARIABLE','comparison',3,'p_comparison','sintactico.py',149),
  ('signo_comp -> GREATER','signo_comp',1,'p_signoComparaion','sintactico.py',154),
  ('signo_comp -> LESST','signo_comp',1,'p_signoComparaion','sintactico.py',155),
  ('signo_comp -> GREATEQ','signo_comp',1,'p_signoComparaion','sintactico.py',156),
  ('signo_comp -> EQUAL','signo_comp',1,'p_signoComparaion','sintactico.py',157),
  ('signo_comp -> DIFFERENT','signo_comp',1,'p_signoComparaion','sintactico.py',158),
  ('f_comparacion -> U8 DOT DOT U8','f_comparacion',4,'p_condicionFor','sintactico.py',163),
  ('f_comparacion -> VARIABLE','f_comparacion',1,'p_condicionFor','sintactico.py',164),
  ('for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER','for_loop',7,'p_for','sintactico.py',169),
  ('struct_s -> STRUCT sent_stru','struct_s',2,'p_struct','sintactico.py',175),
  ('argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos','argumentos_juntos',3,'p_argumentos_juntos','sintactico.py',181),
  ('argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos','argumentos_juntos',5,'p_argumentos_juntos','sintactico.py',182),
  ('argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos','argumentos_juntos',6,'p_argumentos_juntos','sintactico.py',183),
  ('argumentos_tipo -> tipos','argumentos_tipo',1,'p_argumento_tipo','sintactico.py',189),
  ('argumentos_tipo -> tipos COMMA argumentos_tipo','argumentos_tipo',3,'p_argumento_tipo','sintactico.py',190),
  ('sent_stru -> UNIT ENDLINE','sent_stru',2,'p_sentenciaStruct','sintactico.py',196),
  ('sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE','sent_stru',5,'p_sentenciaStruct','sintactico.py',197),
  ('sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER','sent_stru',4,'p_sentenciaStruct','sintactico.py',198),
  ('asig_mate -> VARIABLE ASIGNAR op_mat','asig_mate',3,'p_asignacion_matematica','sintactico.py',203),
  ('asig_mate -> LET VARIABLE ASIGNAR op_mat','asig_mate',4,'p_asignacion_matematica','sintactico.py',204),
  ('asig_mate -> LET MUT VARIABLE ASIGNAR op_mat','asig_mate',5,'p_asignacion_matematica','sintactico.py',205),
  ('op_mat -> art_exp','op_mat',1,'p_operacion_matematica','sintactico.py',210),
  ('op_mat -> VARIABLE art_exp','op_mat',2,'p_operacion_matematica','sintactico.py',211),
  ('op_mat -> U8 art_exp','op_mat',2,'p_operacion_matematica','sintactico.py',212),
  ('art_exp -> VARIABLE signo_arit VARIABLE','art_exp',3,'p_aritmetic_expresion','sintactico.py',217),
  ('art_exp -> U8 signo_arit VARIABLE','art_exp',3,'p_aritmetic_expresion','sintactico.py',218),
  ('art_exp -> VARIABLE signo_arit U8','art_exp',3,'p_aritmetic_expresion','sintactico.py',219),
  ('art_exp -> U8 signo_arit U8','art_exp',3,'p_aritmetic_expresion','sintactico.py',220),
  ('signo_arit -> MAS','signo_arit',1,'p_signos_aritmeticos','sintactico.py',225),
  ('signo_arit -> MENOS','signo_arit',1,'p_signos_aritmeticos','sintactico.py',226),
  ('signo_arit -> MULT','signo_arit',1,'p_signos_aritmeticos','sintactico.py',227),
  ('signo_arit -> DIVISION','signo_arit',1,'p_signos_aritmeticos','sintactico.py',228),
  ('signo_arit -> MODULO','signo_arit',1,'p_signos_aritmeticos','sintactico.py',229),
]
