
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARROW AS ASIGNAR ASIGNATION_TYPE ASYNC AWAIT BRACKETL BRACKETR BREAK B_FALSE B_TRUE COMMA CONST CONTAINS_SLICE CONTIN CRATE CURLYL CURLYR DATATYPES DIFFERENT DIVISION DOLLAR DOT DOTDOTDOT DYN ELSE ENDLINE ENUM EQUAL ERRORPROP EXTERN FOR FUNCTION GET_SLICE GREATEQ GREATER HASHSET IF IMPL IN INSERT_HASH LESSEQ LESST LET LOOP LPAREN MAS MATCH MAYOR MAYORIGUAL MENOS MINUSEQ MOD MODULO MOVE MULT MUT NOT NUMBER NUMDATATYPES OR PATHSEP PLUSEQ POP_VEC PRINT PUB PUSH_VEC REF RETURN RPAREN SELF SELFLOWERCASE SLASHEQ STAREQ STATIC STRING STRUCT SUPER TRAIT TYPE U8 UNION_HASH UNSAFE USE VARIABLE VECTOR WHERE WHILE\n    asignacion : declarador ASIGNAR expresion\n                | VARIABLE oper_asig expresion\n    \n    declarador : VARIABLE\n                | let_asig\n    \n    let_asig : LET var_tipo\n             | LET MUT var_tipo\n    \n    var_tipo : VARIABLE\n             | VARIABLE  ASIGNATION_TYPE tipos\n    \n    tipos : DATATYPES\n            | NUMDATATYPES\n    \n    oper_asig : ASIGNAR\n                | PLUSEQ\n                | MINUSEQ\n                | STAREQ\n                | SLASHEQ\n    \n    expresion : STRING\n                | U8\n    '
    
_lr_action_items = {'VARIABLE':([0,5,14,],[3,15,15,]),'LET':([0,],[5,]),'$end':([1,16,17,18,19,],[0,-1,-16,-17,-2,]),'ASIGNAR':([2,3,4,13,15,20,22,23,24,],[6,8,-4,-5,-7,-6,-8,-9,-10,]),'PLUSEQ':([3,],[9,]),'MINUSEQ':([3,],[10,]),'STAREQ':([3,],[11,]),'SLASHEQ':([3,],[12,]),'MUT':([5,],[14,]),'STRING':([6,7,8,9,10,11,12,],[17,17,-11,-12,-13,-14,-15,]),'U8':([6,7,8,9,10,11,12,],[18,18,-11,-12,-13,-14,-15,]),'ASIGNATION_TYPE':([15,],[21,]),'DATATYPES':([21,],[23,]),'NUMDATATYPES':([21,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'asignacion':([0,],[1,]),'declarador':([0,],[2,]),'let_asig':([0,],[4,]),'oper_asig':([3,],[7,]),'var_tipo':([5,14,],[13,20,]),'expresion':([6,7,],[16,19,]),'tipos':([21,],[22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> asignacion","S'",1,None,None,None),
  ('asignacion -> declarador ASIGNAR expresion','asignacion',3,'p_asignacion','sintactico.py',7),
  ('asignacion -> VARIABLE oper_asig expresion','asignacion',3,'p_asignacion','sintactico.py',8),
  ('declarador -> VARIABLE','declarador',1,'p_declarador','sintactico.py',12),
  ('declarador -> let_asig','declarador',1,'p_declarador','sintactico.py',13),
  ('let_asig -> LET var_tipo','let_asig',2,'p_let_asig','sintactico.py',18),
  ('let_asig -> LET MUT var_tipo','let_asig',3,'p_let_asig','sintactico.py',19),
  ('var_tipo -> VARIABLE','var_tipo',1,'p_var_tipo','sintactico.py',24),
  ('var_tipo -> VARIABLE ASIGNATION_TYPE tipos','var_tipo',3,'p_var_tipo','sintactico.py',25),
  ('tipos -> DATATYPES','tipos',1,'p_tipos','sintactico.py',30),
  ('tipos -> NUMDATATYPES','tipos',1,'p_tipos','sintactico.py',31),
  ('oper_asig -> ASIGNAR','oper_asig',1,'p_oper_asig','sintactico.py',36),
  ('oper_asig -> PLUSEQ','oper_asig',1,'p_oper_asig','sintactico.py',37),
  ('oper_asig -> MINUSEQ','oper_asig',1,'p_oper_asig','sintactico.py',38),
  ('oper_asig -> STAREQ','oper_asig',1,'p_oper_asig','sintactico.py',39),
  ('oper_asig -> SLASHEQ','oper_asig',1,'p_oper_asig','sintactico.py',40),
  ('expresion -> STRING','expresion',1,'p_expresion','sintactico.py',45),
  ('expresion -> U8','expresion',1,'p_expresion','sintactico.py',46),
]
