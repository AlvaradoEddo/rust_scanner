Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASYNC
    AWAIT
    BREAK
    B_FALSE
    B_TRUE
    CONST
    CONTIN
    CRATE
    DOLLAR
    DOTDOTDOT
    DYN
    ENUM
    ERRORPROP
    EXTERN
    IMPL
    LESSEQ
    LOOP
    MATCH
    MAYOR
    MAYORIGUAL
    MOD
    MOVE
    NOT
    NUMBER
    OR
    PRINT
    REF
    SELF
    SELFLOWERCASE
    STATIC
    SUPER
    TRAIT
    TYPE
    UNSAFE
    USE
    WHERE

Grammar

Rule 0     S' -> rust
Rule 1     rust -> asignacion
Rule 2     rust -> asignacion_sintipo
Rule 3     rust -> prints
Rule 4     rust -> hashfunc
Rule 5     rust -> conditional
Rule 6     rust -> conditional_asigned
Rule 7     rust -> for_loop
Rule 8     rust -> struct_s
Rule 9     rust -> while_loop
Rule 10    rust -> empty_vector
Rule 11    rust -> vector_methods
Rule 12    rust -> data_vector
Rule 13    rust -> slice_get
Rule 14    rust -> slice_contains
Rule 15    rust -> read_data
Rule 16    rust -> function
<<<<<<< HEAD
Rule 17    rust -> empty_function
Rule 18    asignacion -> declarador ASIGNAR expresion ENDLINE
Rule 19    asignacion -> other_operators ENDLINE
Rule 20    asignacion -> op_mat ENDLINE
Rule 21    asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
Rule 22    other_operators -> VARIABLE oper_asig expresion_sintipo
Rule 23    declarador -> VARIABLE
Rule 24    declarador -> let_asig
Rule 25    declarador_sintipo -> VARIABLE
Rule 26    declarador_sintipo -> let_asig_sintipo
Rule 27    let_asig -> LET var_tipo
Rule 28    let_asig -> LET MUT var_tipo
Rule 29    let_asig_sintipo -> LET MUT VARIABLE
Rule 30    let_asig_sintipo -> LET VARIABLE
Rule 31    var_tipo -> VARIABLE
Rule 32    var_tipo -> VARIABLE ASIGNATION_TYPE tipos
Rule 33    oper_asig -> ASIGNAR
Rule 34    oper_asig -> PLUSEQ
Rule 35    oper_asig -> MINUSEQ
Rule 36    oper_asig -> STAREQ
Rule 37    oper_asig -> SLASHEQ
Rule 38    prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
Rule 39    print_expresion -> STRING
Rule 40    print_expresion -> STRING COMMA print_args
Rule 41    print_args -> print_datos COMMA print_args
Rule 42    print_args -> print_datos
Rule 43    print_datos -> expresion
Rule 44    hashset -> HASHSET empty PATHSEP empty NEWFUNC
Rule 45    hashfunc -> hashset_insert
Rule 46    hashfunc -> hashset_union
Rule 47    hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
Rule 48    hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
Rule 49    conditional_asigned -> declarador ASIGNAR conditional ENDLINE
Rule 50    conditional -> if_type validations LLAVEIZ rust LLAVEDER
Rule 51    if_type -> IF
Rule 52    if_type -> ELSE IF
Rule 53    if_type -> ELSE
Rule 54    validations -> comparison
Rule 55    validations -> comparison ANDAND validations
Rule 56    validations -> comparison OROR validations
Rule 57    comparison -> VARIABLE signo_comp VARIABLE
Rule 58    comparison -> VARIABLE signo_comp U8
Rule 59    comparison -> U8 signo_comp VARIABLE
Rule 60    signo_comp -> GREATER
Rule 61    signo_comp -> LESST
Rule 62    signo_comp -> GREATEQ
Rule 63    signo_comp -> EQUAL
Rule 64    signo_comp -> DIFFERENT
Rule 65    f_comparacion -> rango
Rule 66    f_comparacion -> VARIABLE
Rule 67    for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
Rule 68    struct_s -> STRUCT sent_stru
Rule 69    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos
Rule 70    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 71    argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 72    argumentos_tipo -> tipos
Rule 73    argumentos_tipo -> tipos COMMA argumentos_tipo
Rule 74    sent_stru -> UNIT ENDLINE
Rule 75    sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
Rule 76    sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER
Rule 77    op_mat -> art_exp
Rule 78    op_mat -> VARIABLE signo_arit art_exp
Rule 79    op_mat -> U8 signo_arit art_exp
Rule 80    art_exp -> VARIABLE signo_arit VARIABLE
Rule 81    art_exp -> U8 signo_arit VARIABLE
Rule 82    art_exp -> VARIABLE signo_arit U8
Rule 83    art_exp -> U8 signo_arit U8
Rule 84    signo_arit -> MAS
Rule 85    signo_arit -> MENOS
Rule 86    signo_arit -> MULT
Rule 87    signo_arit -> DIVISION
Rule 88    signo_arit -> MODULO
Rule 89    rango -> U8 DOT DOT U8
Rule 90    slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR
Rule 91    slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
Rule 92    valor_get -> rango
Rule 93    valor_get -> U8
Rule 94    slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
Rule 95    empty -> <empty>
Rule 96    while_loop -> WHILE validations LLAVEIZ rust LLAVEDER
Rule 97    read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
Rule 98    reference -> AND empty MUT VARIABLE
Rule 99    function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
Rule 100   empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
Rule 101   arguments -> VARIABLE ASIGNATION_TYPE tipos
Rule 102   arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments
Rule 103   empty_vector -> declare_vector VECT types_vector empty_vec
Rule 104   data_vector -> declare_vector VECT types_vector vector_content
Rule 105   data_vector -> declare_vector vector_content
Rule 106   data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
Rule 107   vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE
Rule 108   vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
Rule 109   vector_elements -> element
Rule 110   vector_elements -> element COMMA vector_elements
Rule 111   element -> expresion
Rule 112   element_type -> U8 NUMDATATYPES
Rule 113   types_vector -> LESST DATATYPES GREATER
Rule 114   types_vector -> LESST NUMDATATYPES GREATER
Rule 115   declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE
Rule 116   declare_vector -> LET VARIABLE ASIGNATION_TYPE
Rule 117   empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
Rule 118   empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
Rule 119   empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
Rule 120   vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
Rule 121   vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
Rule 122   tipos -> DATATYPES
Rule 123   tipos -> NUMDATATYPES
Rule 124   expresion -> STRING
Rule 125   expresion -> U8
Rule 126   expresion -> F32
Rule 127   expresion -> VARIABLE
Rule 128   expresion_sintipo -> hashset
Rule 129   expresion_sintipo -> op_mat
Rule 130   expresion_sintipo -> slice_exp
Rule 131   expresion_sintipo -> expresion

Terminals, with rules where they appear

AND                  : 48 90 94 98
ANDAND               : 55
ARROW                : 
AS                   : 
ASIGNAR              : 18 21 33 49 106 117 118 119
ASIGNATION_TYPE      : 32 69 70 71 101 102 115 116
ASYNC                : 
AWAIT                : 
BRACKETL             : 90 118
BRACKETR             : 90 118
BREAK                : 
B_FALSE              : 
B_TRUE               : 
COMMA                : 40 41 70 71 73 102 106 110
CONST                : 
CONTAINS_SLICE       : 94
CONTIN               : 
CRATE                : 
DATATYPES            : 113 122
DIFFERENT            : 64
DIVISION             : 87
DOLLAR               : 
DOT                  : 47 48 89 89 91 94 97 120 121
DOTDOTDOT            : 
DYN                  : 
ELSE                 : 52 53
ENDLINE              : 18 19 20 21 38 47 48 49 74 75 97 106 107 108 117 118 119
ENUM                 : 
EQUAL                : 63
ERRORPROP            : 
EXTERN               : 
F32                  : 126
FOR                  : 67
FROM                 : 108 119
FUNCTION             : 99 100
GET_SLICE            : 91
GREATEQ              : 62
GREATER              : 60 113 114
HASHSET              : 44
IF                   : 51 52
IMPL                 : 
IN                   : 67
INSERT_HASH          : 47
IO                   : 97
LESSEQ               : 
LESST                : 61 113 114
LET                  : 27 28 29 30 115 116
LLAVEDER             : 50 67 76 96 99 100 106 107 108
LLAVEIZ              : 50 67 76 96 99 100 106 107 108
LOOP                 : 
LPAREN               : 38 47 48 75 91 94 97 97 99 100 108 119 120 121
MAS                  : 84
MATCH                : 
MAYOR                : 
MAYORIGUAL           : 
MENOS                : 85
MINUSEQ              : 35
MOD                  : 
MODULO               : 88
MOVE                 : 
MULT                 : 86
MUT                  : 28 29 98 115
NEWFUNC              : 44 117
NOT                  : 
NUMBER               : 
NUMDATATYPES         : 112 114 123
OR                   : 
OROR                 : 56
PATHSEP              : 44 97 108 117 119
PLUSEQ               : 34
POP_VEC              : 121
PRINT                : 
PRINTS               : 38
PUB                  : 71
PUSH_VEC             : 120
READ                 : 97
REF                  : 
RETURN               : 
RPAREN               : 38 47 48 75 91 94 97 97 99 100 108 119 120 121
SELF                 : 
SELFLOWERCASE        : 
SLASHEQ              : 37
STAREQ               : 36
STATIC               : 
STDIN                : 97
STRING               : 39 40 124
STRUCT               : 68
SUPER                : 
TRAIT                : 
TUPLE                : 75
TYPE                 : 
U8                   : 58 59 79 81 82 83 83 89 89 93 94 112 125
UNION_HASH           : 48
UNIT                 : 74
UNSAFE               : 
USE                  : 
VARIABLE             : 22 23 25 29 30 31 32 47 48 48 57 57 58 59 66 67 69 70 71 76 78 80 80 81 82 90 91 94 98 99 100 101 102 115 116 120 121 127
VECT                 : 103 104 108 117 119
VECTMACRO            : 106 107 118
WHERE                : 
WHILE                : 96
=======
Rule 17    asignacion -> declarador ASIGNAR expresion ENDLINE
Rule 18    asignacion -> other_operators ENDLINE
Rule 19    asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
Rule 20    other_operators -> VARIABLE oper_asig expresion
Rule 21    declarador -> VARIABLE
Rule 22    declarador -> let_asig
Rule 23    declarador_sintipo -> VARIABLE
Rule 24    declarador_sintipo -> let_asig_sintipo
Rule 25    let_asig -> LET var_tipo
Rule 26    let_asig -> LET MUT var_tipo
Rule 27    let_asig_sintipo -> LET MUT VARIABLE
Rule 28    let_asig_sintipo -> LET VARIABLE
Rule 29    var_tipo -> VARIABLE
Rule 30    var_tipo -> VARIABLE ASIGNATION_TYPE tipos
Rule 31    oper_asig -> ASIGNAR
Rule 32    oper_asig -> PLUSEQ
Rule 33    oper_asig -> MINUSEQ
Rule 34    oper_asig -> STAREQ
Rule 35    oper_asig -> SLASHEQ
Rule 36    prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
Rule 37    print_expresion -> STRING
Rule 38    print_expresion -> STRING COMMA print_args
Rule 39    print_args -> print_datos COMMA print_args
Rule 40    print_args -> print_datos
Rule 41    print_datos -> expresion
Rule 42    hashset -> HASHSET empty PATHSEP empty NEWFUNC
Rule 43    hashfunc -> hashset_insert
Rule 44    hashfunc -> hashset_union
Rule 45    hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
Rule 46    hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
Rule 47    conditional_asigned -> declarador ASIGNAR conditional ENDLINE
Rule 48    conditional -> if_type validations LLAVEIZ rust LLAVEDER
Rule 49    if_type -> IF
Rule 50    if_type -> ELSE IF
Rule 51    if_type -> ELSE
Rule 52    validations -> comparison
Rule 53    validations -> comparison ANDAND validations
Rule 54    validations -> comparison OROR validations
Rule 55    comparison -> VARIABLE signo_comp VARIABLE
Rule 56    comparison -> VARIABLE signo_comp U8
Rule 57    comparison -> U8 signo_comp VARIABLE
Rule 58    signo_comp -> GREATER
Rule 59    signo_comp -> LESST
Rule 60    signo_comp -> GREATEQ
Rule 61    signo_comp -> EQUAL
Rule 62    signo_comp -> DIFFERENT
Rule 63    f_comparacion -> rango
Rule 64    f_comparacion -> VARIABLE
Rule 65    for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
Rule 66    struct_s -> STRUCT sent_stru
Rule 67    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos
Rule 68    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 69    argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 70    argumentos_tipo -> tipos
Rule 71    argumentos_tipo -> tipos COMMA argumentos_tipo
Rule 72    sent_stru -> UNIT ENDLINE
Rule 73    sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
Rule 74    sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER
Rule 75    op_mat -> art_exp
Rule 76    op_mat -> VARIABLE signo_arit art_exp
Rule 77    op_mat -> U8 signo_arit art_exp
Rule 78    art_exp -> VARIABLE signo_arit VARIABLE
Rule 79    art_exp -> U8 signo_arit VARIABLE
Rule 80    art_exp -> VARIABLE signo_arit U8
Rule 81    art_exp -> U8 signo_arit U8
Rule 82    signo_arit -> MAS
Rule 83    signo_arit -> MENOS
Rule 84    signo_arit -> MULT
Rule 85    signo_arit -> DIVISION
Rule 86    signo_arit -> MODULO
Rule 87    rango -> U8 DOT DOT U8
Rule 88    slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR
Rule 89    slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
Rule 90    valor_get -> rango
Rule 91    valor_get -> U8
Rule 92    slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
Rule 93    empty -> <empty>
Rule 94    while_loop -> WHILE validations LLAVEIZ rust LLAVEDER
Rule 95    read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
Rule 96    reference -> AND empty MUT VARIABLE
Rule 97    function -> no_return_function
Rule 98    function -> return_function
Rule 99    return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
Rule 100   return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
Rule 101   return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
Rule 102   no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
Rule 103   no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
Rule 104   arguments -> VARIABLE ASIGNATION_TYPE tipos
Rule 105   arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments
Rule 106   return -> RETURN expresion ENDLINE
Rule 107   return -> expresion
Rule 108   empty_vector -> declare_vector types_vector empty_vec
Rule 109   data_vector -> declare_vector types_vector vector_content
Rule 110   data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
Rule 111   vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE
Rule 112   vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE
Rule 113   vect_list -> BRACKETL vector_elements BRACKETR
Rule 114   vector_elements -> expresion
Rule 115   vector_elements -> expresion COMMA vector_elements
Rule 116   element_type -> U8 empty NUMDATATYPES
Rule 117   types_vector -> VECT empty LESST DATATYPES GREATER
Rule 118   types_vector -> VECT empty LESST NUMDATATYPES GREATER
Rule 119   declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE
Rule 120   declare_vector -> LET VARIABLE ASIGNATION_TYPE
Rule 121   empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
Rule 122   empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
Rule 123   empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
Rule 124   vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
Rule 125   vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
Rule 126   tipos -> DATATYPES
Rule 127   tipos -> NUMDATATYPES
Rule 128   expresion -> STRING
Rule 129   expresion -> U8
Rule 130   expresion -> F32
Rule 131   expresion -> VARIABLE
Rule 132   expresion_sintipo -> hashset
Rule 133   expresion_sintipo -> op_mat
Rule 134   expresion_sintipo -> slice_exp
Rule 135   expresion_sintipo -> expresion

Terminals, with rules where they appear

AND                  : 46 88 92 96
ANDAND               : 53
ARROW                : 99 100 101
AS                   : 
ASIGNAR              : 17 19 31 47 110 111 112 121 122 123
ASIGNATION_TYPE      : 30 67 68 69 104 105 119 120
ASYNC                : 
AWAIT                : 
BRACKETL             : 88 110 113 122
BRACKETR             : 88 110 113 122
BREAK                : 
B_FALSE              : 
B_TRUE               : 
COMMA                : 38 39 68 69 71 105 110 115
CONST                : 
CONTAINS_SLICE       : 92
CONTIN               : 
CRATE                : 
DATATYPES            : 117 126
DIFFERENT            : 62
DIVISION             : 85
DOLLAR               : 
DOT                  : 45 46 87 87 89 92 95 124 125
DOTDOTDOT            : 
DYN                  : 
ELSE                 : 50 51
ENDLINE              : 17 18 19 36 45 46 47 72 73 95 106 110 111 112 121 122 123
ENUM                 : 
EQUAL                : 61
ERRORPROP            : 
EXTERN               : 
F32                  : 130
FOR                  : 65
FROM                 : 112 123
FUNCTION             : 99 100 101 102 103
GET_SLICE            : 89
GREATEQ              : 60
GREATER              : 58 117 118
HASHSET              : 42
IF                   : 49 50
IMPL                 : 
IN                   : 65
INSERT_HASH          : 45
IO                   : 95
LESSEQ               : 
LESST                : 59 117 118
LET                  : 25 26 27 28 119 120
LLAVEDER             : 48 65 74 94 99 100 101 102 103
LLAVEIZ              : 48 65 74 94 99 100 101 102 103
LOOP                 : 
LPAREN               : 36 45 46 73 89 92 95 95 99 100 101 102 103 112 123 124 125
MAS                  : 82
MATCH                : 
MAYOR                : 
MAYORIGUAL           : 
MENOS                : 83
MINUSEQ              : 33
MOD                  : 
MODULO               : 86
MOVE                 : 
MULT                 : 84
MUT                  : 26 27 96 119
NEWFUNC              : 42 121
NOT                  : 
NUMBER               : 
NUMDATATYPES         : 116 118 127
OR                   : 
OROR                 : 54
PATHSEP              : 42 95 112 121 123
PLUSEQ               : 32
POP_VEC              : 125
PRINT                : 
PRINTS               : 36
PUB                  : 69
PUSH_VEC             : 124
READ                 : 95
REF                  : 
RETURN               : 106
RPAREN               : 36 45 46 73 89 92 95 95 99 100 101 102 103 112 123 124 125
SELF                 : 
SELFLOWERCASE        : 
SLASHEQ              : 35
STAREQ               : 34
STATIC               : 
STDIN                : 95
STRING               : 37 38 128
STRUCT               : 66
SUPER                : 
TRAIT                : 
TUPLE                : 73
TYPE                 : 
U8                   : 56 57 77 79 80 81 81 87 87 91 92 116 129
UNION_HASH           : 46
UNIT                 : 72
UNSAFE               : 
USE                  : 
VARIABLE             : 20 21 23 27 28 29 30 45 46 46 55 55 56 57 64 65 67 68 69 74 76 78 78 79 80 88 89 92 96 99 100 101 102 103 104 105 119 120 124 125 131
VECT                 : 112 117 118 121 123
VECTMACRO            : 110 111 122
WHERE                : 
WHILE                : 94
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
error                : 

Nonterminals, with rules where they appear

<<<<<<< HEAD
argumentos_juntos    : 70 71 76
argumentos_tipo      : 73 75
arguments            : 99 102
art_exp              : 77 78 79
asignacion           : 1
asignacion_sintipo   : 2
comparison           : 54 55 56
conditional          : 5 49
conditional_asigned  : 6
data_vector          : 12
declarador           : 18 49
declarador_sintipo   : 21
declare_vector       : 103 104 105 106
element              : 109 110
element_type         : 106
empty                : 38 38 44 44 47 47 47 47 48 48 48 48 48 90 90 91 91 91 94 94 94 97 97 97 97 98 108 108 120 120 121 121
empty_function       : 17
empty_vec            : 103
empty_vector         : 10
expresion            : 18 43 47 111 120 131
expresion_sintipo    : 21 22
f_comparacion        : 67
for_loop             : 7
function             : 16
hashfunc             : 4
hashset              : 128
hashset_insert       : 45
hashset_union        : 46
if_type              : 50
let_asig             : 24
let_asig_sintipo     : 26
op_mat               : 20 129
oper_asig            : 22
other_operators      : 19
print_args           : 40 41
print_datos          : 41 42
print_expresion      : 38
prints               : 3
rango                : 65 90 92
read_data            : 15
reference            : 97
rust                 : 50 67 96 99 100 0
sent_stru            : 68
signo_arit           : 78 79 80 81 82 83
signo_comp           : 57 58 59
slice_contains       : 14
slice_exp            : 130
slice_get            : 13
struct_s             : 8
tipos                : 32 69 70 71 72 73 101 102
types_vector         : 103 104
validations          : 50 55 56 96
valor_get            : 91
var_tipo             : 27 28
vector_content       : 104 105
vector_elements      : 106 107 108 110
=======
argumentos_juntos    : 68 69 74
argumentos_tipo      : 71 73
arguments            : 99 102 105
art_exp              : 75 76 77
asignacion           : 1
asignacion_sintipo   : 2
comparison           : 52 53 54
conditional          : 5 47
conditional_asigned  : 6
data_vector          : 12
declarador           : 17 47
declarador_sintipo   : 19
declare_vector       : 108 109 110
element_type         : 110
empty                : 36 36 42 42 45 45 45 45 46 46 46 46 46 88 88 89 89 89 92 92 92 95 95 95 95 96 116 117 118 124 124 125 125
empty_vec            : 108
empty_vector         : 10
expresion            : 17 20 41 45 106 107 114 115 124 135
expresion_sintipo    : 19
f_comparacion        : 65
for_loop             : 7
function             : 16
hashfunc             : 4
hashset              : 132
hashset_insert       : 43
hashset_union        : 44
if_type              : 48
let_asig             : 22
let_asig_sintipo     : 24
no_return_function   : 97
op_mat               : 133
oper_asig            : 20
other_operators      : 18
print_args           : 38 39
print_datos          : 39 40
print_expresion      : 36
prints               : 3
rango                : 63 88 90
read_data            : 15
reference            : 95
return               : 99 100 101
return_function      : 98
rust                 : 48 65 94 99 100 102 103 0
sent_stru            : 66
signo_arit           : 76 77 78 79 80 81
signo_comp           : 55 56 57
slice_contains       : 14
slice_exp            : 134
slice_get            : 13
struct_s             : 8
tipos                : 30 67 68 69 70 71 99 100 101 104 105
types_vector         : 108 109
validations          : 48 53 54 94
valor_get            : 89
var_tipo             : 25 26
vect_list            : 111 112
vector_content       : 109
vector_elements      : 110 113 115
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
vector_methods       : 11
while_loop           : 9

Parsing method: LALR

state 0

    (0) S' -> . rust
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
<<<<<<< HEAD
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40
=======
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    rust                           shift and go to state 1
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
<<<<<<< HEAD
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37
=======
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 1

    (0) S' -> rust .



state 2

    (1) rust -> asignacion .

    $end            reduce using rule 1 (rust -> asignacion .)
    LLAVEDER        reduce using rule 1 (rust -> asignacion .)
    RETURN          reduce using rule 1 (rust -> asignacion .)
    STRING          reduce using rule 1 (rust -> asignacion .)
    U8              reduce using rule 1 (rust -> asignacion .)
    F32             reduce using rule 1 (rust -> asignacion .)
    VARIABLE        reduce using rule 1 (rust -> asignacion .)


state 3

    (2) rust -> asignacion_sintipo .

    $end            reduce using rule 2 (rust -> asignacion_sintipo .)
    LLAVEDER        reduce using rule 2 (rust -> asignacion_sintipo .)
    RETURN          reduce using rule 2 (rust -> asignacion_sintipo .)
    STRING          reduce using rule 2 (rust -> asignacion_sintipo .)
    U8              reduce using rule 2 (rust -> asignacion_sintipo .)
    F32             reduce using rule 2 (rust -> asignacion_sintipo .)
    VARIABLE        reduce using rule 2 (rust -> asignacion_sintipo .)


state 4

    (3) rust -> prints .

    $end            reduce using rule 3 (rust -> prints .)
    LLAVEDER        reduce using rule 3 (rust -> prints .)
    RETURN          reduce using rule 3 (rust -> prints .)
    STRING          reduce using rule 3 (rust -> prints .)
    U8              reduce using rule 3 (rust -> prints .)
    F32             reduce using rule 3 (rust -> prints .)
    VARIABLE        reduce using rule 3 (rust -> prints .)


state 5

    (4) rust -> hashfunc .

    $end            reduce using rule 4 (rust -> hashfunc .)
    LLAVEDER        reduce using rule 4 (rust -> hashfunc .)
    RETURN          reduce using rule 4 (rust -> hashfunc .)
    STRING          reduce using rule 4 (rust -> hashfunc .)
    U8              reduce using rule 4 (rust -> hashfunc .)
    F32             reduce using rule 4 (rust -> hashfunc .)
    VARIABLE        reduce using rule 4 (rust -> hashfunc .)


state 6

    (5) rust -> conditional .

    $end            reduce using rule 5 (rust -> conditional .)
    LLAVEDER        reduce using rule 5 (rust -> conditional .)
    RETURN          reduce using rule 5 (rust -> conditional .)
    STRING          reduce using rule 5 (rust -> conditional .)
    U8              reduce using rule 5 (rust -> conditional .)
    F32             reduce using rule 5 (rust -> conditional .)
    VARIABLE        reduce using rule 5 (rust -> conditional .)


state 7

    (6) rust -> conditional_asigned .

    $end            reduce using rule 6 (rust -> conditional_asigned .)
    LLAVEDER        reduce using rule 6 (rust -> conditional_asigned .)
    RETURN          reduce using rule 6 (rust -> conditional_asigned .)
    STRING          reduce using rule 6 (rust -> conditional_asigned .)
    U8              reduce using rule 6 (rust -> conditional_asigned .)
    F32             reduce using rule 6 (rust -> conditional_asigned .)
    VARIABLE        reduce using rule 6 (rust -> conditional_asigned .)


state 8

    (7) rust -> for_loop .

    $end            reduce using rule 7 (rust -> for_loop .)
    LLAVEDER        reduce using rule 7 (rust -> for_loop .)
    RETURN          reduce using rule 7 (rust -> for_loop .)
    STRING          reduce using rule 7 (rust -> for_loop .)
    U8              reduce using rule 7 (rust -> for_loop .)
    F32             reduce using rule 7 (rust -> for_loop .)
    VARIABLE        reduce using rule 7 (rust -> for_loop .)


state 9

    (8) rust -> struct_s .

    $end            reduce using rule 8 (rust -> struct_s .)
    LLAVEDER        reduce using rule 8 (rust -> struct_s .)
    RETURN          reduce using rule 8 (rust -> struct_s .)
    STRING          reduce using rule 8 (rust -> struct_s .)
    U8              reduce using rule 8 (rust -> struct_s .)
    F32             reduce using rule 8 (rust -> struct_s .)
    VARIABLE        reduce using rule 8 (rust -> struct_s .)


state 10

    (9) rust -> while_loop .

    $end            reduce using rule 9 (rust -> while_loop .)
    LLAVEDER        reduce using rule 9 (rust -> while_loop .)
    RETURN          reduce using rule 9 (rust -> while_loop .)
    STRING          reduce using rule 9 (rust -> while_loop .)
    U8              reduce using rule 9 (rust -> while_loop .)
    F32             reduce using rule 9 (rust -> while_loop .)
    VARIABLE        reduce using rule 9 (rust -> while_loop .)


state 11

    (10) rust -> empty_vector .

    $end            reduce using rule 10 (rust -> empty_vector .)
    LLAVEDER        reduce using rule 10 (rust -> empty_vector .)
    RETURN          reduce using rule 10 (rust -> empty_vector .)
    STRING          reduce using rule 10 (rust -> empty_vector .)
    U8              reduce using rule 10 (rust -> empty_vector .)
    F32             reduce using rule 10 (rust -> empty_vector .)
    VARIABLE        reduce using rule 10 (rust -> empty_vector .)


state 12

    (11) rust -> vector_methods .

    $end            reduce using rule 11 (rust -> vector_methods .)
    LLAVEDER        reduce using rule 11 (rust -> vector_methods .)
    RETURN          reduce using rule 11 (rust -> vector_methods .)
    STRING          reduce using rule 11 (rust -> vector_methods .)
    U8              reduce using rule 11 (rust -> vector_methods .)
    F32             reduce using rule 11 (rust -> vector_methods .)
    VARIABLE        reduce using rule 11 (rust -> vector_methods .)


state 13

    (12) rust -> data_vector .

    $end            reduce using rule 12 (rust -> data_vector .)
    LLAVEDER        reduce using rule 12 (rust -> data_vector .)
    RETURN          reduce using rule 12 (rust -> data_vector .)
    STRING          reduce using rule 12 (rust -> data_vector .)
    U8              reduce using rule 12 (rust -> data_vector .)
    F32             reduce using rule 12 (rust -> data_vector .)
    VARIABLE        reduce using rule 12 (rust -> data_vector .)


state 14

    (13) rust -> slice_get .

    $end            reduce using rule 13 (rust -> slice_get .)
    LLAVEDER        reduce using rule 13 (rust -> slice_get .)
    RETURN          reduce using rule 13 (rust -> slice_get .)
    STRING          reduce using rule 13 (rust -> slice_get .)
    U8              reduce using rule 13 (rust -> slice_get .)
    F32             reduce using rule 13 (rust -> slice_get .)
    VARIABLE        reduce using rule 13 (rust -> slice_get .)


state 15

    (14) rust -> slice_contains .

    $end            reduce using rule 14 (rust -> slice_contains .)
    LLAVEDER        reduce using rule 14 (rust -> slice_contains .)
    RETURN          reduce using rule 14 (rust -> slice_contains .)
    STRING          reduce using rule 14 (rust -> slice_contains .)
    U8              reduce using rule 14 (rust -> slice_contains .)
    F32             reduce using rule 14 (rust -> slice_contains .)
    VARIABLE        reduce using rule 14 (rust -> slice_contains .)


state 16

    (15) rust -> read_data .

    $end            reduce using rule 15 (rust -> read_data .)
    LLAVEDER        reduce using rule 15 (rust -> read_data .)
    RETURN          reduce using rule 15 (rust -> read_data .)
    STRING          reduce using rule 15 (rust -> read_data .)
    U8              reduce using rule 15 (rust -> read_data .)
    F32             reduce using rule 15 (rust -> read_data .)
    VARIABLE        reduce using rule 15 (rust -> read_data .)


state 17

    (16) rust -> function .

    $end            reduce using rule 16 (rust -> function .)
    LLAVEDER        reduce using rule 16 (rust -> function .)
    RETURN          reduce using rule 16 (rust -> function .)
    STRING          reduce using rule 16 (rust -> function .)
    U8              reduce using rule 16 (rust -> function .)
    F32             reduce using rule 16 (rust -> function .)
    VARIABLE        reduce using rule 16 (rust -> function .)


state 18

    (17) asignacion -> declarador . ASIGNAR expresion ENDLINE
    (47) conditional_asigned -> declarador . ASIGNAR conditional ENDLINE

    ASIGNAR         shift and go to state 39


state 19

<<<<<<< HEAD
    (18) asignacion -> declarador . ASIGNAR expresion ENDLINE
    (49) conditional_asigned -> declarador . ASIGNAR conditional ENDLINE

    ASIGNAR         shift and go to state 41
=======
    (18) asignacion -> other_operators . ENDLINE

    ENDLINE         shift and go to state 40
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 20

    (19) asignacion_sintipo -> declarador_sintipo . ASIGNAR expresion_sintipo ENDLINE

<<<<<<< HEAD
    ENDLINE         shift and go to state 42
=======
    ASIGNAR         shift and go to state 41
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 21

<<<<<<< HEAD
    (20) asignacion -> op_mat . ENDLINE

    ENDLINE         shift and go to state 43
=======
    (36) prints -> PRINTS . empty LPAREN print_expresion RPAREN empty ENDLINE
    (93) empty -> .

    LPAREN          reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 42

state 22

<<<<<<< HEAD
    (21) asignacion_sintipo -> declarador_sintipo . ASIGNAR expresion_sintipo ENDLINE

    ASIGNAR         shift and go to state 44
=======
    (43) hashfunc -> hashset_insert .

    $end            reduce using rule 43 (hashfunc -> hashset_insert .)
    LLAVEDER        reduce using rule 43 (hashfunc -> hashset_insert .)
    RETURN          reduce using rule 43 (hashfunc -> hashset_insert .)
    STRING          reduce using rule 43 (hashfunc -> hashset_insert .)
    U8              reduce using rule 43 (hashfunc -> hashset_insert .)
    F32             reduce using rule 43 (hashfunc -> hashset_insert .)
    VARIABLE        reduce using rule 43 (hashfunc -> hashset_insert .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 23

<<<<<<< HEAD
    (38) prints -> PRINTS . empty LPAREN print_expresion RPAREN empty ENDLINE
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)
=======
    (44) hashfunc -> hashset_union .

    $end            reduce using rule 44 (hashfunc -> hashset_union .)
    LLAVEDER        reduce using rule 44 (hashfunc -> hashset_union .)
    RETURN          reduce using rule 44 (hashfunc -> hashset_union .)
    STRING          reduce using rule 44 (hashfunc -> hashset_union .)
    U8              reduce using rule 44 (hashfunc -> hashset_union .)
    F32             reduce using rule 44 (hashfunc -> hashset_union .)
    VARIABLE        reduce using rule 44 (hashfunc -> hashset_union .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 45

state 24

<<<<<<< HEAD
    (45) hashfunc -> hashset_insert .

    $end            reduce using rule 45 (hashfunc -> hashset_insert .)
    LLAVEDER        reduce using rule 45 (hashfunc -> hashset_insert .)
=======
    (48) conditional -> if_type . validations LLAVEIZ rust LLAVEDER
    (52) validations -> . comparison
    (53) validations -> . comparison ANDAND validations
    (54) validations -> . comparison OROR validations
    (55) comparison -> . VARIABLE signo_comp VARIABLE
    (56) comparison -> . VARIABLE signo_comp U8
    (57) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 45
    U8              shift and go to state 46
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    validations                    shift and go to state 43
    comparison                     shift and go to state 44

state 25

<<<<<<< HEAD
    (46) hashfunc -> hashset_union .

    $end            reduce using rule 46 (hashfunc -> hashset_union .)
    LLAVEDER        reduce using rule 46 (hashfunc -> hashset_union .)
=======
    (65) for_loop -> FOR . VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER

    VARIABLE        shift and go to state 47
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 26

<<<<<<< HEAD
    (50) conditional -> if_type . validations LLAVEIZ rust LLAVEDER
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    validations                    shift and go to state 46
    comparison                     shift and go to state 47

state 27

    (67) for_loop -> FOR . VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER

    VARIABLE        shift and go to state 50

=======
    (124) vector_methods -> VARIABLE . empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> VARIABLE . empty DOT empty POP_VEC LPAREN RPAREN
    (89) slice_get -> VARIABLE . empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> VARIABLE . empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (21) declarador -> VARIABLE .
    (20) other_operators -> VARIABLE . oper_asig expresion
    (23) declarador_sintipo -> VARIABLE .
    (45) hashset_insert -> VARIABLE . empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> VARIABLE . empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (93) empty -> .
    (31) oper_asig -> . ASIGNAR
    (32) oper_asig -> . PLUSEQ
    (33) oper_asig -> . MINUSEQ
    (34) oper_asig -> . STAREQ
    (35) oper_asig -> . SLASHEQ

  ! reduce/reduce conflict for ASIGNAR resolved using rule 21 (declarador -> VARIABLE .)
  ! shift/reduce conflict for ASIGNAR resolved as shift
    DOT             reduce using rule 93 (empty -> .)
    ASIGNAR         shift and go to state 50
    PLUSEQ          shift and go to state 51
    MINUSEQ         shift and go to state 52
    STAREQ          shift and go to state 53
    SLASHEQ         shift and go to state 54

  ! ASIGNAR         [ reduce using rule 21 (declarador -> VARIABLE .) ]
  ! ASIGNAR         [ reduce using rule 23 (declarador_sintipo -> VARIABLE .) ]

    empty                          shift and go to state 48
    oper_asig                      shift and go to state 49
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 27

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE . empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE . empty DOT empty POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE . empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE . empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (23) declarador -> VARIABLE .
    (22) other_operators -> VARIABLE . oper_asig expresion_sintipo
    (78) op_mat -> VARIABLE . signo_arit art_exp
    (25) declarador_sintipo -> VARIABLE .
    (47) hashset_insert -> VARIABLE . empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE . empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (95) empty -> .
    (33) oper_asig -> . ASIGNAR
    (34) oper_asig -> . PLUSEQ
    (35) oper_asig -> . MINUSEQ
    (36) oper_asig -> . STAREQ
    (37) oper_asig -> . SLASHEQ
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

  ! reduce/reduce conflict for ASIGNAR resolved using rule 23 (declarador -> VARIABLE .)
  ! shift/reduce conflict for ASIGNAR resolved as shift
    DOT             reduce using rule 95 (empty -> .)
    ASIGNAR         shift and go to state 54
    PLUSEQ          shift and go to state 55
    MINUSEQ         shift and go to state 56
    STAREQ          shift and go to state 57
    SLASHEQ         shift and go to state 58
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

  ! ASIGNAR         [ reduce using rule 23 (declarador -> VARIABLE .) ]
  ! ASIGNAR         [ reduce using rule 25 (declarador_sintipo -> VARIABLE .) ]

    empty                          shift and go to state 51
    oper_asig                      shift and go to state 52
    signo_arit                     shift and go to state 53
=======
    (66) struct_s -> STRUCT . sent_stru
    (72) sent_stru -> . UNIT ENDLINE
    (73) sent_stru -> . TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
    (74) sent_stru -> . VARIABLE LLAVEIZ argumentos_juntos LLAVEDER

    UNIT            shift and go to state 56
    TUPLE           shift and go to state 57
    VARIABLE        shift and go to state 58

    sent_stru                      shift and go to state 55
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 28

<<<<<<< HEAD
    (68) struct_s -> STRUCT . sent_stru
    (74) sent_stru -> . UNIT ENDLINE
    (75) sent_stru -> . TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
    (76) sent_stru -> . VARIABLE LLAVEIZ argumentos_juntos LLAVEDER

    UNIT            shift and go to state 65
    TUPLE           shift and go to state 66
    VARIABLE        shift and go to state 67

    sent_stru                      shift and go to state 64

state 30

    (96) while_loop -> WHILE . validations LLAVEIZ rust LLAVEDER
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    validations                    shift and go to state 68
    comparison                     shift and go to state 47

state 31

    (103) empty_vector -> declare_vector . VECT types_vector empty_vec
    (104) data_vector -> declare_vector . VECT types_vector vector_content
    (105) data_vector -> declare_vector . vector_content
    (106) data_vector -> declare_vector . ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (107) vector_content -> . VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE
    (108) vector_content -> . VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    VECT            shift and go to state 69
    ASIGNAR         shift and go to state 71
    VECTMACRO       shift and go to state 72

    vector_content                 shift and go to state 70

state 32

    (79) op_mat -> U8 . signo_arit art_exp
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63
=======
    (94) while_loop -> WHILE . validations LLAVEIZ rust LLAVEDER
    (52) validations -> . comparison
    (53) validations -> . comparison ANDAND validations
    (54) validations -> . comparison OROR validations
    (55) comparison -> . VARIABLE signo_comp VARIABLE
    (56) comparison -> . VARIABLE signo_comp U8
    (57) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 45
    U8              shift and go to state 46

    validations                    shift and go to state 59
    comparison                     shift and go to state 44

state 29

    (108) empty_vector -> declare_vector . types_vector empty_vec
    (109) data_vector -> declare_vector . types_vector vector_content
    (110) data_vector -> declare_vector . ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (117) types_vector -> . VECT empty LESST DATATYPES GREATER
    (118) types_vector -> . VECT empty LESST NUMDATATYPES GREATER

    ASIGNAR         shift and go to state 61
    VECT            shift and go to state 62

    types_vector                   shift and go to state 60

state 30

    (95) read_data -> IO . empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (93) empty -> .

    PATHSEP         reduce using rule 93 (empty -> .)

    empty                          shift and go to state 63

state 31

    (97) function -> no_return_function .

    $end            reduce using rule 97 (function -> no_return_function .)
    LLAVEDER        reduce using rule 97 (function -> no_return_function .)
    RETURN          reduce using rule 97 (function -> no_return_function .)
    STRING          reduce using rule 97 (function -> no_return_function .)
    U8              reduce using rule 97 (function -> no_return_function .)
    F32             reduce using rule 97 (function -> no_return_function .)
    VARIABLE        reduce using rule 97 (function -> no_return_function .)


state 32

    (98) function -> return_function .

    $end            reduce using rule 98 (function -> return_function .)
    LLAVEDER        reduce using rule 98 (function -> return_function .)
    RETURN          reduce using rule 98 (function -> return_function .)
    STRING          reduce using rule 98 (function -> return_function .)
    U8              reduce using rule 98 (function -> return_function .)
    F32             reduce using rule 98 (function -> return_function .)
    VARIABLE        reduce using rule 98 (function -> return_function .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_arit                     shift and go to state 73

state 33

<<<<<<< HEAD
    (97) read_data -> IO . empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    PATHSEP         reduce using rule 95 (empty -> .)
=======
    (22) declarador -> let_asig .

    ASIGNAR         reduce using rule 22 (declarador -> let_asig .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 74

state 34

<<<<<<< HEAD
    (99) function -> FUNCTION . VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> FUNCTION . VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER

    VARIABLE        shift and go to state 75
=======
    (24) declarador_sintipo -> let_asig_sintipo .

    ASIGNAR         reduce using rule 24 (declarador_sintipo -> let_asig_sintipo .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 35

<<<<<<< HEAD
    (24) declarador -> let_asig .

    ASIGNAR         reduce using rule 24 (declarador -> let_asig .)
=======
    (49) if_type -> IF .

    VARIABLE        reduce using rule 49 (if_type -> IF .)
    U8              reduce using rule 49 (if_type -> IF .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 36

<<<<<<< HEAD
    (77) op_mat -> art_exp .

    ENDLINE         reduce using rule 77 (op_mat -> art_exp .)
=======
    (50) if_type -> ELSE . IF
    (51) if_type -> ELSE .

    IF              shift and go to state 64
    VARIABLE        reduce using rule 51 (if_type -> ELSE .)
    U8              reduce using rule 51 (if_type -> ELSE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 37

<<<<<<< HEAD
    (26) declarador_sintipo -> let_asig_sintipo .

    ASIGNAR         reduce using rule 26 (declarador_sintipo -> let_asig_sintipo .)


state 38

    (51) if_type -> IF .

    VARIABLE        reduce using rule 51 (if_type -> IF .)
    U8              reduce using rule 51 (if_type -> IF .)

=======
    (119) declare_vector -> LET . MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> LET . VARIABLE ASIGNATION_TYPE
    (25) let_asig -> LET . var_tipo
    (26) let_asig -> LET . MUT var_tipo
    (27) let_asig_sintipo -> LET . MUT VARIABLE
    (28) let_asig_sintipo -> LET . VARIABLE
    (29) var_tipo -> . VARIABLE
    (30) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    MUT             shift and go to state 65
    VARIABLE        shift and go to state 66

    var_tipo                       shift and go to state 67

state 38

    (102) no_return_function -> FUNCTION . VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> FUNCTION . VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> FUNCTION . VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> FUNCTION . VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> FUNCTION . VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER

    VARIABLE        shift and go to state 68


state 39

    (17) asignacion -> declarador ASIGNAR . expresion ENDLINE
    (47) conditional_asigned -> declarador ASIGNAR . conditional ENDLINE
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
    IF              shift and go to state 35
    ELSE            shift and go to state 36

    expresion                      shift and go to state 69
    conditional                    shift and go to state 70
    if_type                        shift and go to state 24
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 40

<<<<<<< HEAD
    (52) if_type -> ELSE . IF
    (53) if_type -> ELSE .

    IF              shift and go to state 76
    VARIABLE        reduce using rule 53 (if_type -> ELSE .)
    U8              reduce using rule 53 (if_type -> ELSE .)
=======
    (18) asignacion -> other_operators ENDLINE .

    $end            reduce using rule 18 (asignacion -> other_operators ENDLINE .)
    LLAVEDER        reduce using rule 18 (asignacion -> other_operators ENDLINE .)
    RETURN          reduce using rule 18 (asignacion -> other_operators ENDLINE .)
    STRING          reduce using rule 18 (asignacion -> other_operators ENDLINE .)
    U8              reduce using rule 18 (asignacion -> other_operators ENDLINE .)
    F32             reduce using rule 18 (asignacion -> other_operators ENDLINE .)
    VARIABLE        reduce using rule 18 (asignacion -> other_operators ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 41

<<<<<<< HEAD
    (115) declare_vector -> LET . MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> LET . VARIABLE ASIGNATION_TYPE
    (27) let_asig -> LET . var_tipo
    (28) let_asig -> LET . MUT var_tipo
    (29) let_asig_sintipo -> LET . MUT VARIABLE
    (30) let_asig_sintipo -> LET . VARIABLE
    (31) var_tipo -> . VARIABLE
    (32) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos
=======
    (19) asignacion_sintipo -> declarador_sintipo ASIGNAR . expresion_sintipo ENDLINE
    (132) expresion_sintipo -> . hashset
    (133) expresion_sintipo -> . op_mat
    (134) expresion_sintipo -> . slice_exp
    (135) expresion_sintipo -> . expresion
    (42) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (75) op_mat -> . art_exp
    (76) op_mat -> . VARIABLE signo_arit art_exp
    (77) op_mat -> . U8 signo_arit art_exp
    (88) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE
    (78) art_exp -> . VARIABLE signo_arit VARIABLE
    (79) art_exp -> . U8 signo_arit VARIABLE
    (80) art_exp -> . VARIABLE signo_arit U8
    (81) art_exp -> . U8 signo_arit U8

    HASHSET         shift and go to state 80
    VARIABLE        shift and go to state 82
    U8              shift and go to state 83
    AND             shift and go to state 84
    STRING          shift and go to state 71
    F32             shift and go to state 73
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    MUT             shift and go to state 77
    VARIABLE        shift and go to state 78

<<<<<<< HEAD
    var_tipo                       shift and go to state 79

state 41

    (18) asignacion -> declarador ASIGNAR . expresion ENDLINE
    (49) conditional_asigned -> declarador ASIGNAR . conditional ENDLINE
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85
    IF              shift and go to state 38
    ELSE            shift and go to state 39

    expresion                      shift and go to state 80
    conditional                    shift and go to state 81
    if_type                        shift and go to state 26

state 42

    (19) asignacion -> other_operators ENDLINE .

    $end            reduce using rule 19 (asignacion -> other_operators ENDLINE .)
    LLAVEDER        reduce using rule 19 (asignacion -> other_operators ENDLINE .)
=======
state 42

    (36) prints -> PRINTS empty . LPAREN print_expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 85
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 43

<<<<<<< HEAD
    (20) asignacion -> op_mat ENDLINE .

    $end            reduce using rule 20 (asignacion -> op_mat ENDLINE .)
    LLAVEDER        reduce using rule 20 (asignacion -> op_mat ENDLINE .)
=======
    (48) conditional -> if_type validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 86
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 44

<<<<<<< HEAD
    (21) asignacion_sintipo -> declarador_sintipo ASIGNAR . expresion_sintipo ENDLINE
    (128) expresion_sintipo -> . hashset
    (129) expresion_sintipo -> . op_mat
    (130) expresion_sintipo -> . slice_exp
    (131) expresion_sintipo -> . expresion
    (44) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (90) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    HASHSET         shift and go to state 91
    VARIABLE        shift and go to state 92
    U8              shift and go to state 93
    AND             shift and go to state 94
    STRING          shift and go to state 82
    F32             shift and go to state 84

    expresion_sintipo              shift and go to state 86
    hashset                        shift and go to state 87
    op_mat                         shift and go to state 88
    slice_exp                      shift and go to state 89
    expresion                      shift and go to state 90
    art_exp                        shift and go to state 36

state 45

    (38) prints -> PRINTS empty . LPAREN print_expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 95


state 46

    (50) conditional -> if_type validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 96
=======
    (52) validations -> comparison .
    (53) validations -> comparison . ANDAND validations
    (54) validations -> comparison . OROR validations

    LLAVEIZ         reduce using rule 52 (validations -> comparison .)
    ANDAND          shift and go to state 87
    OROR            shift and go to state 88


state 45

    (55) comparison -> VARIABLE . signo_comp VARIABLE
    (56) comparison -> VARIABLE . signo_comp U8
    (58) signo_comp -> . GREATER
    (59) signo_comp -> . LESST
    (60) signo_comp -> . GREATEQ
    (61) signo_comp -> . EQUAL
    (62) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 90
    LESST           shift and go to state 91
    GREATEQ         shift and go to state 92
    EQUAL           shift and go to state 93
    DIFFERENT       shift and go to state 94

    signo_comp                     shift and go to state 89

state 46

    (57) comparison -> U8 . signo_comp VARIABLE
    (58) signo_comp -> . GREATER
    (59) signo_comp -> . LESST
    (60) signo_comp -> . GREATEQ
    (61) signo_comp -> . EQUAL
    (62) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 90
    LESST           shift and go to state 91
    GREATEQ         shift and go to state 92
    EQUAL           shift and go to state 93
    DIFFERENT       shift and go to state 94
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_comp                     shift and go to state 95

state 47

<<<<<<< HEAD
    (54) validations -> comparison .
    (55) validations -> comparison . ANDAND validations
    (56) validations -> comparison . OROR validations

    LLAVEIZ         reduce using rule 54 (validations -> comparison .)
    ANDAND          shift and go to state 97
    OROR            shift and go to state 98
=======
    (65) for_loop -> FOR VARIABLE . IN f_comparacion LLAVEIZ rust LLAVEDER

    IN              shift and go to state 96
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 48

<<<<<<< HEAD
    (57) comparison -> VARIABLE . signo_comp VARIABLE
    (58) comparison -> VARIABLE . signo_comp U8
    (60) signo_comp -> . GREATER
    (61) signo_comp -> . LESST
    (62) signo_comp -> . GREATEQ
    (63) signo_comp -> . EQUAL
    (64) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 100
    LESST           shift and go to state 101
    GREATEQ         shift and go to state 102
    EQUAL           shift and go to state 103
    DIFFERENT       shift and go to state 104
=======
    (124) vector_methods -> VARIABLE empty . DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> VARIABLE empty . DOT empty POP_VEC LPAREN RPAREN
    (89) slice_get -> VARIABLE empty . DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> VARIABLE empty . DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (45) hashset_insert -> VARIABLE empty . DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> VARIABLE empty . DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    DOT             shift and go to state 97
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_comp                     shift and go to state 99

state 49

<<<<<<< HEAD
    (59) comparison -> U8 . signo_comp VARIABLE
    (60) signo_comp -> . GREATER
    (61) signo_comp -> . LESST
    (62) signo_comp -> . GREATEQ
    (63) signo_comp -> . EQUAL
    (64) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 100
    LESST           shift and go to state 101
    GREATEQ         shift and go to state 102
    EQUAL           shift and go to state 103
    DIFFERENT       shift and go to state 104

    signo_comp                     shift and go to state 105

state 50

    (67) for_loop -> FOR VARIABLE . IN f_comparacion LLAVEIZ rust LLAVEDER

    IN              shift and go to state 106
=======
    (20) other_operators -> VARIABLE oper_asig . expresion
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74

    expresion                      shift and go to state 98

state 50

    (31) oper_asig -> ASIGNAR .

    STRING          reduce using rule 31 (oper_asig -> ASIGNAR .)
    U8              reduce using rule 31 (oper_asig -> ASIGNAR .)
    F32             reduce using rule 31 (oper_asig -> ASIGNAR .)
    VARIABLE        reduce using rule 31 (oper_asig -> ASIGNAR .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 51

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty . DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE empty . DOT empty POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE empty . DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE empty . DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (47) hashset_insert -> VARIABLE empty . DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE empty . DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    DOT             shift and go to state 107
=======
    (32) oper_asig -> PLUSEQ .

    STRING          reduce using rule 32 (oper_asig -> PLUSEQ .)
    U8              reduce using rule 32 (oper_asig -> PLUSEQ .)
    F32             reduce using rule 32 (oper_asig -> PLUSEQ .)
    VARIABLE        reduce using rule 32 (oper_asig -> PLUSEQ .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 52

<<<<<<< HEAD
    (22) other_operators -> VARIABLE oper_asig . expresion_sintipo
    (128) expresion_sintipo -> . hashset
    (129) expresion_sintipo -> . op_mat
    (130) expresion_sintipo -> . slice_exp
    (131) expresion_sintipo -> . expresion
    (44) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (90) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    HASHSET         shift and go to state 91
    VARIABLE        shift and go to state 92
    U8              shift and go to state 93
    AND             shift and go to state 94
    STRING          shift and go to state 82
    F32             shift and go to state 84

    expresion_sintipo              shift and go to state 108
    hashset                        shift and go to state 87
    op_mat                         shift and go to state 88
    slice_exp                      shift and go to state 89
    expresion                      shift and go to state 90
    art_exp                        shift and go to state 36

state 53

    (78) op_mat -> VARIABLE signo_arit . art_exp
    (80) art_exp -> VARIABLE signo_arit . VARIABLE
    (82) art_exp -> VARIABLE signo_arit . U8
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    VARIABLE        shift and go to state 109
    U8              shift and go to state 111
=======
    (33) oper_asig -> MINUSEQ .

    STRING          reduce using rule 33 (oper_asig -> MINUSEQ .)
    U8              reduce using rule 33 (oper_asig -> MINUSEQ .)
    F32             reduce using rule 33 (oper_asig -> MINUSEQ .)
    VARIABLE        reduce using rule 33 (oper_asig -> MINUSEQ .)


state 53

    (34) oper_asig -> STAREQ .

    STRING          reduce using rule 34 (oper_asig -> STAREQ .)
    U8              reduce using rule 34 (oper_asig -> STAREQ .)
    F32             reduce using rule 34 (oper_asig -> STAREQ .)
    VARIABLE        reduce using rule 34 (oper_asig -> STAREQ .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    art_exp                        shift and go to state 110

state 54

<<<<<<< HEAD
    (33) oper_asig -> ASIGNAR .

    HASHSET         reduce using rule 33 (oper_asig -> ASIGNAR .)
    VARIABLE        reduce using rule 33 (oper_asig -> ASIGNAR .)
    U8              reduce using rule 33 (oper_asig -> ASIGNAR .)
    AND             reduce using rule 33 (oper_asig -> ASIGNAR .)
    STRING          reduce using rule 33 (oper_asig -> ASIGNAR .)
    F32             reduce using rule 33 (oper_asig -> ASIGNAR .)
=======
    (35) oper_asig -> SLASHEQ .

    STRING          reduce using rule 35 (oper_asig -> SLASHEQ .)
    U8              reduce using rule 35 (oper_asig -> SLASHEQ .)
    F32             reduce using rule 35 (oper_asig -> SLASHEQ .)
    VARIABLE        reduce using rule 35 (oper_asig -> SLASHEQ .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 55

<<<<<<< HEAD
    (34) oper_asig -> PLUSEQ .

    HASHSET         reduce using rule 34 (oper_asig -> PLUSEQ .)
    VARIABLE        reduce using rule 34 (oper_asig -> PLUSEQ .)
    U8              reduce using rule 34 (oper_asig -> PLUSEQ .)
    AND             reduce using rule 34 (oper_asig -> PLUSEQ .)
    STRING          reduce using rule 34 (oper_asig -> PLUSEQ .)
    F32             reduce using rule 34 (oper_asig -> PLUSEQ .)
=======
    (66) struct_s -> STRUCT sent_stru .

    $end            reduce using rule 66 (struct_s -> STRUCT sent_stru .)
    LLAVEDER        reduce using rule 66 (struct_s -> STRUCT sent_stru .)
    RETURN          reduce using rule 66 (struct_s -> STRUCT sent_stru .)
    STRING          reduce using rule 66 (struct_s -> STRUCT sent_stru .)
    U8              reduce using rule 66 (struct_s -> STRUCT sent_stru .)
    F32             reduce using rule 66 (struct_s -> STRUCT sent_stru .)
    VARIABLE        reduce using rule 66 (struct_s -> STRUCT sent_stru .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 56

<<<<<<< HEAD
    (35) oper_asig -> MINUSEQ .

    HASHSET         reduce using rule 35 (oper_asig -> MINUSEQ .)
    VARIABLE        reduce using rule 35 (oper_asig -> MINUSEQ .)
    U8              reduce using rule 35 (oper_asig -> MINUSEQ .)
    AND             reduce using rule 35 (oper_asig -> MINUSEQ .)
    STRING          reduce using rule 35 (oper_asig -> MINUSEQ .)
    F32             reduce using rule 35 (oper_asig -> MINUSEQ .)
=======
    (72) sent_stru -> UNIT . ENDLINE

    ENDLINE         shift and go to state 99
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 57

<<<<<<< HEAD
    (36) oper_asig -> STAREQ .

    HASHSET         reduce using rule 36 (oper_asig -> STAREQ .)
    VARIABLE        reduce using rule 36 (oper_asig -> STAREQ .)
    U8              reduce using rule 36 (oper_asig -> STAREQ .)
    AND             reduce using rule 36 (oper_asig -> STAREQ .)
    STRING          reduce using rule 36 (oper_asig -> STAREQ .)
    F32             reduce using rule 36 (oper_asig -> STAREQ .)
=======
    (73) sent_stru -> TUPLE . LPAREN argumentos_tipo RPAREN ENDLINE

    LPAREN          shift and go to state 100
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 58

<<<<<<< HEAD
    (37) oper_asig -> SLASHEQ .

    HASHSET         reduce using rule 37 (oper_asig -> SLASHEQ .)
    VARIABLE        reduce using rule 37 (oper_asig -> SLASHEQ .)
    U8              reduce using rule 37 (oper_asig -> SLASHEQ .)
    AND             reduce using rule 37 (oper_asig -> SLASHEQ .)
    STRING          reduce using rule 37 (oper_asig -> SLASHEQ .)
    F32             reduce using rule 37 (oper_asig -> SLASHEQ .)
=======
    (74) sent_stru -> VARIABLE . LLAVEIZ argumentos_juntos LLAVEDER

    LLAVEIZ         shift and go to state 101
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 59

<<<<<<< HEAD
    (84) signo_arit -> MAS .

    VARIABLE        reduce using rule 84 (signo_arit -> MAS .)
    U8              reduce using rule 84 (signo_arit -> MAS .)
=======
    (94) while_loop -> WHILE validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 102
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 60

<<<<<<< HEAD
    (85) signo_arit -> MENOS .

    VARIABLE        reduce using rule 85 (signo_arit -> MENOS .)
    U8              reduce using rule 85 (signo_arit -> MENOS .)


state 61

    (86) signo_arit -> MULT .

    VARIABLE        reduce using rule 86 (signo_arit -> MULT .)
    U8              reduce using rule 86 (signo_arit -> MULT .)
=======
    (108) empty_vector -> declare_vector types_vector . empty_vec
    (109) data_vector -> declare_vector types_vector . vector_content
    (121) empty_vec -> . ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
    (122) empty_vec -> . ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
    (123) empty_vec -> . ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
    (111) vector_content -> . ASIGNAR VECTMACRO vect_list ENDLINE
    (112) vector_content -> . ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE

    ASIGNAR         shift and go to state 105

    empty_vec                      shift and go to state 103
    vector_content                 shift and go to state 104

state 61

    (110) data_vector -> declare_vector ASIGNAR . VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE

    VECTMACRO       shift and go to state 106
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 62

<<<<<<< HEAD
    (87) signo_arit -> DIVISION .

    VARIABLE        reduce using rule 87 (signo_arit -> DIVISION .)
    U8              reduce using rule 87 (signo_arit -> DIVISION .)
=======
    (117) types_vector -> VECT . empty LESST DATATYPES GREATER
    (118) types_vector -> VECT . empty LESST NUMDATATYPES GREATER
    (93) empty -> .

    LESST           reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 107

state 63

<<<<<<< HEAD
    (88) signo_arit -> MODULO .

    VARIABLE        reduce using rule 88 (signo_arit -> MODULO .)
    U8              reduce using rule 88 (signo_arit -> MODULO .)
=======
    (95) read_data -> IO empty . PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    PATHSEP         shift and go to state 108
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 64

<<<<<<< HEAD
    (68) struct_s -> STRUCT sent_stru .

    $end            reduce using rule 68 (struct_s -> STRUCT sent_stru .)
    LLAVEDER        reduce using rule 68 (struct_s -> STRUCT sent_stru .)
=======
    (50) if_type -> ELSE IF .

    VARIABLE        reduce using rule 50 (if_type -> ELSE IF .)
    U8              reduce using rule 50 (if_type -> ELSE IF .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 65

<<<<<<< HEAD
    (74) sent_stru -> UNIT . ENDLINE

    ENDLINE         shift and go to state 112
=======
    (119) declare_vector -> LET MUT . VARIABLE ASIGNATION_TYPE
    (26) let_asig -> LET MUT . var_tipo
    (27) let_asig_sintipo -> LET MUT . VARIABLE
    (29) var_tipo -> . VARIABLE
    (30) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    VARIABLE        shift and go to state 109
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    var_tipo                       shift and go to state 110

state 66

<<<<<<< HEAD
    (75) sent_stru -> TUPLE . LPAREN argumentos_tipo RPAREN ENDLINE

    LPAREN          shift and go to state 113
=======
    (120) declare_vector -> LET VARIABLE . ASIGNATION_TYPE
    (28) let_asig_sintipo -> LET VARIABLE .
    (29) var_tipo -> VARIABLE .
    (30) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 28 (let_asig_sintipo -> LET VARIABLE .)
    ASIGNATION_TYPE shift and go to state 111
    ASIGNAR         reduce using rule 28 (let_asig_sintipo -> LET VARIABLE .)

  ! ASIGNAR         [ reduce using rule 29 (var_tipo -> VARIABLE .) ]
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 67

<<<<<<< HEAD
    (76) sent_stru -> VARIABLE . LLAVEIZ argumentos_juntos LLAVEDER

    LLAVEIZ         shift and go to state 114
=======
    (25) let_asig -> LET var_tipo .

    ASIGNAR         reduce using rule 25 (let_asig -> LET var_tipo .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 68

<<<<<<< HEAD
    (96) while_loop -> WHILE validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 115
=======
    (102) no_return_function -> FUNCTION VARIABLE . LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> FUNCTION VARIABLE . LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> FUNCTION VARIABLE . LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> FUNCTION VARIABLE . LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> FUNCTION VARIABLE . LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER

    LPAREN          shift and go to state 112
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 69

<<<<<<< HEAD
    (103) empty_vector -> declare_vector VECT . types_vector empty_vec
    (104) data_vector -> declare_vector VECT . types_vector vector_content
    (108) vector_content -> VECT . empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
    (113) types_vector -> . LESST DATATYPES GREATER
    (114) types_vector -> . LESST NUMDATATYPES GREATER
    (95) empty -> .

    LESST           shift and go to state 118
    PATHSEP         reduce using rule 95 (empty -> .)
=======
    (17) asignacion -> declarador ASIGNAR expresion . ENDLINE

    ENDLINE         shift and go to state 113
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    types_vector                   shift and go to state 116
    empty                          shift and go to state 117

state 70

<<<<<<< HEAD
    (105) data_vector -> declare_vector vector_content .

    $end            reduce using rule 105 (data_vector -> declare_vector vector_content .)
    LLAVEDER        reduce using rule 105 (data_vector -> declare_vector vector_content .)
=======
    (47) conditional_asigned -> declarador ASIGNAR conditional . ENDLINE

    ENDLINE         shift and go to state 114
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 71

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR . VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE

    VECTMACRO       shift and go to state 119
=======
    (128) expresion -> STRING .

    ENDLINE         reduce using rule 128 (expresion -> STRING .)
    COMMA           reduce using rule 128 (expresion -> STRING .)
    RPAREN          reduce using rule 128 (expresion -> STRING .)
    BRACKETR        reduce using rule 128 (expresion -> STRING .)
    LLAVEDER        reduce using rule 128 (expresion -> STRING .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 72

<<<<<<< HEAD
    (107) vector_content -> VECTMACRO . LLAVEIZ vector_elements LLAVEDER ENDLINE

    LLAVEIZ         shift and go to state 120
=======
    (129) expresion -> U8 .

    ENDLINE         reduce using rule 129 (expresion -> U8 .)
    COMMA           reduce using rule 129 (expresion -> U8 .)
    RPAREN          reduce using rule 129 (expresion -> U8 .)
    BRACKETR        reduce using rule 129 (expresion -> U8 .)
    LLAVEDER        reduce using rule 129 (expresion -> U8 .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 73

<<<<<<< HEAD
    (79) op_mat -> U8 signo_arit . art_exp
    (81) art_exp -> U8 signo_arit . VARIABLE
    (83) art_exp -> U8 signo_arit . U8
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    VARIABLE        shift and go to state 123
    U8              shift and go to state 121
=======
    (130) expresion -> F32 .

    ENDLINE         reduce using rule 130 (expresion -> F32 .)
    COMMA           reduce using rule 130 (expresion -> F32 .)
    RPAREN          reduce using rule 130 (expresion -> F32 .)
    BRACKETR        reduce using rule 130 (expresion -> F32 .)
    LLAVEDER        reduce using rule 130 (expresion -> F32 .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    art_exp                        shift and go to state 122

state 74

<<<<<<< HEAD
    (97) read_data -> IO empty . PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    PATHSEP         shift and go to state 124
=======
    (131) expresion -> VARIABLE .

    ENDLINE         reduce using rule 131 (expresion -> VARIABLE .)
    COMMA           reduce using rule 131 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 131 (expresion -> VARIABLE .)
    BRACKETR        reduce using rule 131 (expresion -> VARIABLE .)
    LLAVEDER        reduce using rule 131 (expresion -> VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 75

<<<<<<< HEAD
    (99) function -> FUNCTION VARIABLE . LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> FUNCTION VARIABLE . LPAREN RPAREN LLAVEIZ rust LLAVEDER

    LPAREN          shift and go to state 125
=======
    (19) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo . ENDLINE

    ENDLINE         shift and go to state 115
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 76

<<<<<<< HEAD
    (52) if_type -> ELSE IF .

    VARIABLE        reduce using rule 52 (if_type -> ELSE IF .)
    U8              reduce using rule 52 (if_type -> ELSE IF .)
=======
    (132) expresion_sintipo -> hashset .

    ENDLINE         reduce using rule 132 (expresion_sintipo -> hashset .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 77

<<<<<<< HEAD
    (115) declare_vector -> LET MUT . VARIABLE ASIGNATION_TYPE
    (28) let_asig -> LET MUT . var_tipo
    (29) let_asig_sintipo -> LET MUT . VARIABLE
    (31) var_tipo -> . VARIABLE
    (32) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    VARIABLE        shift and go to state 126
=======
    (133) expresion_sintipo -> op_mat .

    ENDLINE         reduce using rule 133 (expresion_sintipo -> op_mat .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    var_tipo                       shift and go to state 127

state 78

<<<<<<< HEAD
    (116) declare_vector -> LET VARIABLE . ASIGNATION_TYPE
    (30) let_asig_sintipo -> LET VARIABLE .
    (31) var_tipo -> VARIABLE .
    (32) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 30 (let_asig_sintipo -> LET VARIABLE .)
    ASIGNATION_TYPE shift and go to state 128
    ASIGNAR         reduce using rule 30 (let_asig_sintipo -> LET VARIABLE .)

  ! ASIGNAR         [ reduce using rule 31 (var_tipo -> VARIABLE .) ]
=======
    (134) expresion_sintipo -> slice_exp .

    ENDLINE         reduce using rule 134 (expresion_sintipo -> slice_exp .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 79

<<<<<<< HEAD
    (27) let_asig -> LET var_tipo .

    ASIGNAR         reduce using rule 27 (let_asig -> LET var_tipo .)
=======
    (135) expresion_sintipo -> expresion .

    ENDLINE         reduce using rule 135 (expresion_sintipo -> expresion .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 80

<<<<<<< HEAD
    (18) asignacion -> declarador ASIGNAR expresion . ENDLINE

    ENDLINE         shift and go to state 129
=======
    (42) hashset -> HASHSET . empty PATHSEP empty NEWFUNC
    (93) empty -> .

    PATHSEP         reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 116

state 81

<<<<<<< HEAD
    (49) conditional_asigned -> declarador ASIGNAR conditional . ENDLINE

    ENDLINE         shift and go to state 130
=======
    (75) op_mat -> art_exp .

    ENDLINE         reduce using rule 75 (op_mat -> art_exp .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 82

<<<<<<< HEAD
    (124) expresion -> STRING .

    ENDLINE         reduce using rule 124 (expresion -> STRING .)
    COMMA           reduce using rule 124 (expresion -> STRING .)
    LLAVEDER        reduce using rule 124 (expresion -> STRING .)
    RPAREN          reduce using rule 124 (expresion -> STRING .)


state 83

    (125) expresion -> U8 .

    ENDLINE         reduce using rule 125 (expresion -> U8 .)
    COMMA           reduce using rule 125 (expresion -> U8 .)
    LLAVEDER        reduce using rule 125 (expresion -> U8 .)
    RPAREN          reduce using rule 125 (expresion -> U8 .)


state 84

    (126) expresion -> F32 .

    ENDLINE         reduce using rule 126 (expresion -> F32 .)
    COMMA           reduce using rule 126 (expresion -> F32 .)
    LLAVEDER        reduce using rule 126 (expresion -> F32 .)
    RPAREN          reduce using rule 126 (expresion -> F32 .)


state 85

    (127) expresion -> VARIABLE .

    ENDLINE         reduce using rule 127 (expresion -> VARIABLE .)
    COMMA           reduce using rule 127 (expresion -> VARIABLE .)
    LLAVEDER        reduce using rule 127 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 127 (expresion -> VARIABLE .)
=======
    (76) op_mat -> VARIABLE . signo_arit art_exp
    (131) expresion -> VARIABLE .
    (78) art_exp -> VARIABLE . signo_arit VARIABLE
    (80) art_exp -> VARIABLE . signo_arit U8
    (82) signo_arit -> . MAS
    (83) signo_arit -> . MENOS
    (84) signo_arit -> . MULT
    (85) signo_arit -> . DIVISION
    (86) signo_arit -> . MODULO

    ENDLINE         reduce using rule 131 (expresion -> VARIABLE .)
    MAS             shift and go to state 118
    MENOS           shift and go to state 119
    MULT            shift and go to state 120
    DIVISION        shift and go to state 121
    MODULO          shift and go to state 122

    signo_arit                     shift and go to state 117

state 83

    (77) op_mat -> U8 . signo_arit art_exp
    (129) expresion -> U8 .
    (79) art_exp -> U8 . signo_arit VARIABLE
    (81) art_exp -> U8 . signo_arit U8
    (82) signo_arit -> . MAS
    (83) signo_arit -> . MENOS
    (84) signo_arit -> . MULT
    (85) signo_arit -> . DIVISION
    (86) signo_arit -> . MODULO

    ENDLINE         reduce using rule 129 (expresion -> U8 .)
    MAS             shift and go to state 118
    MENOS           shift and go to state 119
    MULT            shift and go to state 120
    DIVISION        shift and go to state 121
    MODULO          shift and go to state 122

    signo_arit                     shift and go to state 123

state 84

    (88) slice_exp -> AND . empty VARIABLE empty BRACKETL rango BRACKETR
    (93) empty -> .

    VARIABLE        reduce using rule 93 (empty -> .)

    empty                          shift and go to state 124

state 85

    (36) prints -> PRINTS empty LPAREN . print_expresion RPAREN empty ENDLINE
    (37) print_expresion -> . STRING
    (38) print_expresion -> . STRING COMMA print_args

    STRING          shift and go to state 126
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    print_expresion                shift and go to state 125

state 86

<<<<<<< HEAD
    (21) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo . ENDLINE

    ENDLINE         shift and go to state 131


state 87

    (128) expresion_sintipo -> hashset .

    ENDLINE         reduce using rule 128 (expresion_sintipo -> hashset .)


state 88

    (129) expresion_sintipo -> op_mat .

    ENDLINE         reduce using rule 129 (expresion_sintipo -> op_mat .)


state 89

    (130) expresion_sintipo -> slice_exp .

    ENDLINE         reduce using rule 130 (expresion_sintipo -> slice_exp .)


state 90

    (131) expresion_sintipo -> expresion .

    ENDLINE         reduce using rule 131 (expresion_sintipo -> expresion .)


state 91

    (44) hashset -> HASHSET . empty PATHSEP empty NEWFUNC
    (95) empty -> .

    PATHSEP         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 132

state 92

    (78) op_mat -> VARIABLE . signo_arit art_exp
    (127) expresion -> VARIABLE .
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 127 (expresion -> VARIABLE .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 53

state 93

    (79) op_mat -> U8 . signo_arit art_exp
    (125) expresion -> U8 .
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 125 (expresion -> U8 .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 73

state 94

    (90) slice_exp -> AND . empty VARIABLE empty BRACKETL rango BRACKETR
    (95) empty -> .

    VARIABLE        reduce using rule 95 (empty -> .)

    empty                          shift and go to state 133

state 95

    (38) prints -> PRINTS empty LPAREN . print_expresion RPAREN empty ENDLINE
    (39) print_expresion -> . STRING
    (40) print_expresion -> . STRING COMMA print_args

    STRING          shift and go to state 135

    print_expresion                shift and go to state 134

state 96

    (50) conditional -> if_type validations LLAVEIZ . rust LLAVEDER
=======
    (48) conditional -> if_type validations LLAVEIZ . rust LLAVEDER
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
<<<<<<< HEAD
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    if_type                        shift and go to state 26
    rust                           shift and go to state 136
=======
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38

    if_type                        shift and go to state 24
    rust                           shift and go to state 127
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
<<<<<<< HEAD
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 97

    (55) validations -> comparison ANDAND . validations
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    comparison                     shift and go to state 47
    validations                    shift and go to state 137
=======
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 87

    (53) validations -> comparison ANDAND . validations
    (52) validations -> . comparison
    (53) validations -> . comparison ANDAND validations
    (54) validations -> . comparison OROR validations
    (55) comparison -> . VARIABLE signo_comp VARIABLE
    (56) comparison -> . VARIABLE signo_comp U8
    (57) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 45
    U8              shift and go to state 46

    comparison                     shift and go to state 44
    validations                    shift and go to state 128

state 88

    (54) validations -> comparison OROR . validations
    (52) validations -> . comparison
    (53) validations -> . comparison ANDAND validations
    (54) validations -> . comparison OROR validations
    (55) comparison -> . VARIABLE signo_comp VARIABLE
    (56) comparison -> . VARIABLE signo_comp U8
    (57) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 45
    U8              shift and go to state 46

    comparison                     shift and go to state 44
    validations                    shift and go to state 129
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 98

<<<<<<< HEAD
    (56) validations -> comparison OROR . validations
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    comparison                     shift and go to state 47
    validations                    shift and go to state 138
=======
    (55) comparison -> VARIABLE signo_comp . VARIABLE
    (56) comparison -> VARIABLE signo_comp . U8

    VARIABLE        shift and go to state 130
    U8              shift and go to state 131

>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 99

<<<<<<< HEAD
    (57) comparison -> VARIABLE signo_comp . VARIABLE
    (58) comparison -> VARIABLE signo_comp . U8

    VARIABLE        shift and go to state 139
    U8              shift and go to state 140
=======
    (58) signo_comp -> GREATER .

    VARIABLE        reduce using rule 58 (signo_comp -> GREATER .)
    U8              reduce using rule 58 (signo_comp -> GREATER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 100

<<<<<<< HEAD
    (60) signo_comp -> GREATER .

    VARIABLE        reduce using rule 60 (signo_comp -> GREATER .)
    U8              reduce using rule 60 (signo_comp -> GREATER .)
=======
    (59) signo_comp -> LESST .

    VARIABLE        reduce using rule 59 (signo_comp -> LESST .)
    U8              reduce using rule 59 (signo_comp -> LESST .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 101

<<<<<<< HEAD
    (61) signo_comp -> LESST .

    VARIABLE        reduce using rule 61 (signo_comp -> LESST .)
    U8              reduce using rule 61 (signo_comp -> LESST .)
=======
    (60) signo_comp -> GREATEQ .

    VARIABLE        reduce using rule 60 (signo_comp -> GREATEQ .)
    U8              reduce using rule 60 (signo_comp -> GREATEQ .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 102

<<<<<<< HEAD
    (62) signo_comp -> GREATEQ .

    VARIABLE        reduce using rule 62 (signo_comp -> GREATEQ .)
    U8              reduce using rule 62 (signo_comp -> GREATEQ .)
=======
    (61) signo_comp -> EQUAL .

    VARIABLE        reduce using rule 61 (signo_comp -> EQUAL .)
    U8              reduce using rule 61 (signo_comp -> EQUAL .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 103

<<<<<<< HEAD
    (63) signo_comp -> EQUAL .

    VARIABLE        reduce using rule 63 (signo_comp -> EQUAL .)
    U8              reduce using rule 63 (signo_comp -> EQUAL .)
=======
    (62) signo_comp -> DIFFERENT .

    VARIABLE        reduce using rule 62 (signo_comp -> DIFFERENT .)
    U8              reduce using rule 62 (signo_comp -> DIFFERENT .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 104

<<<<<<< HEAD
    (64) signo_comp -> DIFFERENT .

    VARIABLE        reduce using rule 64 (signo_comp -> DIFFERENT .)
    U8              reduce using rule 64 (signo_comp -> DIFFERENT .)
=======
    (57) comparison -> U8 signo_comp . VARIABLE

    VARIABLE        shift and go to state 132
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 105

<<<<<<< HEAD
    (59) comparison -> U8 signo_comp . VARIABLE

    VARIABLE        shift and go to state 141
=======
    (65) for_loop -> FOR VARIABLE IN . f_comparacion LLAVEIZ rust LLAVEDER
    (63) f_comparacion -> . rango
    (64) f_comparacion -> . VARIABLE
    (87) rango -> . U8 DOT DOT U8

    VARIABLE        shift and go to state 133
    U8              shift and go to state 136
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    f_comparacion                  shift and go to state 134
    rango                          shift and go to state 135

state 106

<<<<<<< HEAD
    (67) for_loop -> FOR VARIABLE IN . f_comparacion LLAVEIZ rust LLAVEDER
    (65) f_comparacion -> . rango
    (66) f_comparacion -> . VARIABLE
    (89) rango -> . U8 DOT DOT U8

    VARIABLE        shift and go to state 142
    U8              shift and go to state 145

    f_comparacion                  shift and go to state 143
    rango                          shift and go to state 144
=======
    (124) vector_methods -> VARIABLE empty DOT . empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> VARIABLE empty DOT . empty POP_VEC LPAREN RPAREN
    (89) slice_get -> VARIABLE empty DOT . empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> VARIABLE empty DOT . empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (45) hashset_insert -> VARIABLE empty DOT . empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> VARIABLE empty DOT . empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (93) empty -> .

    PUSH_VEC        reduce using rule 93 (empty -> .)
    POP_VEC         reduce using rule 93 (empty -> .)
    GET_SLICE       reduce using rule 93 (empty -> .)
    CONTAINS_SLICE  reduce using rule 93 (empty -> .)
    INSERT_HASH     reduce using rule 93 (empty -> .)
    UNION_HASH      reduce using rule 93 (empty -> .)

    empty                          shift and go to state 137
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 107

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty DOT . empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE empty DOT . empty POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE empty DOT . empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE empty DOT . empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (47) hashset_insert -> VARIABLE empty DOT . empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE empty DOT . empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (95) empty -> .

    PUSH_VEC        reduce using rule 95 (empty -> .)
    POP_VEC         reduce using rule 95 (empty -> .)
    GET_SLICE       reduce using rule 95 (empty -> .)
    CONTAINS_SLICE  reduce using rule 95 (empty -> .)
    INSERT_HASH     reduce using rule 95 (empty -> .)
    UNION_HASH      reduce using rule 95 (empty -> .)

    empty                          shift and go to state 146
=======
    (20) other_operators -> VARIABLE oper_asig expresion .

    ENDLINE         reduce using rule 20 (other_operators -> VARIABLE oper_asig expresion .)

>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 108

<<<<<<< HEAD
    (22) other_operators -> VARIABLE oper_asig expresion_sintipo .

    ENDLINE         reduce using rule 22 (other_operators -> VARIABLE oper_asig expresion_sintipo .)
=======
    (72) sent_stru -> UNIT ENDLINE .

    $end            reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
    LLAVEDER        reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
    RETURN          reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
    STRING          reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
    U8              reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
    F32             reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
    VARIABLE        reduce using rule 72 (sent_stru -> UNIT ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 109

<<<<<<< HEAD
    (80) art_exp -> VARIABLE signo_arit VARIABLE .
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 80 (art_exp -> VARIABLE signo_arit VARIABLE .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 147
=======
    (73) sent_stru -> TUPLE LPAREN . argumentos_tipo RPAREN ENDLINE
    (70) argumentos_tipo -> . tipos
    (71) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141

    argumentos_tipo                shift and go to state 138
    tipos                          shift and go to state 139
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

state 110

<<<<<<< HEAD
    (78) op_mat -> VARIABLE signo_arit art_exp .

    ENDLINE         reduce using rule 78 (op_mat -> VARIABLE signo_arit art_exp .)
=======
    (74) sent_stru -> VARIABLE LLAVEIZ . argumentos_juntos LLAVEDER
    (67) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (68) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (69) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 142
    PUB             shift and go to state 144
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    argumentos_juntos              shift and go to state 143

state 111

<<<<<<< HEAD
    (82) art_exp -> VARIABLE signo_arit U8 .
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 82 (art_exp -> VARIABLE signo_arit U8 .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 148

state 112

    (74) sent_stru -> UNIT ENDLINE .

    $end            reduce using rule 74 (sent_stru -> UNIT ENDLINE .)
    LLAVEDER        reduce using rule 74 (sent_stru -> UNIT ENDLINE .)


state 113

    (75) sent_stru -> TUPLE LPAREN . argumentos_tipo RPAREN ENDLINE
    (72) argumentos_tipo -> . tipos
    (73) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    argumentos_tipo                shift and go to state 149
    tipos                          shift and go to state 150

state 114

    (76) sent_stru -> VARIABLE LLAVEIZ . argumentos_juntos LLAVEDER
    (69) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (71) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 153
    PUB             shift and go to state 155

    argumentos_juntos              shift and go to state 154

state 115

    (96) while_loop -> WHILE validations LLAVEIZ . rust LLAVEDER
=======
    (94) while_loop -> WHILE validations LLAVEIZ . rust LLAVEDER
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
<<<<<<< HEAD
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 156
=======
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38

    rust                           shift and go to state 145
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
<<<<<<< HEAD
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 116

    (103) empty_vector -> declare_vector VECT types_vector . empty_vec
    (104) data_vector -> declare_vector VECT types_vector . vector_content
    (117) empty_vec -> . ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
    (118) empty_vec -> . ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
    (119) empty_vec -> . ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
    (107) vector_content -> . VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE
    (108) vector_content -> . VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    ASIGNAR         shift and go to state 160
    VECTMACRO       shift and go to state 72
    VECT            shift and go to state 157
=======
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 103

    (108) empty_vector -> declare_vector types_vector empty_vec .

    $end            reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)
    LLAVEDER        reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)
    RETURN          reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)
    STRING          reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)
    U8              reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)
    F32             reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)
    VARIABLE        reduce using rule 108 (empty_vector -> declare_vector types_vector empty_vec .)


state 104

    (109) data_vector -> declare_vector types_vector vector_content .

    $end            reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)
    LLAVEDER        reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)
    RETURN          reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)
    STRING          reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)
    U8              reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)
    F32             reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)
    VARIABLE        reduce using rule 109 (data_vector -> declare_vector types_vector vector_content .)


state 105

    (121) empty_vec -> ASIGNAR . VECT PATHSEP NEWFUNC ENDLINE
    (122) empty_vec -> ASIGNAR . VECTMACRO BRACKETL BRACKETR ENDLINE
    (123) empty_vec -> ASIGNAR . VECT PATHSEP FROM LPAREN RPAREN ENDLINE
    (111) vector_content -> ASIGNAR . VECTMACRO vect_list ENDLINE
    (112) vector_content -> ASIGNAR . VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE

    VECT            shift and go to state 146
    VECTMACRO       shift and go to state 147


state 106

    (110) data_vector -> declare_vector ASIGNAR VECTMACRO . BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE

    BRACKETL        shift and go to state 148


state 107

    (117) types_vector -> VECT empty . LESST DATATYPES GREATER
    (118) types_vector -> VECT empty . LESST NUMDATATYPES GREATER

    LESST           shift and go to state 149


state 108

    (95) read_data -> IO empty PATHSEP . empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (93) empty -> .

    STDIN           reduce using rule 93 (empty -> .)

    empty                          shift and go to state 150

state 109

    (119) declare_vector -> LET MUT VARIABLE . ASIGNATION_TYPE
    (27) let_asig_sintipo -> LET MUT VARIABLE .
    (29) var_tipo -> VARIABLE .
    (30) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 27 (let_asig_sintipo -> LET MUT VARIABLE .)
    ASIGNATION_TYPE shift and go to state 151
    ASIGNAR         reduce using rule 27 (let_asig_sintipo -> LET MUT VARIABLE .)

  ! ASIGNAR         [ reduce using rule 29 (var_tipo -> VARIABLE .) ]


state 110

    (26) let_asig -> LET MUT var_tipo .

    ASIGNAR         reduce using rule 26 (let_asig -> LET MUT var_tipo .)


state 111

    (120) declare_vector -> LET VARIABLE ASIGNATION_TYPE .
    (30) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    ASIGNAR         reduce using rule 120 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    VECT            reduce using rule 120 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141

    tipos                          shift and go to state 152

state 112

    (102) no_return_function -> FUNCTION VARIABLE LPAREN . arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> FUNCTION VARIABLE LPAREN . RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> FUNCTION VARIABLE LPAREN . arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> FUNCTION VARIABLE LPAREN . RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> FUNCTION VARIABLE LPAREN . RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (104) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (105) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    RPAREN          shift and go to state 155
    VARIABLE        shift and go to state 153

    arguments                      shift and go to state 154

state 113

    (17) asignacion -> declarador ASIGNAR expresion ENDLINE .

    $end            reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    LLAVEDER        reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    RETURN          reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    STRING          reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    U8              reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    F32             reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    VARIABLE        reduce using rule 17 (asignacion -> declarador ASIGNAR expresion ENDLINE .)


state 114

    (47) conditional_asigned -> declarador ASIGNAR conditional ENDLINE .

    $end            reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    LLAVEDER        reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    RETURN          reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    STRING          reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    U8              reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    F32             reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    VARIABLE        reduce using rule 47 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)


state 115

    (19) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .

    $end            reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    LLAVEDER        reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    RETURN          reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    STRING          reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    U8              reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    F32             reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    VARIABLE        reduce using rule 19 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)


state 116

    (42) hashset -> HASHSET empty . PATHSEP empty NEWFUNC

    PATHSEP         shift and go to state 156
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty_vec                      shift and go to state 158
    vector_content                 shift and go to state 159

state 117

<<<<<<< HEAD
    (108) vector_content -> VECT empty . PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    PATHSEP         shift and go to state 161
=======
    (76) op_mat -> VARIABLE signo_arit . art_exp
    (78) art_exp -> VARIABLE signo_arit . VARIABLE
    (80) art_exp -> VARIABLE signo_arit . U8
    (78) art_exp -> . VARIABLE signo_arit VARIABLE
    (79) art_exp -> . U8 signo_arit VARIABLE
    (80) art_exp -> . VARIABLE signo_arit U8
    (81) art_exp -> . U8 signo_arit U8

    VARIABLE        shift and go to state 157
    U8              shift and go to state 159
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    art_exp                        shift and go to state 158

state 118

<<<<<<< HEAD
    (113) types_vector -> LESST . DATATYPES GREATER
    (114) types_vector -> LESST . NUMDATATYPES GREATER

    DATATYPES       shift and go to state 162
    NUMDATATYPES    shift and go to state 163
=======
    (82) signo_arit -> MAS .

    VARIABLE        reduce using rule 82 (signo_arit -> MAS .)
    U8              reduce using rule 82 (signo_arit -> MAS .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 119

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO . LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE

    LLAVEIZ         shift and go to state 164
=======
    (83) signo_arit -> MENOS .

    VARIABLE        reduce using rule 83 (signo_arit -> MENOS .)
    U8              reduce using rule 83 (signo_arit -> MENOS .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 120

<<<<<<< HEAD
    (107) vector_content -> VECTMACRO LLAVEIZ . vector_elements LLAVEDER ENDLINE
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    vector_elements                shift and go to state 165
    element                        shift and go to state 166
    expresion                      shift and go to state 167

state 121

    (83) art_exp -> U8 signo_arit U8 .
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 83 (art_exp -> U8 signo_arit U8 .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63
=======
    (84) signo_arit -> MULT .

    VARIABLE        reduce using rule 84 (signo_arit -> MULT .)
    U8              reduce using rule 84 (signo_arit -> MULT .)


state 121

    (85) signo_arit -> DIVISION .

    VARIABLE        reduce using rule 85 (signo_arit -> DIVISION .)
    U8              reduce using rule 85 (signo_arit -> DIVISION .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_arit                     shift and go to state 148

state 122

<<<<<<< HEAD
    (79) op_mat -> U8 signo_arit art_exp .

    ENDLINE         reduce using rule 79 (op_mat -> U8 signo_arit art_exp .)
=======
    (86) signo_arit -> MODULO .

    VARIABLE        reduce using rule 86 (signo_arit -> MODULO .)
    U8              reduce using rule 86 (signo_arit -> MODULO .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 123

<<<<<<< HEAD
    (81) art_exp -> U8 signo_arit VARIABLE .
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 81 (art_exp -> U8 signo_arit VARIABLE .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 147

state 124

    (97) read_data -> IO empty PATHSEP . empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    STDIN           reduce using rule 95 (empty -> .)
=======
    (77) op_mat -> U8 signo_arit . art_exp
    (79) art_exp -> U8 signo_arit . VARIABLE
    (81) art_exp -> U8 signo_arit . U8
    (78) art_exp -> . VARIABLE signo_arit VARIABLE
    (79) art_exp -> . U8 signo_arit VARIABLE
    (80) art_exp -> . VARIABLE signo_arit U8
    (81) art_exp -> . U8 signo_arit U8

    VARIABLE        shift and go to state 162
    U8              shift and go to state 160

    art_exp                        shift and go to state 161

state 124

    (88) slice_exp -> AND empty . VARIABLE empty BRACKETL rango BRACKETR

    VARIABLE        shift and go to state 163
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 168

state 125

<<<<<<< HEAD
    (99) function -> FUNCTION VARIABLE LPAREN . arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> FUNCTION VARIABLE LPAREN . RPAREN LLAVEIZ rust LLAVEDER
    (101) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (102) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    RPAREN          shift and go to state 171
    VARIABLE        shift and go to state 169
=======
    (36) prints -> PRINTS empty LPAREN print_expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 164
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    arguments                      shift and go to state 170

state 126

<<<<<<< HEAD
    (115) declare_vector -> LET MUT VARIABLE . ASIGNATION_TYPE
    (29) let_asig_sintipo -> LET MUT VARIABLE .
    (31) var_tipo -> VARIABLE .
    (32) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 29 (let_asig_sintipo -> LET MUT VARIABLE .)
    ASIGNATION_TYPE shift and go to state 172
    ASIGNAR         reduce using rule 29 (let_asig_sintipo -> LET MUT VARIABLE .)

  ! ASIGNAR         [ reduce using rule 31 (var_tipo -> VARIABLE .) ]
=======
    (37) print_expresion -> STRING .
    (38) print_expresion -> STRING . COMMA print_args

    RPAREN          reduce using rule 37 (print_expresion -> STRING .)
    COMMA           shift and go to state 165
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 127

<<<<<<< HEAD
    (28) let_asig -> LET MUT var_tipo .

    ASIGNAR         reduce using rule 28 (let_asig -> LET MUT var_tipo .)
=======
    (48) conditional -> if_type validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 166
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 128

<<<<<<< HEAD
    (116) declare_vector -> LET VARIABLE ASIGNATION_TYPE .
    (32) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    VECT            reduce using rule 116 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    ASIGNAR         reduce using rule 116 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    VECTMACRO       reduce using rule 116 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152
=======
    (53) validations -> comparison ANDAND validations .

    LLAVEIZ         reduce using rule 53 (validations -> comparison ANDAND validations .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    tipos                          shift and go to state 173

state 129

<<<<<<< HEAD
    (18) asignacion -> declarador ASIGNAR expresion ENDLINE .

    $end            reduce using rule 18 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    LLAVEDER        reduce using rule 18 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
=======
    (54) validations -> comparison OROR validations .

    LLAVEIZ         reduce using rule 54 (validations -> comparison OROR validations .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 130

<<<<<<< HEAD
    (49) conditional_asigned -> declarador ASIGNAR conditional ENDLINE .

    $end            reduce using rule 49 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    LLAVEDER        reduce using rule 49 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
=======
    (55) comparison -> VARIABLE signo_comp VARIABLE .

    ANDAND          reduce using rule 55 (comparison -> VARIABLE signo_comp VARIABLE .)
    OROR            reduce using rule 55 (comparison -> VARIABLE signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 55 (comparison -> VARIABLE signo_comp VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 131

<<<<<<< HEAD
    (21) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .

    $end            reduce using rule 21 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    LLAVEDER        reduce using rule 21 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
=======
    (56) comparison -> VARIABLE signo_comp U8 .

    ANDAND          reduce using rule 56 (comparison -> VARIABLE signo_comp U8 .)
    OROR            reduce using rule 56 (comparison -> VARIABLE signo_comp U8 .)
    LLAVEIZ         reduce using rule 56 (comparison -> VARIABLE signo_comp U8 .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 132

<<<<<<< HEAD
    (44) hashset -> HASHSET empty . PATHSEP empty NEWFUNC

    PATHSEP         shift and go to state 174
=======
    (57) comparison -> U8 signo_comp VARIABLE .

    ANDAND          reduce using rule 57 (comparison -> U8 signo_comp VARIABLE .)
    OROR            reduce using rule 57 (comparison -> U8 signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 57 (comparison -> U8 signo_comp VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 133

<<<<<<< HEAD
    (90) slice_exp -> AND empty . VARIABLE empty BRACKETL rango BRACKETR

    VARIABLE        shift and go to state 175
=======
    (64) f_comparacion -> VARIABLE .

    LLAVEIZ         reduce using rule 64 (f_comparacion -> VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 134

<<<<<<< HEAD
    (38) prints -> PRINTS empty LPAREN print_expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 176
=======
    (65) for_loop -> FOR VARIABLE IN f_comparacion . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 167
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 135

<<<<<<< HEAD
    (39) print_expresion -> STRING .
    (40) print_expresion -> STRING . COMMA print_args

    RPAREN          reduce using rule 39 (print_expresion -> STRING .)
    COMMA           shift and go to state 177
=======
    (63) f_comparacion -> rango .

    LLAVEIZ         reduce using rule 63 (f_comparacion -> rango .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 136

<<<<<<< HEAD
    (50) conditional -> if_type validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 178
=======
    (87) rango -> U8 . DOT DOT U8

    DOT             shift and go to state 168
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 137

<<<<<<< HEAD
    (55) validations -> comparison ANDAND validations .

    LLAVEIZ         reduce using rule 55 (validations -> comparison ANDAND validations .)
=======
    (124) vector_methods -> VARIABLE empty DOT empty . PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> VARIABLE empty DOT empty . POP_VEC LPAREN RPAREN
    (89) slice_get -> VARIABLE empty DOT empty . GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> VARIABLE empty DOT empty . CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (45) hashset_insert -> VARIABLE empty DOT empty . INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> VARIABLE empty DOT empty . UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    PUSH_VEC        shift and go to state 169
    POP_VEC         shift and go to state 170
    GET_SLICE       shift and go to state 171
    CONTAINS_SLICE  shift and go to state 172
    INSERT_HASH     shift and go to state 173
    UNION_HASH      shift and go to state 174
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 138

<<<<<<< HEAD
    (56) validations -> comparison OROR validations .

    LLAVEIZ         reduce using rule 56 (validations -> comparison OROR validations .)
=======
    (73) sent_stru -> TUPLE LPAREN argumentos_tipo . RPAREN ENDLINE

    RPAREN          shift and go to state 175
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 139

<<<<<<< HEAD
    (57) comparison -> VARIABLE signo_comp VARIABLE .

    ANDAND          reduce using rule 57 (comparison -> VARIABLE signo_comp VARIABLE .)
    OROR            reduce using rule 57 (comparison -> VARIABLE signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 57 (comparison -> VARIABLE signo_comp VARIABLE .)
=======
    (70) argumentos_tipo -> tipos .
    (71) argumentos_tipo -> tipos . COMMA argumentos_tipo

    RPAREN          reduce using rule 70 (argumentos_tipo -> tipos .)
    COMMA           shift and go to state 176
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 140

<<<<<<< HEAD
    (58) comparison -> VARIABLE signo_comp U8 .

    ANDAND          reduce using rule 58 (comparison -> VARIABLE signo_comp U8 .)
    OROR            reduce using rule 58 (comparison -> VARIABLE signo_comp U8 .)
    LLAVEIZ         reduce using rule 58 (comparison -> VARIABLE signo_comp U8 .)
=======
    (126) tipos -> DATATYPES .

    COMMA           reduce using rule 126 (tipos -> DATATYPES .)
    RPAREN          reduce using rule 126 (tipos -> DATATYPES .)
    ASIGNAR         reduce using rule 126 (tipos -> DATATYPES .)
    LLAVEDER        reduce using rule 126 (tipos -> DATATYPES .)
    LLAVEIZ         reduce using rule 126 (tipos -> DATATYPES .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 141

<<<<<<< HEAD
    (59) comparison -> U8 signo_comp VARIABLE .

    ANDAND          reduce using rule 59 (comparison -> U8 signo_comp VARIABLE .)
    OROR            reduce using rule 59 (comparison -> U8 signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 59 (comparison -> U8 signo_comp VARIABLE .)
=======
    (127) tipos -> NUMDATATYPES .

    COMMA           reduce using rule 127 (tipos -> NUMDATATYPES .)
    RPAREN          reduce using rule 127 (tipos -> NUMDATATYPES .)
    ASIGNAR         reduce using rule 127 (tipos -> NUMDATATYPES .)
    LLAVEDER        reduce using rule 127 (tipos -> NUMDATATYPES .)
    LLAVEIZ         reduce using rule 127 (tipos -> NUMDATATYPES .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 142

<<<<<<< HEAD
    (66) f_comparacion -> VARIABLE .

    LLAVEIZ         reduce using rule 66 (f_comparacion -> VARIABLE .)
=======
    (67) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos
    (68) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 177
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 143

<<<<<<< HEAD
    (67) for_loop -> FOR VARIABLE IN f_comparacion . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 179
=======
    (74) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos . LLAVEDER

    LLAVEDER        shift and go to state 178
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 144

<<<<<<< HEAD
    (65) f_comparacion -> rango .

    LLAVEIZ         reduce using rule 65 (f_comparacion -> rango .)
=======
    (69) argumentos_juntos -> PUB . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 179
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 145

<<<<<<< HEAD
    (89) rango -> U8 . DOT DOT U8

    DOT             shift and go to state 180
=======
    (94) while_loop -> WHILE validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 180
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 146

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty DOT empty . PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE empty DOT empty . POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE empty DOT empty . GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE empty DOT empty . CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (47) hashset_insert -> VARIABLE empty DOT empty . INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE empty DOT empty . UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    PUSH_VEC        shift and go to state 181
    POP_VEC         shift and go to state 182
    GET_SLICE       shift and go to state 183
    CONTAINS_SLICE  shift and go to state 184
    INSERT_HASH     shift and go to state 185
    UNION_HASH      shift and go to state 186
=======
    (121) empty_vec -> ASIGNAR VECT . PATHSEP NEWFUNC ENDLINE
    (123) empty_vec -> ASIGNAR VECT . PATHSEP FROM LPAREN RPAREN ENDLINE
    (112) vector_content -> ASIGNAR VECT . PATHSEP FROM LPAREN vect_list RPAREN ENDLINE

    PATHSEP         shift and go to state 181
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 147

<<<<<<< HEAD
    (80) art_exp -> VARIABLE signo_arit . VARIABLE
    (82) art_exp -> VARIABLE signo_arit . U8

    VARIABLE        shift and go to state 187
    U8              shift and go to state 188
=======
    (122) empty_vec -> ASIGNAR VECTMACRO . BRACKETL BRACKETR ENDLINE
    (111) vector_content -> ASIGNAR VECTMACRO . vect_list ENDLINE
    (113) vect_list -> . BRACKETL vector_elements BRACKETR

    BRACKETL        shift and go to state 182
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vect_list                      shift and go to state 183

state 148

<<<<<<< HEAD
    (81) art_exp -> U8 signo_arit . VARIABLE
    (83) art_exp -> U8 signo_arit . U8

    VARIABLE        shift and go to state 190
    U8              shift and go to state 189
=======
    (110) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL . element_type COMMA vector_elements BRACKETR ENDLINE
    (116) element_type -> . U8 empty NUMDATATYPES

    U8              shift and go to state 185
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    element_type                   shift and go to state 184

state 149

<<<<<<< HEAD
    (75) sent_stru -> TUPLE LPAREN argumentos_tipo . RPAREN ENDLINE

    RPAREN          shift and go to state 191
=======
    (117) types_vector -> VECT empty LESST . DATATYPES GREATER
    (118) types_vector -> VECT empty LESST . NUMDATATYPES GREATER

    DATATYPES       shift and go to state 186
    NUMDATATYPES    shift and go to state 187
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 150

<<<<<<< HEAD
    (72) argumentos_tipo -> tipos .
    (73) argumentos_tipo -> tipos . COMMA argumentos_tipo

    RPAREN          reduce using rule 72 (argumentos_tipo -> tipos .)
    COMMA           shift and go to state 192
=======
    (95) read_data -> IO empty PATHSEP empty . STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    STDIN           shift and go to state 188
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 151

<<<<<<< HEAD
    (122) tipos -> DATATYPES .

    COMMA           reduce using rule 122 (tipos -> DATATYPES .)
    RPAREN          reduce using rule 122 (tipos -> DATATYPES .)
    ASIGNAR         reduce using rule 122 (tipos -> DATATYPES .)
    LLAVEDER        reduce using rule 122 (tipos -> DATATYPES .)


state 152

    (123) tipos -> NUMDATATYPES .

    COMMA           reduce using rule 123 (tipos -> NUMDATATYPES .)
    RPAREN          reduce using rule 123 (tipos -> NUMDATATYPES .)
    ASIGNAR         reduce using rule 123 (tipos -> NUMDATATYPES .)
    LLAVEDER        reduce using rule 123 (tipos -> NUMDATATYPES .)
=======
    (119) declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .
    (30) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    ASIGNAR         reduce using rule 119 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    VECT            reduce using rule 119 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141

    tipos                          shift and go to state 152

state 152

    (30) var_tipo -> VARIABLE ASIGNATION_TYPE tipos .

    ASIGNAR         reduce using rule 30 (var_tipo -> VARIABLE ASIGNATION_TYPE tipos .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 153

<<<<<<< HEAD
    (69) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 193
=======
    (104) arguments -> VARIABLE . ASIGNATION_TYPE tipos
    (105) arguments -> VARIABLE . ASIGNATION_TYPE tipos COMMA arguments

    ASIGNATION_TYPE shift and go to state 189
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 154

<<<<<<< HEAD
    (76) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos . LLAVEDER

    LLAVEDER        shift and go to state 194
=======
    (102) no_return_function -> FUNCTION VARIABLE LPAREN arguments . RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> FUNCTION VARIABLE LPAREN arguments . RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER

    RPAREN          shift and go to state 190
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 155

<<<<<<< HEAD
    (71) argumentos_juntos -> PUB . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 195
=======
    (103) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN . LLAVEIZ rust LLAVEDER
    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN . ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> FUNCTION VARIABLE LPAREN RPAREN . ARROW tipos LLAVEIZ return LLAVEDER

    LLAVEIZ         shift and go to state 191
    ARROW           shift and go to state 192
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 156

<<<<<<< HEAD
    (96) while_loop -> WHILE validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 196
=======
    (42) hashset -> HASHSET empty PATHSEP . empty NEWFUNC
    (93) empty -> .

    NEWFUNC         reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 193

state 157

<<<<<<< HEAD
    (108) vector_content -> VECT . empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
    (95) empty -> .

    PATHSEP         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 117

state 158

    (103) empty_vector -> declare_vector VECT types_vector empty_vec .

    $end            reduce using rule 103 (empty_vector -> declare_vector VECT types_vector empty_vec .)
    LLAVEDER        reduce using rule 103 (empty_vector -> declare_vector VECT types_vector empty_vec .)
=======
    (78) art_exp -> VARIABLE signo_arit VARIABLE .
    (78) art_exp -> VARIABLE . signo_arit VARIABLE
    (80) art_exp -> VARIABLE . signo_arit U8
    (82) signo_arit -> . MAS
    (83) signo_arit -> . MENOS
    (84) signo_arit -> . MULT
    (85) signo_arit -> . DIVISION
    (86) signo_arit -> . MODULO

    ENDLINE         reduce using rule 78 (art_exp -> VARIABLE signo_arit VARIABLE .)
    MAS             shift and go to state 118
    MENOS           shift and go to state 119
    MULT            shift and go to state 120
    DIVISION        shift and go to state 121
    MODULO          shift and go to state 122

    signo_arit                     shift and go to state 194

state 158

    (76) op_mat -> VARIABLE signo_arit art_exp .

    ENDLINE         reduce using rule 76 (op_mat -> VARIABLE signo_arit art_exp .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 159

<<<<<<< HEAD
    (104) data_vector -> declare_vector VECT types_vector vector_content .

    $end            reduce using rule 104 (data_vector -> declare_vector VECT types_vector vector_content .)
    LLAVEDER        reduce using rule 104 (data_vector -> declare_vector VECT types_vector vector_content .)
=======
    (80) art_exp -> VARIABLE signo_arit U8 .
    (79) art_exp -> U8 . signo_arit VARIABLE
    (81) art_exp -> U8 . signo_arit U8
    (82) signo_arit -> . MAS
    (83) signo_arit -> . MENOS
    (84) signo_arit -> . MULT
    (85) signo_arit -> . DIVISION
    (86) signo_arit -> . MODULO

    ENDLINE         reduce using rule 80 (art_exp -> VARIABLE signo_arit U8 .)
    MAS             shift and go to state 118
    MENOS           shift and go to state 119
    MULT            shift and go to state 120
    DIVISION        shift and go to state 121
    MODULO          shift and go to state 122
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_arit                     shift and go to state 195

state 160

<<<<<<< HEAD
    (117) empty_vec -> ASIGNAR . VECT PATHSEP NEWFUNC ENDLINE
    (118) empty_vec -> ASIGNAR . VECTMACRO BRACKETL BRACKETR ENDLINE
    (119) empty_vec -> ASIGNAR . VECT PATHSEP FROM LPAREN RPAREN ENDLINE

    VECT            shift and go to state 197
    VECTMACRO       shift and go to state 198
=======
    (81) art_exp -> U8 signo_arit U8 .
    (79) art_exp -> U8 . signo_arit VARIABLE
    (81) art_exp -> U8 . signo_arit U8
    (82) signo_arit -> . MAS
    (83) signo_arit -> . MENOS
    (84) signo_arit -> . MULT
    (85) signo_arit -> . DIVISION
    (86) signo_arit -> . MODULO

    ENDLINE         reduce using rule 81 (art_exp -> U8 signo_arit U8 .)
    MAS             shift and go to state 118
    MENOS           shift and go to state 119
    MULT            shift and go to state 120
    DIVISION        shift and go to state 121
    MODULO          shift and go to state 122
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_arit                     shift and go to state 195

state 161

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP . empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
    (95) empty -> .

    FROM            reduce using rule 95 (empty -> .)
=======
    (77) op_mat -> U8 signo_arit art_exp .

    ENDLINE         reduce using rule 77 (op_mat -> U8 signo_arit art_exp .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 199

state 162

<<<<<<< HEAD
    (113) types_vector -> LESST DATATYPES . GREATER

    GREATER         shift and go to state 200
=======
    (79) art_exp -> U8 signo_arit VARIABLE .
    (78) art_exp -> VARIABLE . signo_arit VARIABLE
    (80) art_exp -> VARIABLE . signo_arit U8
    (82) signo_arit -> . MAS
    (83) signo_arit -> . MENOS
    (84) signo_arit -> . MULT
    (85) signo_arit -> . DIVISION
    (86) signo_arit -> . MODULO

    ENDLINE         reduce using rule 79 (art_exp -> U8 signo_arit VARIABLE .)
    MAS             shift and go to state 118
    MENOS           shift and go to state 119
    MULT            shift and go to state 120
    DIVISION        shift and go to state 121
    MODULO          shift and go to state 122
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    signo_arit                     shift and go to state 194

state 163

<<<<<<< HEAD
    (114) types_vector -> LESST NUMDATATYPES . GREATER

    GREATER         shift and go to state 201
=======
    (88) slice_exp -> AND empty VARIABLE . empty BRACKETL rango BRACKETR
    (93) empty -> .

    BRACKETL        reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 196

state 164

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ . element_type COMMA vector_elements LLAVEDER ENDLINE
    (112) element_type -> . U8 NUMDATATYPES

    U8              shift and go to state 203

    element_type                   shift and go to state 202

state 165

    (107) vector_content -> VECTMACRO LLAVEIZ vector_elements . LLAVEDER ENDLINE

    LLAVEDER        shift and go to state 204
=======
    (36) prints -> PRINTS empty LPAREN print_expresion RPAREN . empty ENDLINE
    (93) empty -> .

    ENDLINE         reduce using rule 93 (empty -> .)

    empty                          shift and go to state 197

state 165

    (38) print_expresion -> STRING COMMA . print_args
    (39) print_args -> . print_datos COMMA print_args
    (40) print_args -> . print_datos
    (41) print_datos -> . expresion
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    print_args                     shift and go to state 198
    print_datos                    shift and go to state 199
    expresion                      shift and go to state 200

state 166

<<<<<<< HEAD
    (109) vector_elements -> element .
    (110) vector_elements -> element . COMMA vector_elements

    LLAVEDER        reduce using rule 109 (vector_elements -> element .)
    COMMA           shift and go to state 205
=======
    (48) conditional -> if_type validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    ENDLINE         reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 48 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 167

<<<<<<< HEAD
    (111) element -> expresion .

    COMMA           reduce using rule 111 (element -> expresion .)
    LLAVEDER        reduce using rule 111 (element -> expresion .)
=======
    (65) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    rust                           shift and go to state 201
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 168

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty . STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    STDIN           shift and go to state 206
=======
    (87) rango -> U8 DOT . DOT U8

    DOT             shift and go to state 202
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 169

<<<<<<< HEAD
    (101) arguments -> VARIABLE . ASIGNATION_TYPE tipos
    (102) arguments -> VARIABLE . ASIGNATION_TYPE tipos COMMA arguments

    ASIGNATION_TYPE shift and go to state 207
=======
    (124) vector_methods -> VARIABLE empty DOT empty PUSH_VEC . LPAREN expresion RPAREN

    LPAREN          shift and go to state 203
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 170

<<<<<<< HEAD
    (99) function -> FUNCTION VARIABLE LPAREN arguments . RPAREN LLAVEIZ rust LLAVEDER

    RPAREN          shift and go to state 208
=======
    (125) vector_methods -> VARIABLE empty DOT empty POP_VEC . LPAREN RPAREN

    LPAREN          shift and go to state 204
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 171

<<<<<<< HEAD
    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 209


state 172

    (115) declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .
    (32) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    VECT            reduce using rule 115 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    ASIGNAR         reduce using rule 115 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    VECTMACRO       reduce using rule 115 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 173

state 173

    (32) var_tipo -> VARIABLE ASIGNATION_TYPE tipos .

    ASIGNAR         reduce using rule 32 (var_tipo -> VARIABLE ASIGNATION_TYPE tipos .)
=======
    (89) slice_get -> VARIABLE empty DOT empty GET_SLICE . empty LPAREN valor_get RPAREN
    (93) empty -> .

    LPAREN          reduce using rule 93 (empty -> .)

    empty                          shift and go to state 205

state 172

    (92) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE . empty LPAREN AND U8 RPAREN
    (93) empty -> .

    LPAREN          reduce using rule 93 (empty -> .)

    empty                          shift and go to state 206

state 173

    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH . empty LPAREN expresion RPAREN empty ENDLINE
    (93) empty -> .

    LPAREN          reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 207

state 174

<<<<<<< HEAD
    (44) hashset -> HASHSET empty PATHSEP . empty NEWFUNC
    (95) empty -> .

    NEWFUNC         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 210

state 175

    (90) slice_exp -> AND empty VARIABLE . empty BRACKETL rango BRACKETR
    (95) empty -> .

    BRACKETL        reduce using rule 95 (empty -> .)

    empty                          shift and go to state 211

state 176

    (38) prints -> PRINTS empty LPAREN print_expresion RPAREN . empty ENDLINE
    (95) empty -> .

    ENDLINE         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 212

state 177

    (40) print_expresion -> STRING COMMA . print_args
    (41) print_args -> . print_datos COMMA print_args
    (42) print_args -> . print_datos
    (43) print_datos -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    print_args                     shift and go to state 213
    print_datos                    shift and go to state 214
    expresion                      shift and go to state 215

state 178

    (50) conditional -> if_type validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 50 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    ENDLINE         reduce using rule 50 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 50 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH . empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (93) empty -> .

    LPAREN          reduce using rule 93 (empty -> .)

    empty                          shift and go to state 208

state 175

    (73) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN . ENDLINE

    ENDLINE         shift and go to state 209


state 176

    (71) argumentos_tipo -> tipos COMMA . argumentos_tipo
    (70) argumentos_tipo -> . tipos
    (71) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141

    tipos                          shift and go to state 139
    argumentos_tipo                shift and go to state 210

state 177

    (67) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos
    (68) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141

    tipos                          shift and go to state 211

state 178

    (74) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .

    $end            reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    LLAVEDER        reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    RETURN          reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    STRING          reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    U8              reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    F32             reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    VARIABLE        reduce using rule 74 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 179

<<<<<<< HEAD
    (67) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 216
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 180

    (89) rango -> U8 DOT . DOT U8

    DOT             shift and go to state 217
=======
    (69) argumentos_juntos -> PUB VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 212


state 180

    (94) while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 94 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 181

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC . LPAREN expresion RPAREN

    LPAREN          shift and go to state 218
=======
    (121) empty_vec -> ASIGNAR VECT PATHSEP . NEWFUNC ENDLINE
    (123) empty_vec -> ASIGNAR VECT PATHSEP . FROM LPAREN RPAREN ENDLINE
    (112) vector_content -> ASIGNAR VECT PATHSEP . FROM LPAREN vect_list RPAREN ENDLINE

    NEWFUNC         shift and go to state 213
    FROM            shift and go to state 214
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 182

<<<<<<< HEAD
    (121) vector_methods -> VARIABLE empty DOT empty POP_VEC . LPAREN RPAREN

    LPAREN          shift and go to state 219
=======
    (122) empty_vec -> ASIGNAR VECTMACRO BRACKETL . BRACKETR ENDLINE
    (113) vect_list -> BRACKETL . vector_elements BRACKETR
    (114) vector_elements -> . expresion
    (115) vector_elements -> . expresion COMMA vector_elements
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    BRACKETR        shift and go to state 215
    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vector_elements                shift and go to state 216
    expresion                      shift and go to state 217

state 183

<<<<<<< HEAD
    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE . empty LPAREN valor_get RPAREN
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)
=======
    (111) vector_content -> ASIGNAR VECTMACRO vect_list . ENDLINE

    ENDLINE         shift and go to state 218
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 220

state 184

<<<<<<< HEAD
    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE . empty LPAREN AND U8 RPAREN
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)
=======
    (110) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type . COMMA vector_elements BRACKETR ENDLINE

    COMMA           shift and go to state 219
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 221

state 185

<<<<<<< HEAD
    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH . empty LPAREN expresion RPAREN empty ENDLINE
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 222

state 186

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH . empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 223

state 187

    (80) art_exp -> VARIABLE signo_arit VARIABLE .

    ENDLINE         reduce using rule 80 (art_exp -> VARIABLE signo_arit VARIABLE .)
=======
    (116) element_type -> U8 . empty NUMDATATYPES
    (93) empty -> .

    NUMDATATYPES    reduce using rule 93 (empty -> .)

    empty                          shift and go to state 220

state 186

    (117) types_vector -> VECT empty LESST DATATYPES . GREATER

    GREATER         shift and go to state 221


state 187

    (118) types_vector -> VECT empty LESST NUMDATATYPES . GREATER

    GREATER         shift and go to state 222
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 188

<<<<<<< HEAD
    (82) art_exp -> VARIABLE signo_arit U8 .

    ENDLINE         reduce using rule 82 (art_exp -> VARIABLE signo_arit U8 .)
=======
    (95) read_data -> IO empty PATHSEP empty STDIN . LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 223
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 189

<<<<<<< HEAD
    (83) art_exp -> U8 signo_arit U8 .

    ENDLINE         reduce using rule 83 (art_exp -> U8 signo_arit U8 .)
=======
    (104) arguments -> VARIABLE ASIGNATION_TYPE . tipos
    (105) arguments -> VARIABLE ASIGNATION_TYPE . tipos COMMA arguments
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    tipos                          shift and go to state 224

state 190

<<<<<<< HEAD
    (81) art_exp -> U8 signo_arit VARIABLE .

    ENDLINE         reduce using rule 81 (art_exp -> U8 signo_arit VARIABLE .)
=======
    (102) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN . LLAVEIZ rust LLAVEDER
    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN . ARROW tipos LLAVEIZ rust return LLAVEDER

    LLAVEIZ         shift and go to state 225
    ARROW           shift and go to state 226
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 191

<<<<<<< HEAD
    (75) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN . ENDLINE

    ENDLINE         shift and go to state 224


state 192

    (73) argumentos_tipo -> tipos COMMA . argumentos_tipo
    (72) argumentos_tipo -> . tipos
    (73) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 150
    argumentos_tipo                shift and go to state 225

state 193

    (69) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos
    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152
=======
    (103) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38

    rust                           shift and go to state 227
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 192

    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW . tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW . tipos LLAVEIZ return LLAVEDER
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141

    tipos                          shift and go to state 228

state 193

    (42) hashset -> HASHSET empty PATHSEP empty . NEWFUNC

    NEWFUNC         shift and go to state 229
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    tipos                          shift and go to state 226

state 194

<<<<<<< HEAD
    (76) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .

    $end            reduce using rule 76 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    LLAVEDER        reduce using rule 76 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
=======
    (78) art_exp -> VARIABLE signo_arit . VARIABLE
    (80) art_exp -> VARIABLE signo_arit . U8

    VARIABLE        shift and go to state 230
    U8              shift and go to state 231
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 195

<<<<<<< HEAD
    (71) argumentos_juntos -> PUB VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 227
=======
    (79) art_exp -> U8 signo_arit . VARIABLE
    (81) art_exp -> U8 signo_arit . U8

    VARIABLE        shift and go to state 233
    U8              shift and go to state 232
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 196

<<<<<<< HEAD
    (96) while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 96 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 96 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
=======
    (88) slice_exp -> AND empty VARIABLE empty . BRACKETL rango BRACKETR

    BRACKETL        shift and go to state 234
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 197

<<<<<<< HEAD
    (117) empty_vec -> ASIGNAR VECT . PATHSEP NEWFUNC ENDLINE
    (119) empty_vec -> ASIGNAR VECT . PATHSEP FROM LPAREN RPAREN ENDLINE

    PATHSEP         shift and go to state 228
=======
    (36) prints -> PRINTS empty LPAREN print_expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 235
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 198

<<<<<<< HEAD
    (118) empty_vec -> ASIGNAR VECTMACRO . BRACKETL BRACKETR ENDLINE

    BRACKETL        shift and go to state 229
=======
    (38) print_expresion -> STRING COMMA print_args .

    RPAREN          reduce using rule 38 (print_expresion -> STRING COMMA print_args .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 199

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty . FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    FROM            shift and go to state 230
=======
    (39) print_args -> print_datos . COMMA print_args
    (40) print_args -> print_datos .

    COMMA           shift and go to state 236
    RPAREN          reduce using rule 40 (print_args -> print_datos .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 200

<<<<<<< HEAD
    (113) types_vector -> LESST DATATYPES GREATER .

    ASIGNAR         reduce using rule 113 (types_vector -> LESST DATATYPES GREATER .)
    VECTMACRO       reduce using rule 113 (types_vector -> LESST DATATYPES GREATER .)
    VECT            reduce using rule 113 (types_vector -> LESST DATATYPES GREATER .)
=======
    (41) print_datos -> expresion .

    COMMA           reduce using rule 41 (print_datos -> expresion .)
    RPAREN          reduce using rule 41 (print_datos -> expresion .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 201

<<<<<<< HEAD
    (114) types_vector -> LESST NUMDATATYPES GREATER .

    ASIGNAR         reduce using rule 114 (types_vector -> LESST NUMDATATYPES GREATER .)
    VECTMACRO       reduce using rule 114 (types_vector -> LESST NUMDATATYPES GREATER .)
    VECT            reduce using rule 114 (types_vector -> LESST NUMDATATYPES GREATER .)
=======
    (65) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 237
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 202

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type . COMMA vector_elements LLAVEDER ENDLINE

    COMMA           shift and go to state 231
=======
    (87) rango -> U8 DOT DOT . U8

    U8              shift and go to state 238
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 203

<<<<<<< HEAD
    (112) element_type -> U8 . NUMDATATYPES

    NUMDATATYPES    shift and go to state 232


state 204

    (107) vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER . ENDLINE

    ENDLINE         shift and go to state 233
=======
    (124) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN . expresion RPAREN
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74

    expresion                      shift and go to state 239

state 204

    (125) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN . RPAREN

    RPAREN          shift and go to state 240
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 205

<<<<<<< HEAD
    (110) vector_elements -> element COMMA . vector_elements
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    element                        shift and go to state 166
    vector_elements                shift and go to state 234
    expresion                      shift and go to state 167

state 206

    (97) read_data -> IO empty PATHSEP empty STDIN . LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 235
=======
    (89) slice_get -> VARIABLE empty DOT empty GET_SLICE empty . LPAREN valor_get RPAREN

    LPAREN          shift and go to state 241


state 206

    (92) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty . LPAREN AND U8 RPAREN

    LPAREN          shift and go to state 242
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 207

<<<<<<< HEAD
    (101) arguments -> VARIABLE ASIGNATION_TYPE . tipos
    (102) arguments -> VARIABLE ASIGNATION_TYPE . tipos COMMA arguments
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 236

state 208

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 237
=======
    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty . LPAREN expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 243


state 208

    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty . LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    LPAREN          shift and go to state 244
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 209

<<<<<<< HEAD
    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 238
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 210

    (44) hashset -> HASHSET empty PATHSEP empty . NEWFUNC

    NEWFUNC         shift and go to state 239
=======
    (73) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .

    $end            reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    RETURN          reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    STRING          reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    U8              reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    F32             reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    VARIABLE        reduce using rule 73 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)


state 210

    (71) argumentos_tipo -> tipos COMMA argumentos_tipo .

    RPAREN          reduce using rule 71 (argumentos_tipo -> tipos COMMA argumentos_tipo .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 211

<<<<<<< HEAD
    (90) slice_exp -> AND empty VARIABLE empty . BRACKETL rango BRACKETR

    BRACKETL        shift and go to state 240
=======
    (67) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .
    (68) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    LLAVEDER        reduce using rule 67 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 245
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 212

<<<<<<< HEAD
    (38) prints -> PRINTS empty LPAREN print_expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 241
=======
    (69) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    tipos                          shift and go to state 246

state 213

<<<<<<< HEAD
    (40) print_expresion -> STRING COMMA print_args .

    RPAREN          reduce using rule 40 (print_expresion -> STRING COMMA print_args .)
=======
    (121) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC . ENDLINE

    ENDLINE         shift and go to state 247
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 214

<<<<<<< HEAD
    (41) print_args -> print_datos . COMMA print_args
    (42) print_args -> print_datos .

    COMMA           shift and go to state 242
    RPAREN          reduce using rule 42 (print_args -> print_datos .)
=======
    (123) empty_vec -> ASIGNAR VECT PATHSEP FROM . LPAREN RPAREN ENDLINE
    (112) vector_content -> ASIGNAR VECT PATHSEP FROM . LPAREN vect_list RPAREN ENDLINE

    LPAREN          shift and go to state 248
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 215

<<<<<<< HEAD
    (43) print_datos -> expresion .

    COMMA           reduce using rule 43 (print_datos -> expresion .)
    RPAREN          reduce using rule 43 (print_datos -> expresion .)
=======
    (122) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR . ENDLINE

    ENDLINE         shift and go to state 249
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 216

<<<<<<< HEAD
    (67) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 243
=======
    (113) vect_list -> BRACKETL vector_elements . BRACKETR

    BRACKETR        shift and go to state 250
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 217

<<<<<<< HEAD
    (89) rango -> U8 DOT DOT . U8

    U8              shift and go to state 244
=======
    (114) vector_elements -> expresion .
    (115) vector_elements -> expresion . COMMA vector_elements

    BRACKETR        reduce using rule 114 (vector_elements -> expresion .)
    COMMA           shift and go to state 251
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 218

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN . expresion RPAREN
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85
=======
    (111) vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .

    $end            reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    LLAVEDER        reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    RETURN          reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    STRING          reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    U8              reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    F32             reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    VARIABLE        reduce using rule 111 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    expresion                      shift and go to state 245

state 219

<<<<<<< HEAD
    (121) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN . RPAREN

    RPAREN          shift and go to state 246
=======
    (110) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA . vector_elements BRACKETR ENDLINE
    (114) vector_elements -> . expresion
    (115) vector_elements -> . expresion COMMA vector_elements
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vector_elements                shift and go to state 252
    expresion                      shift and go to state 217

state 220

<<<<<<< HEAD
    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty . LPAREN valor_get RPAREN

    LPAREN          shift and go to state 247
=======
    (116) element_type -> U8 empty . NUMDATATYPES

    NUMDATATYPES    shift and go to state 253
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 221

<<<<<<< HEAD
    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty . LPAREN AND U8 RPAREN

    LPAREN          shift and go to state 248
=======
    (117) types_vector -> VECT empty LESST DATATYPES GREATER .

    ASIGNAR         reduce using rule 117 (types_vector -> VECT empty LESST DATATYPES GREATER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 222

<<<<<<< HEAD
    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty . LPAREN expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 249
=======
    (118) types_vector -> VECT empty LESST NUMDATATYPES GREATER .

    ASIGNAR         reduce using rule 118 (types_vector -> VECT empty LESST NUMDATATYPES GREATER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 223

<<<<<<< HEAD
    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty . LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    LPAREN          shift and go to state 250
=======
    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN . RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    RPAREN          shift and go to state 254
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 224

<<<<<<< HEAD
    (75) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .

    $end            reduce using rule 75 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 75 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
=======
    (104) arguments -> VARIABLE ASIGNATION_TYPE tipos .
    (105) arguments -> VARIABLE ASIGNATION_TYPE tipos . COMMA arguments

    RPAREN          reduce using rule 104 (arguments -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 255
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 225

<<<<<<< HEAD
    (73) argumentos_tipo -> tipos COMMA argumentos_tipo .

    RPAREN          reduce using rule 73 (argumentos_tipo -> tipos COMMA argumentos_tipo .)
=======
    (102) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    rust                           shift and go to state 256
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 226

<<<<<<< HEAD
    (69) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .
    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    LLAVEDER        reduce using rule 69 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 251
=======
    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW . tipos LLAVEIZ rust return LLAVEDER
    (126) tipos -> . DATATYPES
    (127) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 140
    NUMDATATYPES    shift and go to state 141
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    tipos                          shift and go to state 257

state 227

<<<<<<< HEAD
    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 252

state 228

    (117) empty_vec -> ASIGNAR VECT PATHSEP . NEWFUNC ENDLINE
    (119) empty_vec -> ASIGNAR VECT PATHSEP . FROM LPAREN RPAREN ENDLINE

    NEWFUNC         shift and go to state 253
    FROM            shift and go to state 254
=======
    (103) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 258


state 228

    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos . LLAVEIZ rust return LLAVEDER
    (101) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos . LLAVEIZ return LLAVEDER

    LLAVEIZ         shift and go to state 259
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 229

<<<<<<< HEAD
    (118) empty_vec -> ASIGNAR VECTMACRO BRACKETL . BRACKETR ENDLINE

    BRACKETR        shift and go to state 255
=======
    (42) hashset -> HASHSET empty PATHSEP empty NEWFUNC .

    ENDLINE         reduce using rule 42 (hashset -> HASHSET empty PATHSEP empty NEWFUNC .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 230

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty FROM . LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    LPAREN          shift and go to state 256
=======
    (78) art_exp -> VARIABLE signo_arit VARIABLE .

    ENDLINE         reduce using rule 78 (art_exp -> VARIABLE signo_arit VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 231

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA . vector_elements LLAVEDER ENDLINE
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85
=======
    (80) art_exp -> VARIABLE signo_arit U8 .

    ENDLINE         reduce using rule 80 (art_exp -> VARIABLE signo_arit U8 .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vector_elements                shift and go to state 257
    element                        shift and go to state 166
    expresion                      shift and go to state 167

state 232

<<<<<<< HEAD
    (112) element_type -> U8 NUMDATATYPES .

    COMMA           reduce using rule 112 (element_type -> U8 NUMDATATYPES .)
=======
    (81) art_exp -> U8 signo_arit U8 .

    ENDLINE         reduce using rule 81 (art_exp -> U8 signo_arit U8 .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 233

<<<<<<< HEAD
    (107) vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE .

    $end            reduce using rule 107 (vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE .)
    LLAVEDER        reduce using rule 107 (vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE .)
=======
    (79) art_exp -> U8 signo_arit VARIABLE .

    ENDLINE         reduce using rule 79 (art_exp -> U8 signo_arit VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 234

<<<<<<< HEAD
    (110) vector_elements -> element COMMA vector_elements .

    LLAVEDER        reduce using rule 110 (vector_elements -> element COMMA vector_elements .)


state 235

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN . RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    RPAREN          shift and go to state 258
=======
    (88) slice_exp -> AND empty VARIABLE empty BRACKETL . rango BRACKETR
    (87) rango -> . U8 DOT DOT U8

    U8              shift and go to state 136

    rango                          shift and go to state 260

state 235

    (36) prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .

    $end            reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    RETURN          reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    STRING          reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    U8              reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    F32             reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    VARIABLE        reduce using rule 36 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 236

<<<<<<< HEAD
    (101) arguments -> VARIABLE ASIGNATION_TYPE tipos .
    (102) arguments -> VARIABLE ASIGNATION_TYPE tipos . COMMA arguments

    RPAREN          reduce using rule 101 (arguments -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 259


state 237

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 260
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 238

    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 261
=======
    (39) print_args -> print_datos COMMA . print_args
    (39) print_args -> . print_datos COMMA print_args
    (40) print_args -> . print_datos
    (41) print_datos -> . expresion
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74

    print_datos                    shift and go to state 199
    print_args                     shift and go to state 261
    expresion                      shift and go to state 200

state 237

    (65) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 65 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)


state 238

    (87) rango -> U8 DOT DOT U8 .

    LLAVEIZ         reduce using rule 87 (rango -> U8 DOT DOT U8 .)
    BRACKETR        reduce using rule 87 (rango -> U8 DOT DOT U8 .)
    RPAREN          reduce using rule 87 (rango -> U8 DOT DOT U8 .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 239

<<<<<<< HEAD
    (44) hashset -> HASHSET empty PATHSEP empty NEWFUNC .

    ENDLINE         reduce using rule 44 (hashset -> HASHSET empty PATHSEP empty NEWFUNC .)
=======
    (124) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion . RPAREN

    RPAREN          shift and go to state 262
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 240

<<<<<<< HEAD
    (90) slice_exp -> AND empty VARIABLE empty BRACKETL . rango BRACKETR
    (89) rango -> . U8 DOT DOT U8

    U8              shift and go to state 145
=======
    (125) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .

    $end            reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    LLAVEDER        reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    RETURN          reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    STRING          reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    U8              reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    F32             reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    VARIABLE        reduce using rule 125 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    rango                          shift and go to state 262

state 241

<<<<<<< HEAD
    (38) prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .

    $end            reduce using rule 38 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 38 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
=======
    (89) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN . valor_get RPAREN
    (90) valor_get -> . rango
    (91) valor_get -> . U8
    (87) rango -> . U8 DOT DOT U8

    U8              shift and go to state 265
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    valor_get                      shift and go to state 263
    rango                          shift and go to state 264

state 242

<<<<<<< HEAD
    (41) print_args -> print_datos COMMA . print_args
    (41) print_args -> . print_datos COMMA print_args
    (42) print_args -> . print_datos
    (43) print_datos -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85
=======
    (92) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN . AND U8 RPAREN

    AND             shift and go to state 266
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    print_datos                    shift and go to state 214
    print_args                     shift and go to state 263
    expresion                      shift and go to state 215

state 243

<<<<<<< HEAD
    (67) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 67 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 67 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
=======
    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN . expresion RPAREN empty ENDLINE
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    expresion                      shift and go to state 267

state 244

<<<<<<< HEAD
    (89) rango -> U8 DOT DOT U8 .

    LLAVEIZ         reduce using rule 89 (rango -> U8 DOT DOT U8 .)
    BRACKETR        reduce using rule 89 (rango -> U8 DOT DOT U8 .)
    RPAREN          reduce using rule 89 (rango -> U8 DOT DOT U8 .)
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN . AND empty VARIABLE RPAREN empty ENDLINE

    AND             shift and go to state 268
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 245

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion . RPAREN

    RPAREN          shift and go to state 264


state 246

    (121) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .

    $end            reduce using rule 121 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    LLAVEDER        reduce using rule 121 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
=======
    (68) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (67) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (68) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (69) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 142
    PUB             shift and go to state 144

    argumentos_juntos              shift and go to state 269

state 246

    (69) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    COMMA           shift and go to state 270
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 247

<<<<<<< HEAD
    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN . valor_get RPAREN
    (92) valor_get -> . rango
    (93) valor_get -> . U8
    (89) rango -> . U8 DOT DOT U8

    U8              shift and go to state 267
=======
    (121) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .

    $end            reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    LLAVEDER        reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    RETURN          reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    STRING          reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    U8              reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    F32             reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    VARIABLE        reduce using rule 121 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    valor_get                      shift and go to state 265
    rango                          shift and go to state 266

state 248

<<<<<<< HEAD
    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN . AND U8 RPAREN

    AND             shift and go to state 268
=======
    (123) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN . RPAREN ENDLINE
    (112) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN . vect_list RPAREN ENDLINE
    (113) vect_list -> . BRACKETL vector_elements BRACKETR

    RPAREN          shift and go to state 271
    BRACKETL        shift and go to state 273
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vect_list                      shift and go to state 272

state 249

<<<<<<< HEAD
    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN . expresion RPAREN empty ENDLINE
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    expresion                      shift and go to state 269

state 250

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN . AND empty VARIABLE RPAREN empty ENDLINE

    AND             shift and go to state 270
=======
    (122) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .

    $end            reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    LLAVEDER        reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    RETURN          reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    STRING          reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    U8              reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    F32             reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    VARIABLE        reduce using rule 122 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)


state 250

    (113) vect_list -> BRACKETL vector_elements BRACKETR .

    ENDLINE         reduce using rule 113 (vect_list -> BRACKETL vector_elements BRACKETR .)
    RPAREN          reduce using rule 113 (vect_list -> BRACKETL vector_elements BRACKETR .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 251

<<<<<<< HEAD
    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (69) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (71) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 153
    PUB             shift and go to state 155

    argumentos_juntos              shift and go to state 271

state 252

    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    COMMA           shift and go to state 272
=======
    (115) vector_elements -> expresion COMMA . vector_elements
    (114) vector_elements -> . expresion
    (115) vector_elements -> . expresion COMMA vector_elements
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74

    expresion                      shift and go to state 217
    vector_elements                shift and go to state 274

state 252

    (110) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements . BRACKETR ENDLINE

    BRACKETR        shift and go to state 275
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 253

<<<<<<< HEAD
    (117) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC . ENDLINE

    ENDLINE         shift and go to state 273
=======
    (116) element_type -> U8 empty NUMDATATYPES .

    COMMA           reduce using rule 116 (element_type -> U8 empty NUMDATATYPES .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 254

<<<<<<< HEAD
    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM . LPAREN RPAREN ENDLINE

    LPAREN          shift and go to state 274
=======
    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN . empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (93) empty -> .

    DOT             reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 276

state 255

<<<<<<< HEAD
    (118) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR . ENDLINE

    ENDLINE         shift and go to state 275
=======
    (105) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA . arguments
    (104) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (105) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    VARIABLE        shift and go to state 153
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    arguments                      shift and go to state 277

state 256

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN . LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    LLAVEIZ         shift and go to state 276
=======
    (102) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 278
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 257

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements . LLAVEDER ENDLINE

    LLAVEDER        shift and go to state 277
=======
    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos . LLAVEIZ rust return LLAVEDER

    LLAVEIZ         shift and go to state 279
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 258

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN . empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    DOT             reduce using rule 95 (empty -> .)
=======
    (103) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 103 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 278

state 259

<<<<<<< HEAD
    (102) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA . arguments
    (101) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (102) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    VARIABLE        shift and go to state 169

    arguments                      shift and go to state 279

state 260

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 280
=======
    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ . rust return LLAVEDER
    (101) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ . return LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (106) return -> . RETURN expresion ENDLINE
    (107) return -> . expresion
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    RETURN          shift and go to state 283
    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 280
    IO              shift and go to state 30
    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38

    rust                           shift and go to state 281
    return                         shift and go to state 282
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    expresion                      shift and go to state 284
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 260

    (88) slice_exp -> AND empty VARIABLE empty BRACKETL rango . BRACKETR

    BRACKETR        shift and go to state 285
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 261

<<<<<<< HEAD
    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 100 (empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 100 (empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
=======
    (39) print_args -> print_datos COMMA print_args .

    RPAREN          reduce using rule 39 (print_args -> print_datos COMMA print_args .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 262

<<<<<<< HEAD
    (90) slice_exp -> AND empty VARIABLE empty BRACKETL rango . BRACKETR

    BRACKETR        shift and go to state 281
=======
    (124) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .

    $end            reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    LLAVEDER        reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    RETURN          reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    STRING          reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    U8              reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    F32             reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 124 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 263

<<<<<<< HEAD
    (41) print_args -> print_datos COMMA print_args .

    RPAREN          reduce using rule 41 (print_args -> print_datos COMMA print_args .)
=======
    (89) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get . RPAREN

    RPAREN          shift and go to state 286
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 264

<<<<<<< HEAD
    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .

    $end            reduce using rule 120 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    LLAVEDER        reduce using rule 120 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
=======
    (90) valor_get -> rango .

    RPAREN          reduce using rule 90 (valor_get -> rango .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 265

<<<<<<< HEAD
    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get . RPAREN

    RPAREN          shift and go to state 282
=======
    (91) valor_get -> U8 .
    (87) rango -> U8 . DOT DOT U8

    RPAREN          reduce using rule 91 (valor_get -> U8 .)
    DOT             shift and go to state 168
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 266

<<<<<<< HEAD
    (92) valor_get -> rango .

    RPAREN          reduce using rule 92 (valor_get -> rango .)
=======
    (92) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND . U8 RPAREN

    U8              shift and go to state 287
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 267

<<<<<<< HEAD
    (93) valor_get -> U8 .
    (89) rango -> U8 . DOT DOT U8

    RPAREN          reduce using rule 93 (valor_get -> U8 .)
    DOT             shift and go to state 180
=======
    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 288
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 268

<<<<<<< HEAD
    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND . U8 RPAREN

    U8              shift and go to state 283


state 269

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 284
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND . empty VARIABLE RPAREN empty ENDLINE
    (93) empty -> .

    VARIABLE        reduce using rule 93 (empty -> .)

    empty                          shift and go to state 289

state 269

    (68) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 68 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 270

<<<<<<< HEAD
    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND . empty VARIABLE RPAREN empty ENDLINE
    (95) empty -> .

    VARIABLE        reduce using rule 95 (empty -> .)

    empty                          shift and go to state 285

state 271

    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 70 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)
=======
    (69) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (67) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (68) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (69) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 142
    PUB             shift and go to state 144

    argumentos_juntos              shift and go to state 290

state 271

    (123) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN . ENDLINE

    ENDLINE         shift and go to state 291
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 272

<<<<<<< HEAD
    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (69) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (71) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 153
    PUB             shift and go to state 155

    argumentos_juntos              shift and go to state 286

state 273

    (117) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .

    $end            reduce using rule 117 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    LLAVEDER        reduce using rule 117 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
=======
    (112) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list . RPAREN ENDLINE

    RPAREN          shift and go to state 292


state 273

    (113) vect_list -> BRACKETL . vector_elements BRACKETR
    (114) vector_elements -> . expresion
    (115) vector_elements -> . expresion COMMA vector_elements
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vector_elements                shift and go to state 216
    expresion                      shift and go to state 217

state 274

<<<<<<< HEAD
    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN . RPAREN ENDLINE

    RPAREN          shift and go to state 287
=======
    (115) vector_elements -> expresion COMMA vector_elements .

    BRACKETR        reduce using rule 115 (vector_elements -> expresion COMMA vector_elements .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 275

<<<<<<< HEAD
    (118) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .

    $end            reduce using rule 118 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    LLAVEDER        reduce using rule 118 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
=======
    (110) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR . ENDLINE

    ENDLINE         shift and go to state 293
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 276

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ . vector_elements LLAVEDER RPAREN ENDLINE
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85
=======
    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty . DOT empty READ LPAREN reference RPAREN ENDLINE

    DOT             shift and go to state 294
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    vector_elements                shift and go to state 288
    element                        shift and go to state 166
    expresion                      shift and go to state 167

state 277

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER . ENDLINE

    ENDLINE         shift and go to state 289
=======
    (105) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .

    RPAREN          reduce using rule 105 (arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 278

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty . DOT empty READ LPAREN reference RPAREN ENDLINE

    DOT             shift and go to state 290
=======
    (102) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 102 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 279

<<<<<<< HEAD
    (102) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .

    RPAREN          reduce using rule 102 (arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .)
=======
    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ . rust return LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (18) asignacion -> . other_operators ENDLINE
    (19) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (36) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (43) hashfunc -> . hashset_insert
    (44) hashfunc -> . hashset_union
    (48) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (47) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (65) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (66) struct_s -> . STRUCT sent_stru
    (94) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (108) empty_vector -> . declare_vector types_vector empty_vec
    (124) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (109) data_vector -> . declare_vector types_vector vector_content
    (110) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (89) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (95) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (97) function -> . no_return_function
    (98) function -> . return_function
    (21) declarador -> . VARIABLE
    (22) declarador -> . let_asig
    (20) other_operators -> . VARIABLE oper_asig expresion
    (23) declarador_sintipo -> . VARIABLE
    (24) declarador_sintipo -> . let_asig_sintipo
    (45) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (49) if_type -> . IF
    (50) if_type -> . ELSE IF
    (51) if_type -> . ELSE
    (119) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (120) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (102) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (103) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (99) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (100) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (101) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (25) let_asig -> . LET var_tipo
    (26) let_asig -> . LET MUT var_tipo
    (27) let_asig_sintipo -> . LET MUT VARIABLE
    (28) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 21
    FOR             shift and go to state 25
    STRUCT          shift and go to state 27
    WHILE           shift and go to state 28
    VARIABLE        shift and go to state 26
    IO              shift and go to state 30
    IF              shift and go to state 35
    ELSE            shift and go to state 36
    LET             shift and go to state 37
    FUNCTION        shift and go to state 38
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    rust                           shift and go to state 295
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    declarador_sintipo             shift and go to state 20
    hashset_insert                 shift and go to state 22
    hashset_union                  shift and go to state 23
    if_type                        shift and go to state 24
    declare_vector                 shift and go to state 29
    no_return_function             shift and go to state 31
    return_function                shift and go to state 32
    let_asig                       shift and go to state 33
    let_asig_sintipo               shift and go to state 34

state 280

<<<<<<< HEAD
    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 99 (function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 99 (function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
=======
    (124) vector_methods -> VARIABLE . empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (125) vector_methods -> VARIABLE . empty DOT empty POP_VEC LPAREN RPAREN
    (89) slice_get -> VARIABLE . empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (92) slice_contains -> VARIABLE . empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (131) expresion -> VARIABLE .
    (21) declarador -> VARIABLE .
    (20) other_operators -> VARIABLE . oper_asig expresion
    (23) declarador_sintipo -> VARIABLE .
    (45) hashset_insert -> VARIABLE . empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (46) hashset_union -> VARIABLE . empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (93) empty -> .
    (31) oper_asig -> . ASIGNAR
    (32) oper_asig -> . PLUSEQ
    (33) oper_asig -> . MINUSEQ
    (34) oper_asig -> . STAREQ
    (35) oper_asig -> . SLASHEQ

  ! reduce/reduce conflict for ASIGNAR resolved using rule 21 (declarador -> VARIABLE .)
  ! shift/reduce conflict for ASIGNAR resolved as shift
    LLAVEDER        reduce using rule 131 (expresion -> VARIABLE .)
    DOT             reduce using rule 93 (empty -> .)
    ASIGNAR         shift and go to state 50
    PLUSEQ          shift and go to state 51
    MINUSEQ         shift and go to state 52
    STAREQ          shift and go to state 53
    SLASHEQ         shift and go to state 54

  ! ASIGNAR         [ reduce using rule 21 (declarador -> VARIABLE .) ]
  ! ASIGNAR         [ reduce using rule 23 (declarador_sintipo -> VARIABLE .) ]
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 48
    oper_asig                      shift and go to state 49

state 281

<<<<<<< HEAD
    (90) slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .

    ENDLINE         reduce using rule 90 (slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .)
=======
    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust . return LLAVEDER
    (106) return -> . RETURN expresion ENDLINE
    (107) return -> . expresion
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    RETURN          shift and go to state 283
    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    return                         shift and go to state 296
    expresion                      shift and go to state 284

state 282

<<<<<<< HEAD
    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .

    $end            reduce using rule 91 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    LLAVEDER        reduce using rule 91 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
=======
    (101) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return . LLAVEDER

    LLAVEDER        shift and go to state 297
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 283

<<<<<<< HEAD
    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 . RPAREN

    RPAREN          shift and go to state 291
=======
    (106) return -> RETURN . expresion ENDLINE
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    expresion                      shift and go to state 298

state 284

<<<<<<< HEAD
    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN . empty ENDLINE
    (95) empty -> .

    ENDLINE         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 292

state 285

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty . VARIABLE RPAREN empty ENDLINE

    VARIABLE        shift and go to state 293
=======
    (107) return -> expresion .

    LLAVEDER        reduce using rule 107 (return -> expresion .)


state 285

    (88) slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .

    ENDLINE         reduce using rule 88 (slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 286

<<<<<<< HEAD
    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 71 (argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)
=======
    (89) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .

    $end            reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    LLAVEDER        reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    RETURN          reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    STRING          reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    U8              reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    F32             reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    VARIABLE        reduce using rule 89 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 287

<<<<<<< HEAD
    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN . ENDLINE

    ENDLINE         shift and go to state 294
=======
    (92) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 . RPAREN

    RPAREN          shift and go to state 299
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 288

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements . LLAVEDER RPAREN ENDLINE

    LLAVEDER        shift and go to state 295
=======
    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN . empty ENDLINE
    (93) empty -> .

    ENDLINE         reduce using rule 93 (empty -> .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 300

state 289

<<<<<<< HEAD
    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE .

    $end            reduce using rule 106 (data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE .)
    LLAVEDER        reduce using rule 106 (data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE .)
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty . VARIABLE RPAREN empty ENDLINE

    VARIABLE        shift and go to state 301
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 290

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT . empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    READ            reduce using rule 95 (empty -> .)
=======
    (69) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 69 (argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 296

state 291

<<<<<<< HEAD
    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .

    $end            reduce using rule 94 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    LLAVEDER        reduce using rule 94 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
=======
    (123) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .

    $end            reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    RETURN          reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    STRING          reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    U8              reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    F32             reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    VARIABLE        reduce using rule 123 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 292

<<<<<<< HEAD
    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 297
=======
    (112) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN . ENDLINE

    ENDLINE         shift and go to state 302
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 293

<<<<<<< HEAD
    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE . RPAREN empty ENDLINE

    RPAREN          shift and go to state 298
=======
    (110) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .

    $end            reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    LLAVEDER        reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    RETURN          reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    STRING          reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    U8              reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    F32             reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    VARIABLE        reduce using rule 110 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 294

<<<<<<< HEAD
    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .

    $end            reduce using rule 119 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 119 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)


state 295

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER . RPAREN ENDLINE

    RPAREN          shift and go to state 299
=======
    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT . empty READ LPAREN reference RPAREN ENDLINE
    (93) empty -> .

    READ            reduce using rule 93 (empty -> .)

    empty                          shift and go to state 303

state 295

    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust . return LLAVEDER
    (106) return -> . RETURN expresion ENDLINE
    (107) return -> . expresion
    (128) expresion -> . STRING
    (129) expresion -> . U8
    (130) expresion -> . F32
    (131) expresion -> . VARIABLE

    RETURN          shift and go to state 283
    STRING          shift and go to state 71
    U8              shift and go to state 72
    F32             shift and go to state 73
    VARIABLE        shift and go to state 74
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    return                         shift and go to state 304
    expresion                      shift and go to state 284

state 296

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty . READ LPAREN reference RPAREN ENDLINE

    READ            shift and go to state 300
=======
    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return . LLAVEDER

    LLAVEDER        shift and go to state 305
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 297

<<<<<<< HEAD
    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .

    $end            reduce using rule 47 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 47 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
=======
    (101) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .

    $end            reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    LLAVEDER        reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    RETURN          reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    STRING          reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    U8              reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    F32             reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    VARIABLE        reduce using rule 101 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 298

<<<<<<< HEAD
    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN . empty ENDLINE
    (95) empty -> .

    ENDLINE         reduce using rule 95 (empty -> .)
=======
    (106) return -> RETURN expresion . ENDLINE

    ENDLINE         shift and go to state 306
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

    empty                          shift and go to state 301

state 299

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN . ENDLINE

    ENDLINE         shift and go to state 302
=======
    (92) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .

    $end            reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    LLAVEDER        reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    RETURN          reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    STRING          reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    U8              reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    F32             reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    VARIABLE        reduce using rule 92 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 300

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ . LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 303
=======
    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 307
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 301

<<<<<<< HEAD
    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 304
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE . RPAREN empty ENDLINE

    RPAREN          shift and go to state 308
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 302

<<<<<<< HEAD
    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE .

    $end            reduce using rule 108 (vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 108 (vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE .)
=======
    (112) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .

    $end            reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    RETURN          reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    STRING          reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    U8              reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    F32             reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    VARIABLE        reduce using rule 112 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 303

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN . reference RPAREN ENDLINE
    (98) reference -> . AND empty MUT VARIABLE

    AND             shift and go to state 306

    reference                      shift and go to state 305

state 304

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .

    $end            reduce using rule 48 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 48 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
=======
    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty . READ LPAREN reference RPAREN ENDLINE

    READ            shift and go to state 309


state 304

    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return . LLAVEDER

    LLAVEDER        shift and go to state 310
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 305

<<<<<<< HEAD
    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference . RPAREN ENDLINE

    RPAREN          shift and go to state 307
=======
    (100) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .

    $end            reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    LLAVEDER        reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    RETURN          reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    STRING          reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    U8              reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    F32             reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    VARIABLE        reduce using rule 100 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 306

<<<<<<< HEAD
    (98) reference -> AND . empty MUT VARIABLE
    (95) empty -> .

    MUT             reduce using rule 95 (empty -> .)

    empty                          shift and go to state 308

state 307

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN . ENDLINE

    ENDLINE         shift and go to state 309
=======
    (106) return -> RETURN expresion ENDLINE .

    LLAVEDER        reduce using rule 106 (return -> RETURN expresion ENDLINE .)


state 307

    (45) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .

    $end            reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    RETURN          reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    STRING          reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    U8              reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    F32             reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    VARIABLE        reduce using rule 45 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 308

<<<<<<< HEAD
    (98) reference -> AND empty . MUT VARIABLE

    MUT             shift and go to state 310


state 309

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .

    $end            reduce using rule 97 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 97 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN . empty ENDLINE
    (93) empty -> .

    ENDLINE         reduce using rule 93 (empty -> .)

    empty                          shift and go to state 311

state 309

    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ . LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 312
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 310

<<<<<<< HEAD
    (98) reference -> AND empty MUT . VARIABLE

    VARIABLE        shift and go to state 311
=======
    (99) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .

    $end            reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    LLAVEDER        reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    RETURN          reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    STRING          reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    U8              reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    F32             reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    VARIABLE        reduce using rule 99 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453


state 311

<<<<<<< HEAD
    (98) reference -> AND empty MUT VARIABLE .

    RPAREN          reduce using rule 98 (reference -> AND empty MUT VARIABLE .)
=======
    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 313


state 312

    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN . reference RPAREN ENDLINE
    (96) reference -> . AND empty MUT VARIABLE

    AND             shift and go to state 315

    reference                      shift and go to state 314

state 313

    (46) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .

    $end            reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    RETURN          reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    STRING          reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    U8              reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    F32             reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    VARIABLE        reduce using rule 46 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)


state 314

    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference . RPAREN ENDLINE

    RPAREN          shift and go to state 316


state 315

    (96) reference -> AND . empty MUT VARIABLE
    (93) empty -> .

    MUT             reduce using rule 93 (empty -> .)

    empty                          shift and go to state 317

state 316

    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN . ENDLINE

    ENDLINE         shift and go to state 318


state 317

    (96) reference -> AND empty . MUT VARIABLE

    MUT             shift and go to state 319


state 318

    (95) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .

    $end            reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    RETURN          reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    STRING          reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    U8              reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    F32             reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    VARIABLE        reduce using rule 95 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)


state 319

    (96) reference -> AND empty MUT . VARIABLE

    VARIABLE        shift and go to state 320


state 320

    (96) reference -> AND empty MUT VARIABLE .

    RPAREN          reduce using rule 96 (reference -> AND empty MUT VARIABLE .)
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453

WARNING: 
WARNING: Conflicts:
WARNING: 
<<<<<<< HEAD
WARNING: shift/reduce conflict for ASIGNAR in state 28 resolved as shift
WARNING: reduce/reduce conflict in state 28 resolved using rule (declarador -> VARIABLE)
WARNING: rejected rule (declarador_sintipo -> VARIABLE) in state 28
WARNING: reduce/reduce conflict in state 78 resolved using rule (let_asig_sintipo -> LET VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 78
WARNING: reduce/reduce conflict in state 126 resolved using rule (let_asig_sintipo -> LET MUT VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 126
=======
WARNING: shift/reduce conflict for ASIGNAR in state 26 resolved as shift
WARNING: shift/reduce conflict for ASIGNAR in state 280 resolved as shift
WARNING: reduce/reduce conflict in state 26 resolved using rule (declarador -> VARIABLE)
WARNING: rejected rule (declarador_sintipo -> VARIABLE) in state 26
WARNING: reduce/reduce conflict in state 66 resolved using rule (let_asig_sintipo -> LET VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 66
WARNING: reduce/reduce conflict in state 109 resolved using rule (let_asig_sintipo -> LET MUT VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 109
WARNING: reduce/reduce conflict in state 280 resolved using rule (declarador -> VARIABLE)
WARNING: rejected rule (declarador_sintipo -> VARIABLE) in state 280
>>>>>>> 6c7c20a3aaa14e2398652fbeaa92083dd13e7453
WARNING: Rule (declarador_sintipo -> VARIABLE) is never reduced
WARNING: Rule (var_tipo -> VARIABLE) is never reduced
