Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ARROW
    AS
    ASYNC
    AWAIT
    BREAK
    B_FALSE
    B_TRUE
    CONST
    CONTIN
    CRATE
    DOLLAR
    DOTDOTDOT
    DYN
    ENUM
    ERRORPROP
    EXTERN
    IMPL
    LESSEQ
    LOOP
    MATCH
    MAYOR
    MAYORIGUAL
    MOD
    MOVE
    NOT
    NUMBER
    OR
    PRINT
    REF
    RETURN
    SELF
    SELFLOWERCASE
    STATIC
    SUPER
    TRAIT
    TYPE
    UNSAFE
    USE
    WHERE

Grammar

Rule 0     S' -> rust
Rule 1     rust -> asignacion
Rule 2     rust -> asignacion_sintipo
Rule 3     rust -> prints
Rule 4     rust -> hashfunc
Rule 5     rust -> conditional
Rule 6     rust -> conditional_asigned
Rule 7     rust -> for_loop
Rule 8     rust -> struct_s
Rule 9     rust -> while_loop
Rule 10    rust -> empty_vector
Rule 11    rust -> vector_methods
Rule 12    rust -> data_vector
Rule 13    rust -> slice_get
Rule 14    rust -> slice_contains
Rule 15    rust -> read_data
Rule 16    rust -> function
Rule 17    rust -> empty_function
Rule 18    asignacion -> declarador ASIGNAR expresion ENDLINE
Rule 19    asignacion -> other_operators ENDLINE
Rule 20    asignacion -> op_mat ENDLINE
Rule 21    asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
Rule 22    other_operators -> VARIABLE oper_asig expresion_sintipo
Rule 23    declarador -> VARIABLE
Rule 24    declarador -> let_asig
Rule 25    declarador_sintipo -> VARIABLE
Rule 26    declarador_sintipo -> let_asig_sintipo
Rule 27    let_asig -> LET var_tipo
Rule 28    let_asig -> LET MUT var_tipo
Rule 29    let_asig_sintipo -> LET MUT VARIABLE
Rule 30    let_asig_sintipo -> LET VARIABLE
Rule 31    var_tipo -> VARIABLE
Rule 32    var_tipo -> VARIABLE ASIGNATION_TYPE tipos
Rule 33    oper_asig -> ASIGNAR
Rule 34    oper_asig -> PLUSEQ
Rule 35    oper_asig -> MINUSEQ
Rule 36    oper_asig -> STAREQ
Rule 37    oper_asig -> SLASHEQ
Rule 38    prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
Rule 39    print_expresion -> STRING
Rule 40    print_expresion -> STRING COMMA print_args
Rule 41    print_args -> print_datos COMMA print_args
Rule 42    print_args -> print_datos
Rule 43    print_datos -> expresion
Rule 44    hashset -> HASHSET empty PATHSEP empty NEWFUNC
Rule 45    hashfunc -> hashset_insert
Rule 46    hashfunc -> hashset_union
Rule 47    hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
Rule 48    hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
Rule 49    conditional_asigned -> declarador ASIGNAR conditional ENDLINE
Rule 50    conditional -> if_type validations LLAVEIZ rust LLAVEDER
Rule 51    if_type -> IF
Rule 52    if_type -> ELSE IF
Rule 53    if_type -> ELSE
Rule 54    validations -> comparison
Rule 55    validations -> comparison ANDAND validations
Rule 56    validations -> comparison OROR validations
Rule 57    comparison -> VARIABLE signo_comp VARIABLE
Rule 58    comparison -> VARIABLE signo_comp U8
Rule 59    comparison -> U8 signo_comp VARIABLE
Rule 60    signo_comp -> GREATER
Rule 61    signo_comp -> LESST
Rule 62    signo_comp -> GREATEQ
Rule 63    signo_comp -> EQUAL
Rule 64    signo_comp -> DIFFERENT
Rule 65    f_comparacion -> rango
Rule 66    f_comparacion -> VARIABLE
Rule 67    for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
Rule 68    struct_s -> STRUCT sent_stru
Rule 69    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos
Rule 70    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 71    argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 72    argumentos_tipo -> tipos
Rule 73    argumentos_tipo -> tipos COMMA argumentos_tipo
Rule 74    sent_stru -> UNIT ENDLINE
Rule 75    sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
Rule 76    sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER
Rule 77    op_mat -> art_exp
Rule 78    op_mat -> VARIABLE signo_arit art_exp
Rule 79    op_mat -> U8 signo_arit art_exp
Rule 80    art_exp -> VARIABLE signo_arit VARIABLE
Rule 81    art_exp -> U8 signo_arit VARIABLE
Rule 82    art_exp -> VARIABLE signo_arit U8
Rule 83    art_exp -> U8 signo_arit U8
Rule 84    signo_arit -> MAS
Rule 85    signo_arit -> MENOS
Rule 86    signo_arit -> MULT
Rule 87    signo_arit -> DIVISION
Rule 88    signo_arit -> MODULO
Rule 89    rango -> U8 DOT DOT U8
Rule 90    slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR
Rule 91    slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
Rule 92    valor_get -> rango
Rule 93    valor_get -> U8
Rule 94    slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
Rule 95    empty -> <empty>
Rule 96    while_loop -> WHILE validations LLAVEIZ rust LLAVEDER
Rule 97    read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
Rule 98    reference -> AND empty MUT VARIABLE
Rule 99    function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
Rule 100   empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
Rule 101   arguments -> VARIABLE ASIGNATION_TYPE tipos
Rule 102   arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments
Rule 103   empty_vector -> declare_vector VECT types_vector empty_vec
Rule 104   data_vector -> declare_vector VECT types_vector vector_content
Rule 105   data_vector -> declare_vector vector_content
Rule 106   data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
Rule 107   vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE
Rule 108   vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
Rule 109   vector_elements -> element
Rule 110   vector_elements -> element COMMA vector_elements
Rule 111   element -> expresion
Rule 112   element_type -> U8 NUMDATATYPES
Rule 113   types_vector -> LESST DATATYPES GREATER
Rule 114   types_vector -> LESST NUMDATATYPES GREATER
Rule 115   declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE
Rule 116   declare_vector -> LET VARIABLE ASIGNATION_TYPE
Rule 117   empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
Rule 118   empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
Rule 119   empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
Rule 120   vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
Rule 121   vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
Rule 122   tipos -> DATATYPES
Rule 123   tipos -> NUMDATATYPES
Rule 124   expresion -> STRING
Rule 125   expresion -> U8
Rule 126   expresion -> F32
Rule 127   expresion -> VARIABLE
Rule 128   expresion_sintipo -> hashset
Rule 129   expresion_sintipo -> op_mat
Rule 130   expresion_sintipo -> slice_exp
Rule 131   expresion_sintipo -> expresion

Terminals, with rules where they appear

AND                  : 48 90 94 98
ANDAND               : 55
ARROW                : 
AS                   : 
ASIGNAR              : 18 21 33 49 106 117 118 119
ASIGNATION_TYPE      : 32 69 70 71 101 102 115 116
ASYNC                : 
AWAIT                : 
BRACKETL             : 90 118
BRACKETR             : 90 118
BREAK                : 
B_FALSE              : 
B_TRUE               : 
COMMA                : 40 41 70 71 73 102 106 110
CONST                : 
CONTAINS_SLICE       : 94
CONTIN               : 
CRATE                : 
DATATYPES            : 113 122
DIFFERENT            : 64
DIVISION             : 87
DOLLAR               : 
DOT                  : 47 48 89 89 91 94 97 120 121
DOTDOTDOT            : 
DYN                  : 
ELSE                 : 52 53
ENDLINE              : 18 19 20 21 38 47 48 49 74 75 97 106 107 108 117 118 119
ENUM                 : 
EQUAL                : 63
ERRORPROP            : 
EXTERN               : 
F32                  : 126
FOR                  : 67
FROM                 : 108 119
FUNCTION             : 99 100
GET_SLICE            : 91
GREATEQ              : 62
GREATER              : 60 113 114
HASHSET              : 44
IF                   : 51 52
IMPL                 : 
IN                   : 67
INSERT_HASH          : 47
IO                   : 97
LESSEQ               : 
LESST                : 61 113 114
LET                  : 27 28 29 30 115 116
LLAVEDER             : 50 67 76 96 99 100 106 107 108
LLAVEIZ              : 50 67 76 96 99 100 106 107 108
LOOP                 : 
LPAREN               : 38 47 48 75 91 94 97 97 99 100 108 119 120 121
MAS                  : 84
MATCH                : 
MAYOR                : 
MAYORIGUAL           : 
MENOS                : 85
MINUSEQ              : 35
MOD                  : 
MODULO               : 88
MOVE                 : 
MULT                 : 86
MUT                  : 28 29 98 115
NEWFUNC              : 44 117
NOT                  : 
NUMBER               : 
NUMDATATYPES         : 112 114 123
OR                   : 
OROR                 : 56
PATHSEP              : 44 97 108 117 119
PLUSEQ               : 34
POP_VEC              : 121
PRINT                : 
PRINTS               : 38
PUB                  : 71
PUSH_VEC             : 120
READ                 : 97
REF                  : 
RETURN               : 
RPAREN               : 38 47 48 75 91 94 97 97 99 100 108 119 120 121
SELF                 : 
SELFLOWERCASE        : 
SLASHEQ              : 37
STAREQ               : 36
STATIC               : 
STDIN                : 97
STRING               : 39 40 124
STRUCT               : 68
SUPER                : 
TRAIT                : 
TUPLE                : 75
TYPE                 : 
U8                   : 58 59 79 81 82 83 83 89 89 93 94 112 125
UNION_HASH           : 48
UNIT                 : 74
UNSAFE               : 
USE                  : 
VARIABLE             : 22 23 25 29 30 31 32 47 48 48 57 57 58 59 66 67 69 70 71 76 78 80 80 81 82 90 91 94 98 99 100 101 102 115 116 120 121 127
VECT                 : 103 104 108 117 119
VECTMACRO            : 106 107 118
WHERE                : 
WHILE                : 96
error                : 

Nonterminals, with rules where they appear

argumentos_juntos    : 70 71 76
argumentos_tipo      : 73 75
arguments            : 99 102
art_exp              : 77 78 79
asignacion           : 1
asignacion_sintipo   : 2
comparison           : 54 55 56
conditional          : 5 49
conditional_asigned  : 6
data_vector          : 12
declarador           : 18 49
declarador_sintipo   : 21
declare_vector       : 103 104 105 106
element              : 109 110
element_type         : 106
empty                : 38 38 44 44 47 47 47 47 48 48 48 48 48 90 90 91 91 91 94 94 94 97 97 97 97 98 108 108 120 120 121 121
empty_function       : 17
empty_vec            : 103
empty_vector         : 10
expresion            : 18 43 47 111 120 131
expresion_sintipo    : 21 22
f_comparacion        : 67
for_loop             : 7
function             : 16
hashfunc             : 4
hashset              : 128
hashset_insert       : 45
hashset_union        : 46
if_type              : 50
let_asig             : 24
let_asig_sintipo     : 26
op_mat               : 20 129
oper_asig            : 22
other_operators      : 19
print_args           : 40 41
print_datos          : 41 42
print_expresion      : 38
prints               : 3
rango                : 65 90 92
read_data            : 15
reference            : 97
rust                 : 50 67 96 99 100 0
sent_stru            : 68
signo_arit           : 78 79 80 81 82 83
signo_comp           : 57 58 59
slice_contains       : 14
slice_exp            : 130
slice_get            : 13
struct_s             : 8
tipos                : 32 69 70 71 72 73 101 102
types_vector         : 103 104
validations          : 50 55 56 96
valor_get            : 91
var_tipo             : 27 28
vector_content       : 104 105
vector_elements      : 106 107 108 110
vector_methods       : 11
while_loop           : 9

Parsing method: LALR

state 0

    (0) S' -> . rust
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 1
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 1

    (0) S' -> rust .



state 2

    (1) rust -> asignacion .

    $end            reduce using rule 1 (rust -> asignacion .)
    LLAVEDER        reduce using rule 1 (rust -> asignacion .)


state 3

    (2) rust -> asignacion_sintipo .

    $end            reduce using rule 2 (rust -> asignacion_sintipo .)
    LLAVEDER        reduce using rule 2 (rust -> asignacion_sintipo .)


state 4

    (3) rust -> prints .

    $end            reduce using rule 3 (rust -> prints .)
    LLAVEDER        reduce using rule 3 (rust -> prints .)


state 5

    (4) rust -> hashfunc .

    $end            reduce using rule 4 (rust -> hashfunc .)
    LLAVEDER        reduce using rule 4 (rust -> hashfunc .)


state 6

    (5) rust -> conditional .

    $end            reduce using rule 5 (rust -> conditional .)
    LLAVEDER        reduce using rule 5 (rust -> conditional .)


state 7

    (6) rust -> conditional_asigned .

    $end            reduce using rule 6 (rust -> conditional_asigned .)
    LLAVEDER        reduce using rule 6 (rust -> conditional_asigned .)


state 8

    (7) rust -> for_loop .

    $end            reduce using rule 7 (rust -> for_loop .)
    LLAVEDER        reduce using rule 7 (rust -> for_loop .)


state 9

    (8) rust -> struct_s .

    $end            reduce using rule 8 (rust -> struct_s .)
    LLAVEDER        reduce using rule 8 (rust -> struct_s .)


state 10

    (9) rust -> while_loop .

    $end            reduce using rule 9 (rust -> while_loop .)
    LLAVEDER        reduce using rule 9 (rust -> while_loop .)


state 11

    (10) rust -> empty_vector .

    $end            reduce using rule 10 (rust -> empty_vector .)
    LLAVEDER        reduce using rule 10 (rust -> empty_vector .)


state 12

    (11) rust -> vector_methods .

    $end            reduce using rule 11 (rust -> vector_methods .)
    LLAVEDER        reduce using rule 11 (rust -> vector_methods .)


state 13

    (12) rust -> data_vector .

    $end            reduce using rule 12 (rust -> data_vector .)
    LLAVEDER        reduce using rule 12 (rust -> data_vector .)


state 14

    (13) rust -> slice_get .

    $end            reduce using rule 13 (rust -> slice_get .)
    LLAVEDER        reduce using rule 13 (rust -> slice_get .)


state 15

    (14) rust -> slice_contains .

    $end            reduce using rule 14 (rust -> slice_contains .)
    LLAVEDER        reduce using rule 14 (rust -> slice_contains .)


state 16

    (15) rust -> read_data .

    $end            reduce using rule 15 (rust -> read_data .)
    LLAVEDER        reduce using rule 15 (rust -> read_data .)


state 17

    (16) rust -> function .

    $end            reduce using rule 16 (rust -> function .)
    LLAVEDER        reduce using rule 16 (rust -> function .)


state 18

    (17) rust -> empty_function .

    $end            reduce using rule 17 (rust -> empty_function .)
    LLAVEDER        reduce using rule 17 (rust -> empty_function .)


state 19

    (18) asignacion -> declarador . ASIGNAR expresion ENDLINE
    (49) conditional_asigned -> declarador . ASIGNAR conditional ENDLINE

    ASIGNAR         shift and go to state 41


state 20

    (19) asignacion -> other_operators . ENDLINE

    ENDLINE         shift and go to state 42


state 21

    (20) asignacion -> op_mat . ENDLINE

    ENDLINE         shift and go to state 43


state 22

    (21) asignacion_sintipo -> declarador_sintipo . ASIGNAR expresion_sintipo ENDLINE

    ASIGNAR         shift and go to state 44


state 23

    (38) prints -> PRINTS . empty LPAREN print_expresion RPAREN empty ENDLINE
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 45

state 24

    (45) hashfunc -> hashset_insert .

    $end            reduce using rule 45 (hashfunc -> hashset_insert .)
    LLAVEDER        reduce using rule 45 (hashfunc -> hashset_insert .)


state 25

    (46) hashfunc -> hashset_union .

    $end            reduce using rule 46 (hashfunc -> hashset_union .)
    LLAVEDER        reduce using rule 46 (hashfunc -> hashset_union .)


state 26

    (50) conditional -> if_type . validations LLAVEIZ rust LLAVEDER
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    validations                    shift and go to state 46
    comparison                     shift and go to state 47

state 27

    (67) for_loop -> FOR . VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER

    VARIABLE        shift and go to state 50


state 28

    (120) vector_methods -> VARIABLE . empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE . empty DOT empty POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE . empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE . empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (23) declarador -> VARIABLE .
    (22) other_operators -> VARIABLE . oper_asig expresion_sintipo
    (78) op_mat -> VARIABLE . signo_arit art_exp
    (25) declarador_sintipo -> VARIABLE .
    (47) hashset_insert -> VARIABLE . empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE . empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (95) empty -> .
    (33) oper_asig -> . ASIGNAR
    (34) oper_asig -> . PLUSEQ
    (35) oper_asig -> . MINUSEQ
    (36) oper_asig -> . STAREQ
    (37) oper_asig -> . SLASHEQ
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

  ! reduce/reduce conflict for ASIGNAR resolved using rule 23 (declarador -> VARIABLE .)
  ! shift/reduce conflict for ASIGNAR resolved as shift
    DOT             reduce using rule 95 (empty -> .)
    ASIGNAR         shift and go to state 54
    PLUSEQ          shift and go to state 55
    MINUSEQ         shift and go to state 56
    STAREQ          shift and go to state 57
    SLASHEQ         shift and go to state 58
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

  ! ASIGNAR         [ reduce using rule 23 (declarador -> VARIABLE .) ]
  ! ASIGNAR         [ reduce using rule 25 (declarador_sintipo -> VARIABLE .) ]

    empty                          shift and go to state 51
    oper_asig                      shift and go to state 52
    signo_arit                     shift and go to state 53

state 29

    (68) struct_s -> STRUCT . sent_stru
    (74) sent_stru -> . UNIT ENDLINE
    (75) sent_stru -> . TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
    (76) sent_stru -> . VARIABLE LLAVEIZ argumentos_juntos LLAVEDER

    UNIT            shift and go to state 65
    TUPLE           shift and go to state 66
    VARIABLE        shift and go to state 67

    sent_stru                      shift and go to state 64

state 30

    (96) while_loop -> WHILE . validations LLAVEIZ rust LLAVEDER
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    validations                    shift and go to state 68
    comparison                     shift and go to state 47

state 31

    (103) empty_vector -> declare_vector . VECT types_vector empty_vec
    (104) data_vector -> declare_vector . VECT types_vector vector_content
    (105) data_vector -> declare_vector . vector_content
    (106) data_vector -> declare_vector . ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (107) vector_content -> . VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE
    (108) vector_content -> . VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    VECT            shift and go to state 69
    ASIGNAR         shift and go to state 71
    VECTMACRO       shift and go to state 72

    vector_content                 shift and go to state 70

state 32

    (79) op_mat -> U8 . signo_arit art_exp
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 73

state 33

    (97) read_data -> IO . empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    PATHSEP         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 74

state 34

    (99) function -> FUNCTION . VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> FUNCTION . VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER

    VARIABLE        shift and go to state 75


state 35

    (24) declarador -> let_asig .

    ASIGNAR         reduce using rule 24 (declarador -> let_asig .)


state 36

    (77) op_mat -> art_exp .

    ENDLINE         reduce using rule 77 (op_mat -> art_exp .)


state 37

    (26) declarador_sintipo -> let_asig_sintipo .

    ASIGNAR         reduce using rule 26 (declarador_sintipo -> let_asig_sintipo .)


state 38

    (51) if_type -> IF .

    VARIABLE        reduce using rule 51 (if_type -> IF .)
    U8              reduce using rule 51 (if_type -> IF .)


state 39

    (52) if_type -> ELSE . IF
    (53) if_type -> ELSE .

    IF              shift and go to state 76
    VARIABLE        reduce using rule 53 (if_type -> ELSE .)
    U8              reduce using rule 53 (if_type -> ELSE .)


state 40

    (115) declare_vector -> LET . MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> LET . VARIABLE ASIGNATION_TYPE
    (27) let_asig -> LET . var_tipo
    (28) let_asig -> LET . MUT var_tipo
    (29) let_asig_sintipo -> LET . MUT VARIABLE
    (30) let_asig_sintipo -> LET . VARIABLE
    (31) var_tipo -> . VARIABLE
    (32) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    MUT             shift and go to state 77
    VARIABLE        shift and go to state 78

    var_tipo                       shift and go to state 79

state 41

    (18) asignacion -> declarador ASIGNAR . expresion ENDLINE
    (49) conditional_asigned -> declarador ASIGNAR . conditional ENDLINE
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85
    IF              shift and go to state 38
    ELSE            shift and go to state 39

    expresion                      shift and go to state 80
    conditional                    shift and go to state 81
    if_type                        shift and go to state 26

state 42

    (19) asignacion -> other_operators ENDLINE .

    $end            reduce using rule 19 (asignacion -> other_operators ENDLINE .)
    LLAVEDER        reduce using rule 19 (asignacion -> other_operators ENDLINE .)


state 43

    (20) asignacion -> op_mat ENDLINE .

    $end            reduce using rule 20 (asignacion -> op_mat ENDLINE .)
    LLAVEDER        reduce using rule 20 (asignacion -> op_mat ENDLINE .)


state 44

    (21) asignacion_sintipo -> declarador_sintipo ASIGNAR . expresion_sintipo ENDLINE
    (128) expresion_sintipo -> . hashset
    (129) expresion_sintipo -> . op_mat
    (130) expresion_sintipo -> . slice_exp
    (131) expresion_sintipo -> . expresion
    (44) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (90) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    HASHSET         shift and go to state 91
    VARIABLE        shift and go to state 92
    U8              shift and go to state 93
    AND             shift and go to state 94
    STRING          shift and go to state 82
    F32             shift and go to state 84

    expresion_sintipo              shift and go to state 86
    hashset                        shift and go to state 87
    op_mat                         shift and go to state 88
    slice_exp                      shift and go to state 89
    expresion                      shift and go to state 90
    art_exp                        shift and go to state 36

state 45

    (38) prints -> PRINTS empty . LPAREN print_expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 95


state 46

    (50) conditional -> if_type validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 96


state 47

    (54) validations -> comparison .
    (55) validations -> comparison . ANDAND validations
    (56) validations -> comparison . OROR validations

    LLAVEIZ         reduce using rule 54 (validations -> comparison .)
    ANDAND          shift and go to state 97
    OROR            shift and go to state 98


state 48

    (57) comparison -> VARIABLE . signo_comp VARIABLE
    (58) comparison -> VARIABLE . signo_comp U8
    (60) signo_comp -> . GREATER
    (61) signo_comp -> . LESST
    (62) signo_comp -> . GREATEQ
    (63) signo_comp -> . EQUAL
    (64) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 100
    LESST           shift and go to state 101
    GREATEQ         shift and go to state 102
    EQUAL           shift and go to state 103
    DIFFERENT       shift and go to state 104

    signo_comp                     shift and go to state 99

state 49

    (59) comparison -> U8 . signo_comp VARIABLE
    (60) signo_comp -> . GREATER
    (61) signo_comp -> . LESST
    (62) signo_comp -> . GREATEQ
    (63) signo_comp -> . EQUAL
    (64) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 100
    LESST           shift and go to state 101
    GREATEQ         shift and go to state 102
    EQUAL           shift and go to state 103
    DIFFERENT       shift and go to state 104

    signo_comp                     shift and go to state 105

state 50

    (67) for_loop -> FOR VARIABLE . IN f_comparacion LLAVEIZ rust LLAVEDER

    IN              shift and go to state 106


state 51

    (120) vector_methods -> VARIABLE empty . DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE empty . DOT empty POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE empty . DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE empty . DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (47) hashset_insert -> VARIABLE empty . DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE empty . DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    DOT             shift and go to state 107


state 52

    (22) other_operators -> VARIABLE oper_asig . expresion_sintipo
    (128) expresion_sintipo -> . hashset
    (129) expresion_sintipo -> . op_mat
    (130) expresion_sintipo -> . slice_exp
    (131) expresion_sintipo -> . expresion
    (44) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (90) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    HASHSET         shift and go to state 91
    VARIABLE        shift and go to state 92
    U8              shift and go to state 93
    AND             shift and go to state 94
    STRING          shift and go to state 82
    F32             shift and go to state 84

    expresion_sintipo              shift and go to state 108
    hashset                        shift and go to state 87
    op_mat                         shift and go to state 88
    slice_exp                      shift and go to state 89
    expresion                      shift and go to state 90
    art_exp                        shift and go to state 36

state 53

    (78) op_mat -> VARIABLE signo_arit . art_exp
    (80) art_exp -> VARIABLE signo_arit . VARIABLE
    (82) art_exp -> VARIABLE signo_arit . U8
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    VARIABLE        shift and go to state 109
    U8              shift and go to state 111

    art_exp                        shift and go to state 110

state 54

    (33) oper_asig -> ASIGNAR .

    HASHSET         reduce using rule 33 (oper_asig -> ASIGNAR .)
    VARIABLE        reduce using rule 33 (oper_asig -> ASIGNAR .)
    U8              reduce using rule 33 (oper_asig -> ASIGNAR .)
    AND             reduce using rule 33 (oper_asig -> ASIGNAR .)
    STRING          reduce using rule 33 (oper_asig -> ASIGNAR .)
    F32             reduce using rule 33 (oper_asig -> ASIGNAR .)


state 55

    (34) oper_asig -> PLUSEQ .

    HASHSET         reduce using rule 34 (oper_asig -> PLUSEQ .)
    VARIABLE        reduce using rule 34 (oper_asig -> PLUSEQ .)
    U8              reduce using rule 34 (oper_asig -> PLUSEQ .)
    AND             reduce using rule 34 (oper_asig -> PLUSEQ .)
    STRING          reduce using rule 34 (oper_asig -> PLUSEQ .)
    F32             reduce using rule 34 (oper_asig -> PLUSEQ .)


state 56

    (35) oper_asig -> MINUSEQ .

    HASHSET         reduce using rule 35 (oper_asig -> MINUSEQ .)
    VARIABLE        reduce using rule 35 (oper_asig -> MINUSEQ .)
    U8              reduce using rule 35 (oper_asig -> MINUSEQ .)
    AND             reduce using rule 35 (oper_asig -> MINUSEQ .)
    STRING          reduce using rule 35 (oper_asig -> MINUSEQ .)
    F32             reduce using rule 35 (oper_asig -> MINUSEQ .)


state 57

    (36) oper_asig -> STAREQ .

    HASHSET         reduce using rule 36 (oper_asig -> STAREQ .)
    VARIABLE        reduce using rule 36 (oper_asig -> STAREQ .)
    U8              reduce using rule 36 (oper_asig -> STAREQ .)
    AND             reduce using rule 36 (oper_asig -> STAREQ .)
    STRING          reduce using rule 36 (oper_asig -> STAREQ .)
    F32             reduce using rule 36 (oper_asig -> STAREQ .)


state 58

    (37) oper_asig -> SLASHEQ .

    HASHSET         reduce using rule 37 (oper_asig -> SLASHEQ .)
    VARIABLE        reduce using rule 37 (oper_asig -> SLASHEQ .)
    U8              reduce using rule 37 (oper_asig -> SLASHEQ .)
    AND             reduce using rule 37 (oper_asig -> SLASHEQ .)
    STRING          reduce using rule 37 (oper_asig -> SLASHEQ .)
    F32             reduce using rule 37 (oper_asig -> SLASHEQ .)


state 59

    (84) signo_arit -> MAS .

    VARIABLE        reduce using rule 84 (signo_arit -> MAS .)
    U8              reduce using rule 84 (signo_arit -> MAS .)


state 60

    (85) signo_arit -> MENOS .

    VARIABLE        reduce using rule 85 (signo_arit -> MENOS .)
    U8              reduce using rule 85 (signo_arit -> MENOS .)


state 61

    (86) signo_arit -> MULT .

    VARIABLE        reduce using rule 86 (signo_arit -> MULT .)
    U8              reduce using rule 86 (signo_arit -> MULT .)


state 62

    (87) signo_arit -> DIVISION .

    VARIABLE        reduce using rule 87 (signo_arit -> DIVISION .)
    U8              reduce using rule 87 (signo_arit -> DIVISION .)


state 63

    (88) signo_arit -> MODULO .

    VARIABLE        reduce using rule 88 (signo_arit -> MODULO .)
    U8              reduce using rule 88 (signo_arit -> MODULO .)


state 64

    (68) struct_s -> STRUCT sent_stru .

    $end            reduce using rule 68 (struct_s -> STRUCT sent_stru .)
    LLAVEDER        reduce using rule 68 (struct_s -> STRUCT sent_stru .)


state 65

    (74) sent_stru -> UNIT . ENDLINE

    ENDLINE         shift and go to state 112


state 66

    (75) sent_stru -> TUPLE . LPAREN argumentos_tipo RPAREN ENDLINE

    LPAREN          shift and go to state 113


state 67

    (76) sent_stru -> VARIABLE . LLAVEIZ argumentos_juntos LLAVEDER

    LLAVEIZ         shift and go to state 114


state 68

    (96) while_loop -> WHILE validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 115


state 69

    (103) empty_vector -> declare_vector VECT . types_vector empty_vec
    (104) data_vector -> declare_vector VECT . types_vector vector_content
    (108) vector_content -> VECT . empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
    (113) types_vector -> . LESST DATATYPES GREATER
    (114) types_vector -> . LESST NUMDATATYPES GREATER
    (95) empty -> .

    LESST           shift and go to state 118
    PATHSEP         reduce using rule 95 (empty -> .)

    types_vector                   shift and go to state 116
    empty                          shift and go to state 117

state 70

    (105) data_vector -> declare_vector vector_content .

    $end            reduce using rule 105 (data_vector -> declare_vector vector_content .)
    LLAVEDER        reduce using rule 105 (data_vector -> declare_vector vector_content .)


state 71

    (106) data_vector -> declare_vector ASIGNAR . VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE

    VECTMACRO       shift and go to state 119


state 72

    (107) vector_content -> VECTMACRO . LLAVEIZ vector_elements LLAVEDER ENDLINE

    LLAVEIZ         shift and go to state 120


state 73

    (79) op_mat -> U8 signo_arit . art_exp
    (81) art_exp -> U8 signo_arit . VARIABLE
    (83) art_exp -> U8 signo_arit . U8
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8

    VARIABLE        shift and go to state 123
    U8              shift and go to state 121

    art_exp                        shift and go to state 122

state 74

    (97) read_data -> IO empty . PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    PATHSEP         shift and go to state 124


state 75

    (99) function -> FUNCTION VARIABLE . LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> FUNCTION VARIABLE . LPAREN RPAREN LLAVEIZ rust LLAVEDER

    LPAREN          shift and go to state 125


state 76

    (52) if_type -> ELSE IF .

    VARIABLE        reduce using rule 52 (if_type -> ELSE IF .)
    U8              reduce using rule 52 (if_type -> ELSE IF .)


state 77

    (115) declare_vector -> LET MUT . VARIABLE ASIGNATION_TYPE
    (28) let_asig -> LET MUT . var_tipo
    (29) let_asig_sintipo -> LET MUT . VARIABLE
    (31) var_tipo -> . VARIABLE
    (32) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    VARIABLE        shift and go to state 126

    var_tipo                       shift and go to state 127

state 78

    (116) declare_vector -> LET VARIABLE . ASIGNATION_TYPE
    (30) let_asig_sintipo -> LET VARIABLE .
    (31) var_tipo -> VARIABLE .
    (32) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 30 (let_asig_sintipo -> LET VARIABLE .)
    ASIGNATION_TYPE shift and go to state 128
    ASIGNAR         reduce using rule 30 (let_asig_sintipo -> LET VARIABLE .)

  ! ASIGNAR         [ reduce using rule 31 (var_tipo -> VARIABLE .) ]


state 79

    (27) let_asig -> LET var_tipo .

    ASIGNAR         reduce using rule 27 (let_asig -> LET var_tipo .)


state 80

    (18) asignacion -> declarador ASIGNAR expresion . ENDLINE

    ENDLINE         shift and go to state 129


state 81

    (49) conditional_asigned -> declarador ASIGNAR conditional . ENDLINE

    ENDLINE         shift and go to state 130


state 82

    (124) expresion -> STRING .

    ENDLINE         reduce using rule 124 (expresion -> STRING .)
    COMMA           reduce using rule 124 (expresion -> STRING .)
    LLAVEDER        reduce using rule 124 (expresion -> STRING .)
    RPAREN          reduce using rule 124 (expresion -> STRING .)


state 83

    (125) expresion -> U8 .

    ENDLINE         reduce using rule 125 (expresion -> U8 .)
    COMMA           reduce using rule 125 (expresion -> U8 .)
    LLAVEDER        reduce using rule 125 (expresion -> U8 .)
    RPAREN          reduce using rule 125 (expresion -> U8 .)


state 84

    (126) expresion -> F32 .

    ENDLINE         reduce using rule 126 (expresion -> F32 .)
    COMMA           reduce using rule 126 (expresion -> F32 .)
    LLAVEDER        reduce using rule 126 (expresion -> F32 .)
    RPAREN          reduce using rule 126 (expresion -> F32 .)


state 85

    (127) expresion -> VARIABLE .

    ENDLINE         reduce using rule 127 (expresion -> VARIABLE .)
    COMMA           reduce using rule 127 (expresion -> VARIABLE .)
    LLAVEDER        reduce using rule 127 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 127 (expresion -> VARIABLE .)


state 86

    (21) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo . ENDLINE

    ENDLINE         shift and go to state 131


state 87

    (128) expresion_sintipo -> hashset .

    ENDLINE         reduce using rule 128 (expresion_sintipo -> hashset .)


state 88

    (129) expresion_sintipo -> op_mat .

    ENDLINE         reduce using rule 129 (expresion_sintipo -> op_mat .)


state 89

    (130) expresion_sintipo -> slice_exp .

    ENDLINE         reduce using rule 130 (expresion_sintipo -> slice_exp .)


state 90

    (131) expresion_sintipo -> expresion .

    ENDLINE         reduce using rule 131 (expresion_sintipo -> expresion .)


state 91

    (44) hashset -> HASHSET . empty PATHSEP empty NEWFUNC
    (95) empty -> .

    PATHSEP         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 132

state 92

    (78) op_mat -> VARIABLE . signo_arit art_exp
    (127) expresion -> VARIABLE .
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 127 (expresion -> VARIABLE .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 53

state 93

    (79) op_mat -> U8 . signo_arit art_exp
    (125) expresion -> U8 .
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 125 (expresion -> U8 .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 73

state 94

    (90) slice_exp -> AND . empty VARIABLE empty BRACKETL rango BRACKETR
    (95) empty -> .

    VARIABLE        reduce using rule 95 (empty -> .)

    empty                          shift and go to state 133

state 95

    (38) prints -> PRINTS empty LPAREN . print_expresion RPAREN empty ENDLINE
    (39) print_expresion -> . STRING
    (40) print_expresion -> . STRING COMMA print_args

    STRING          shift and go to state 135

    print_expresion                shift and go to state 134

state 96

    (50) conditional -> if_type validations LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    if_type                        shift and go to state 26
    rust                           shift and go to state 136
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 97

    (55) validations -> comparison ANDAND . validations
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    comparison                     shift and go to state 47
    validations                    shift and go to state 137

state 98

    (56) validations -> comparison OROR . validations
    (54) validations -> . comparison
    (55) validations -> . comparison ANDAND validations
    (56) validations -> . comparison OROR validations
    (57) comparison -> . VARIABLE signo_comp VARIABLE
    (58) comparison -> . VARIABLE signo_comp U8
    (59) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 48
    U8              shift and go to state 49

    comparison                     shift and go to state 47
    validations                    shift and go to state 138

state 99

    (57) comparison -> VARIABLE signo_comp . VARIABLE
    (58) comparison -> VARIABLE signo_comp . U8

    VARIABLE        shift and go to state 139
    U8              shift and go to state 140


state 100

    (60) signo_comp -> GREATER .

    VARIABLE        reduce using rule 60 (signo_comp -> GREATER .)
    U8              reduce using rule 60 (signo_comp -> GREATER .)


state 101

    (61) signo_comp -> LESST .

    VARIABLE        reduce using rule 61 (signo_comp -> LESST .)
    U8              reduce using rule 61 (signo_comp -> LESST .)


state 102

    (62) signo_comp -> GREATEQ .

    VARIABLE        reduce using rule 62 (signo_comp -> GREATEQ .)
    U8              reduce using rule 62 (signo_comp -> GREATEQ .)


state 103

    (63) signo_comp -> EQUAL .

    VARIABLE        reduce using rule 63 (signo_comp -> EQUAL .)
    U8              reduce using rule 63 (signo_comp -> EQUAL .)


state 104

    (64) signo_comp -> DIFFERENT .

    VARIABLE        reduce using rule 64 (signo_comp -> DIFFERENT .)
    U8              reduce using rule 64 (signo_comp -> DIFFERENT .)


state 105

    (59) comparison -> U8 signo_comp . VARIABLE

    VARIABLE        shift and go to state 141


state 106

    (67) for_loop -> FOR VARIABLE IN . f_comparacion LLAVEIZ rust LLAVEDER
    (65) f_comparacion -> . rango
    (66) f_comparacion -> . VARIABLE
    (89) rango -> . U8 DOT DOT U8

    VARIABLE        shift and go to state 142
    U8              shift and go to state 145

    f_comparacion                  shift and go to state 143
    rango                          shift and go to state 144

state 107

    (120) vector_methods -> VARIABLE empty DOT . empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE empty DOT . empty POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE empty DOT . empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE empty DOT . empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (47) hashset_insert -> VARIABLE empty DOT . empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE empty DOT . empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (95) empty -> .

    PUSH_VEC        reduce using rule 95 (empty -> .)
    POP_VEC         reduce using rule 95 (empty -> .)
    GET_SLICE       reduce using rule 95 (empty -> .)
    CONTAINS_SLICE  reduce using rule 95 (empty -> .)
    INSERT_HASH     reduce using rule 95 (empty -> .)
    UNION_HASH      reduce using rule 95 (empty -> .)

    empty                          shift and go to state 146

state 108

    (22) other_operators -> VARIABLE oper_asig expresion_sintipo .

    ENDLINE         reduce using rule 22 (other_operators -> VARIABLE oper_asig expresion_sintipo .)


state 109

    (80) art_exp -> VARIABLE signo_arit VARIABLE .
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 80 (art_exp -> VARIABLE signo_arit VARIABLE .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 147

state 110

    (78) op_mat -> VARIABLE signo_arit art_exp .

    ENDLINE         reduce using rule 78 (op_mat -> VARIABLE signo_arit art_exp .)


state 111

    (82) art_exp -> VARIABLE signo_arit U8 .
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 82 (art_exp -> VARIABLE signo_arit U8 .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 148

state 112

    (74) sent_stru -> UNIT ENDLINE .

    $end            reduce using rule 74 (sent_stru -> UNIT ENDLINE .)
    LLAVEDER        reduce using rule 74 (sent_stru -> UNIT ENDLINE .)


state 113

    (75) sent_stru -> TUPLE LPAREN . argumentos_tipo RPAREN ENDLINE
    (72) argumentos_tipo -> . tipos
    (73) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    argumentos_tipo                shift and go to state 149
    tipos                          shift and go to state 150

state 114

    (76) sent_stru -> VARIABLE LLAVEIZ . argumentos_juntos LLAVEDER
    (69) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (71) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 153
    PUB             shift and go to state 155

    argumentos_juntos              shift and go to state 154

state 115

    (96) while_loop -> WHILE validations LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 156
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 116

    (103) empty_vector -> declare_vector VECT types_vector . empty_vec
    (104) data_vector -> declare_vector VECT types_vector . vector_content
    (117) empty_vec -> . ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
    (118) empty_vec -> . ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
    (119) empty_vec -> . ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
    (107) vector_content -> . VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE
    (108) vector_content -> . VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    ASIGNAR         shift and go to state 160
    VECTMACRO       shift and go to state 72
    VECT            shift and go to state 157

    empty_vec                      shift and go to state 158
    vector_content                 shift and go to state 159

state 117

    (108) vector_content -> VECT empty . PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    PATHSEP         shift and go to state 161


state 118

    (113) types_vector -> LESST . DATATYPES GREATER
    (114) types_vector -> LESST . NUMDATATYPES GREATER

    DATATYPES       shift and go to state 162
    NUMDATATYPES    shift and go to state 163


state 119

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO . LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE

    LLAVEIZ         shift and go to state 164


state 120

    (107) vector_content -> VECTMACRO LLAVEIZ . vector_elements LLAVEDER ENDLINE
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    vector_elements                shift and go to state 165
    element                        shift and go to state 166
    expresion                      shift and go to state 167

state 121

    (83) art_exp -> U8 signo_arit U8 .
    (81) art_exp -> U8 . signo_arit VARIABLE
    (83) art_exp -> U8 . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 83 (art_exp -> U8 signo_arit U8 .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 148

state 122

    (79) op_mat -> U8 signo_arit art_exp .

    ENDLINE         reduce using rule 79 (op_mat -> U8 signo_arit art_exp .)


state 123

    (81) art_exp -> U8 signo_arit VARIABLE .
    (80) art_exp -> VARIABLE . signo_arit VARIABLE
    (82) art_exp -> VARIABLE . signo_arit U8
    (84) signo_arit -> . MAS
    (85) signo_arit -> . MENOS
    (86) signo_arit -> . MULT
    (87) signo_arit -> . DIVISION
    (88) signo_arit -> . MODULO

    ENDLINE         reduce using rule 81 (art_exp -> U8 signo_arit VARIABLE .)
    MAS             shift and go to state 59
    MENOS           shift and go to state 60
    MULT            shift and go to state 61
    DIVISION        shift and go to state 62
    MODULO          shift and go to state 63

    signo_arit                     shift and go to state 147

state 124

    (97) read_data -> IO empty PATHSEP . empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    STDIN           reduce using rule 95 (empty -> .)

    empty                          shift and go to state 168

state 125

    (99) function -> FUNCTION VARIABLE LPAREN . arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> FUNCTION VARIABLE LPAREN . RPAREN LLAVEIZ rust LLAVEDER
    (101) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (102) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    RPAREN          shift and go to state 171
    VARIABLE        shift and go to state 169

    arguments                      shift and go to state 170

state 126

    (115) declare_vector -> LET MUT VARIABLE . ASIGNATION_TYPE
    (29) let_asig_sintipo -> LET MUT VARIABLE .
    (31) var_tipo -> VARIABLE .
    (32) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 29 (let_asig_sintipo -> LET MUT VARIABLE .)
    ASIGNATION_TYPE shift and go to state 172
    ASIGNAR         reduce using rule 29 (let_asig_sintipo -> LET MUT VARIABLE .)

  ! ASIGNAR         [ reduce using rule 31 (var_tipo -> VARIABLE .) ]


state 127

    (28) let_asig -> LET MUT var_tipo .

    ASIGNAR         reduce using rule 28 (let_asig -> LET MUT var_tipo .)


state 128

    (116) declare_vector -> LET VARIABLE ASIGNATION_TYPE .
    (32) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    VECT            reduce using rule 116 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    ASIGNAR         reduce using rule 116 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    VECTMACRO       reduce using rule 116 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 173

state 129

    (18) asignacion -> declarador ASIGNAR expresion ENDLINE .

    $end            reduce using rule 18 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    LLAVEDER        reduce using rule 18 (asignacion -> declarador ASIGNAR expresion ENDLINE .)


state 130

    (49) conditional_asigned -> declarador ASIGNAR conditional ENDLINE .

    $end            reduce using rule 49 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    LLAVEDER        reduce using rule 49 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)


state 131

    (21) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .

    $end            reduce using rule 21 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    LLAVEDER        reduce using rule 21 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)


state 132

    (44) hashset -> HASHSET empty . PATHSEP empty NEWFUNC

    PATHSEP         shift and go to state 174


state 133

    (90) slice_exp -> AND empty . VARIABLE empty BRACKETL rango BRACKETR

    VARIABLE        shift and go to state 175


state 134

    (38) prints -> PRINTS empty LPAREN print_expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 176


state 135

    (39) print_expresion -> STRING .
    (40) print_expresion -> STRING . COMMA print_args

    RPAREN          reduce using rule 39 (print_expresion -> STRING .)
    COMMA           shift and go to state 177


state 136

    (50) conditional -> if_type validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 178


state 137

    (55) validations -> comparison ANDAND validations .

    LLAVEIZ         reduce using rule 55 (validations -> comparison ANDAND validations .)


state 138

    (56) validations -> comparison OROR validations .

    LLAVEIZ         reduce using rule 56 (validations -> comparison OROR validations .)


state 139

    (57) comparison -> VARIABLE signo_comp VARIABLE .

    ANDAND          reduce using rule 57 (comparison -> VARIABLE signo_comp VARIABLE .)
    OROR            reduce using rule 57 (comparison -> VARIABLE signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 57 (comparison -> VARIABLE signo_comp VARIABLE .)


state 140

    (58) comparison -> VARIABLE signo_comp U8 .

    ANDAND          reduce using rule 58 (comparison -> VARIABLE signo_comp U8 .)
    OROR            reduce using rule 58 (comparison -> VARIABLE signo_comp U8 .)
    LLAVEIZ         reduce using rule 58 (comparison -> VARIABLE signo_comp U8 .)


state 141

    (59) comparison -> U8 signo_comp VARIABLE .

    ANDAND          reduce using rule 59 (comparison -> U8 signo_comp VARIABLE .)
    OROR            reduce using rule 59 (comparison -> U8 signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 59 (comparison -> U8 signo_comp VARIABLE .)


state 142

    (66) f_comparacion -> VARIABLE .

    LLAVEIZ         reduce using rule 66 (f_comparacion -> VARIABLE .)


state 143

    (67) for_loop -> FOR VARIABLE IN f_comparacion . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 179


state 144

    (65) f_comparacion -> rango .

    LLAVEIZ         reduce using rule 65 (f_comparacion -> rango .)


state 145

    (89) rango -> U8 . DOT DOT U8

    DOT             shift and go to state 180


state 146

    (120) vector_methods -> VARIABLE empty DOT empty . PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> VARIABLE empty DOT empty . POP_VEC LPAREN RPAREN
    (91) slice_get -> VARIABLE empty DOT empty . GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> VARIABLE empty DOT empty . CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (47) hashset_insert -> VARIABLE empty DOT empty . INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> VARIABLE empty DOT empty . UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    PUSH_VEC        shift and go to state 181
    POP_VEC         shift and go to state 182
    GET_SLICE       shift and go to state 183
    CONTAINS_SLICE  shift and go to state 184
    INSERT_HASH     shift and go to state 185
    UNION_HASH      shift and go to state 186


state 147

    (80) art_exp -> VARIABLE signo_arit . VARIABLE
    (82) art_exp -> VARIABLE signo_arit . U8

    VARIABLE        shift and go to state 187
    U8              shift and go to state 188


state 148

    (81) art_exp -> U8 signo_arit . VARIABLE
    (83) art_exp -> U8 signo_arit . U8

    VARIABLE        shift and go to state 190
    U8              shift and go to state 189


state 149

    (75) sent_stru -> TUPLE LPAREN argumentos_tipo . RPAREN ENDLINE

    RPAREN          shift and go to state 191


state 150

    (72) argumentos_tipo -> tipos .
    (73) argumentos_tipo -> tipos . COMMA argumentos_tipo

    RPAREN          reduce using rule 72 (argumentos_tipo -> tipos .)
    COMMA           shift and go to state 192


state 151

    (122) tipos -> DATATYPES .

    COMMA           reduce using rule 122 (tipos -> DATATYPES .)
    RPAREN          reduce using rule 122 (tipos -> DATATYPES .)
    ASIGNAR         reduce using rule 122 (tipos -> DATATYPES .)
    LLAVEDER        reduce using rule 122 (tipos -> DATATYPES .)


state 152

    (123) tipos -> NUMDATATYPES .

    COMMA           reduce using rule 123 (tipos -> NUMDATATYPES .)
    RPAREN          reduce using rule 123 (tipos -> NUMDATATYPES .)
    ASIGNAR         reduce using rule 123 (tipos -> NUMDATATYPES .)
    LLAVEDER        reduce using rule 123 (tipos -> NUMDATATYPES .)


state 153

    (69) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 193


state 154

    (76) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos . LLAVEDER

    LLAVEDER        shift and go to state 194


state 155

    (71) argumentos_juntos -> PUB . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 195


state 156

    (96) while_loop -> WHILE validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 196


state 157

    (108) vector_content -> VECT . empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
    (95) empty -> .

    PATHSEP         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 117

state 158

    (103) empty_vector -> declare_vector VECT types_vector empty_vec .

    $end            reduce using rule 103 (empty_vector -> declare_vector VECT types_vector empty_vec .)
    LLAVEDER        reduce using rule 103 (empty_vector -> declare_vector VECT types_vector empty_vec .)


state 159

    (104) data_vector -> declare_vector VECT types_vector vector_content .

    $end            reduce using rule 104 (data_vector -> declare_vector VECT types_vector vector_content .)
    LLAVEDER        reduce using rule 104 (data_vector -> declare_vector VECT types_vector vector_content .)


state 160

    (117) empty_vec -> ASIGNAR . VECT PATHSEP NEWFUNC ENDLINE
    (118) empty_vec -> ASIGNAR . VECTMACRO BRACKETL BRACKETR ENDLINE
    (119) empty_vec -> ASIGNAR . VECT PATHSEP FROM LPAREN RPAREN ENDLINE

    VECT            shift and go to state 197
    VECTMACRO       shift and go to state 198


state 161

    (108) vector_content -> VECT empty PATHSEP . empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE
    (95) empty -> .

    FROM            reduce using rule 95 (empty -> .)

    empty                          shift and go to state 199

state 162

    (113) types_vector -> LESST DATATYPES . GREATER

    GREATER         shift and go to state 200


state 163

    (114) types_vector -> LESST NUMDATATYPES . GREATER

    GREATER         shift and go to state 201


state 164

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ . element_type COMMA vector_elements LLAVEDER ENDLINE
    (112) element_type -> . U8 NUMDATATYPES

    U8              shift and go to state 203

    element_type                   shift and go to state 202

state 165

    (107) vector_content -> VECTMACRO LLAVEIZ vector_elements . LLAVEDER ENDLINE

    LLAVEDER        shift and go to state 204


state 166

    (109) vector_elements -> element .
    (110) vector_elements -> element . COMMA vector_elements

    LLAVEDER        reduce using rule 109 (vector_elements -> element .)
    COMMA           shift and go to state 205


state 167

    (111) element -> expresion .

    COMMA           reduce using rule 111 (element -> expresion .)
    LLAVEDER        reduce using rule 111 (element -> expresion .)


state 168

    (97) read_data -> IO empty PATHSEP empty . STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    STDIN           shift and go to state 206


state 169

    (101) arguments -> VARIABLE . ASIGNATION_TYPE tipos
    (102) arguments -> VARIABLE . ASIGNATION_TYPE tipos COMMA arguments

    ASIGNATION_TYPE shift and go to state 207


state 170

    (99) function -> FUNCTION VARIABLE LPAREN arguments . RPAREN LLAVEIZ rust LLAVEDER

    RPAREN          shift and go to state 208


state 171

    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 209


state 172

    (115) declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .
    (32) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    VECT            reduce using rule 115 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    ASIGNAR         reduce using rule 115 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    VECTMACRO       reduce using rule 115 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 173

state 173

    (32) var_tipo -> VARIABLE ASIGNATION_TYPE tipos .

    ASIGNAR         reduce using rule 32 (var_tipo -> VARIABLE ASIGNATION_TYPE tipos .)


state 174

    (44) hashset -> HASHSET empty PATHSEP . empty NEWFUNC
    (95) empty -> .

    NEWFUNC         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 210

state 175

    (90) slice_exp -> AND empty VARIABLE . empty BRACKETL rango BRACKETR
    (95) empty -> .

    BRACKETL        reduce using rule 95 (empty -> .)

    empty                          shift and go to state 211

state 176

    (38) prints -> PRINTS empty LPAREN print_expresion RPAREN . empty ENDLINE
    (95) empty -> .

    ENDLINE         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 212

state 177

    (40) print_expresion -> STRING COMMA . print_args
    (41) print_args -> . print_datos COMMA print_args
    (42) print_args -> . print_datos
    (43) print_datos -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    print_args                     shift and go to state 213
    print_datos                    shift and go to state 214
    expresion                      shift and go to state 215

state 178

    (50) conditional -> if_type validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 50 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    ENDLINE         reduce using rule 50 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 50 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)


state 179

    (67) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 216
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 180

    (89) rango -> U8 DOT . DOT U8

    DOT             shift and go to state 217


state 181

    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC . LPAREN expresion RPAREN

    LPAREN          shift and go to state 218


state 182

    (121) vector_methods -> VARIABLE empty DOT empty POP_VEC . LPAREN RPAREN

    LPAREN          shift and go to state 219


state 183

    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE . empty LPAREN valor_get RPAREN
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 220

state 184

    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE . empty LPAREN AND U8 RPAREN
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 221

state 185

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH . empty LPAREN expresion RPAREN empty ENDLINE
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 222

state 186

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH . empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (95) empty -> .

    LPAREN          reduce using rule 95 (empty -> .)

    empty                          shift and go to state 223

state 187

    (80) art_exp -> VARIABLE signo_arit VARIABLE .

    ENDLINE         reduce using rule 80 (art_exp -> VARIABLE signo_arit VARIABLE .)


state 188

    (82) art_exp -> VARIABLE signo_arit U8 .

    ENDLINE         reduce using rule 82 (art_exp -> VARIABLE signo_arit U8 .)


state 189

    (83) art_exp -> U8 signo_arit U8 .

    ENDLINE         reduce using rule 83 (art_exp -> U8 signo_arit U8 .)


state 190

    (81) art_exp -> U8 signo_arit VARIABLE .

    ENDLINE         reduce using rule 81 (art_exp -> U8 signo_arit VARIABLE .)


state 191

    (75) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN . ENDLINE

    ENDLINE         shift and go to state 224


state 192

    (73) argumentos_tipo -> tipos COMMA . argumentos_tipo
    (72) argumentos_tipo -> . tipos
    (73) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 150
    argumentos_tipo                shift and go to state 225

state 193

    (69) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos
    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 226

state 194

    (76) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .

    $end            reduce using rule 76 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    LLAVEDER        reduce using rule 76 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)


state 195

    (71) argumentos_juntos -> PUB VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 227


state 196

    (96) while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 96 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 96 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)


state 197

    (117) empty_vec -> ASIGNAR VECT . PATHSEP NEWFUNC ENDLINE
    (119) empty_vec -> ASIGNAR VECT . PATHSEP FROM LPAREN RPAREN ENDLINE

    PATHSEP         shift and go to state 228


state 198

    (118) empty_vec -> ASIGNAR VECTMACRO . BRACKETL BRACKETR ENDLINE

    BRACKETL        shift and go to state 229


state 199

    (108) vector_content -> VECT empty PATHSEP empty . FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    FROM            shift and go to state 230


state 200

    (113) types_vector -> LESST DATATYPES GREATER .

    ASIGNAR         reduce using rule 113 (types_vector -> LESST DATATYPES GREATER .)
    VECTMACRO       reduce using rule 113 (types_vector -> LESST DATATYPES GREATER .)
    VECT            reduce using rule 113 (types_vector -> LESST DATATYPES GREATER .)


state 201

    (114) types_vector -> LESST NUMDATATYPES GREATER .

    ASIGNAR         reduce using rule 114 (types_vector -> LESST NUMDATATYPES GREATER .)
    VECTMACRO       reduce using rule 114 (types_vector -> LESST NUMDATATYPES GREATER .)
    VECT            reduce using rule 114 (types_vector -> LESST NUMDATATYPES GREATER .)


state 202

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type . COMMA vector_elements LLAVEDER ENDLINE

    COMMA           shift and go to state 231


state 203

    (112) element_type -> U8 . NUMDATATYPES

    NUMDATATYPES    shift and go to state 232


state 204

    (107) vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER . ENDLINE

    ENDLINE         shift and go to state 233


state 205

    (110) vector_elements -> element COMMA . vector_elements
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    element                        shift and go to state 166
    vector_elements                shift and go to state 234
    expresion                      shift and go to state 167

state 206

    (97) read_data -> IO empty PATHSEP empty STDIN . LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 235


state 207

    (101) arguments -> VARIABLE ASIGNATION_TYPE . tipos
    (102) arguments -> VARIABLE ASIGNATION_TYPE . tipos COMMA arguments
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 236

state 208

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 237


state 209

    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 238
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 210

    (44) hashset -> HASHSET empty PATHSEP empty . NEWFUNC

    NEWFUNC         shift and go to state 239


state 211

    (90) slice_exp -> AND empty VARIABLE empty . BRACKETL rango BRACKETR

    BRACKETL        shift and go to state 240


state 212

    (38) prints -> PRINTS empty LPAREN print_expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 241


state 213

    (40) print_expresion -> STRING COMMA print_args .

    RPAREN          reduce using rule 40 (print_expresion -> STRING COMMA print_args .)


state 214

    (41) print_args -> print_datos . COMMA print_args
    (42) print_args -> print_datos .

    COMMA           shift and go to state 242
    RPAREN          reduce using rule 42 (print_args -> print_datos .)


state 215

    (43) print_datos -> expresion .

    COMMA           reduce using rule 43 (print_datos -> expresion .)
    RPAREN          reduce using rule 43 (print_datos -> expresion .)


state 216

    (67) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 243


state 217

    (89) rango -> U8 DOT DOT . U8

    U8              shift and go to state 244


state 218

    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN . expresion RPAREN
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    expresion                      shift and go to state 245

state 219

    (121) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN . RPAREN

    RPAREN          shift and go to state 246


state 220

    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty . LPAREN valor_get RPAREN

    LPAREN          shift and go to state 247


state 221

    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty . LPAREN AND U8 RPAREN

    LPAREN          shift and go to state 248


state 222

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty . LPAREN expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 249


state 223

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty . LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    LPAREN          shift and go to state 250


state 224

    (75) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .

    $end            reduce using rule 75 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 75 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)


state 225

    (73) argumentos_tipo -> tipos COMMA argumentos_tipo .

    RPAREN          reduce using rule 73 (argumentos_tipo -> tipos COMMA argumentos_tipo .)


state 226

    (69) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .
    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    LLAVEDER        reduce using rule 69 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 251


state 227

    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (122) tipos -> . DATATYPES
    (123) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 151
    NUMDATATYPES    shift and go to state 152

    tipos                          shift and go to state 252

state 228

    (117) empty_vec -> ASIGNAR VECT PATHSEP . NEWFUNC ENDLINE
    (119) empty_vec -> ASIGNAR VECT PATHSEP . FROM LPAREN RPAREN ENDLINE

    NEWFUNC         shift and go to state 253
    FROM            shift and go to state 254


state 229

    (118) empty_vec -> ASIGNAR VECTMACRO BRACKETL . BRACKETR ENDLINE

    BRACKETR        shift and go to state 255


state 230

    (108) vector_content -> VECT empty PATHSEP empty FROM . LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    LPAREN          shift and go to state 256


state 231

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA . vector_elements LLAVEDER ENDLINE
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    vector_elements                shift and go to state 257
    element                        shift and go to state 166
    expresion                      shift and go to state 167

state 232

    (112) element_type -> U8 NUMDATATYPES .

    COMMA           reduce using rule 112 (element_type -> U8 NUMDATATYPES .)


state 233

    (107) vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE .

    $end            reduce using rule 107 (vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE .)
    LLAVEDER        reduce using rule 107 (vector_content -> VECTMACRO LLAVEIZ vector_elements LLAVEDER ENDLINE .)


state 234

    (110) vector_elements -> element COMMA vector_elements .

    LLAVEDER        reduce using rule 110 (vector_elements -> element COMMA vector_elements .)


state 235

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN . RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    RPAREN          shift and go to state 258


state 236

    (101) arguments -> VARIABLE ASIGNATION_TYPE tipos .
    (102) arguments -> VARIABLE ASIGNATION_TYPE tipos . COMMA arguments

    RPAREN          reduce using rule 101 (arguments -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 259


state 237

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ . rust LLAVEDER
    (1) rust -> . asignacion
    (2) rust -> . asignacion_sintipo
    (3) rust -> . prints
    (4) rust -> . hashfunc
    (5) rust -> . conditional
    (6) rust -> . conditional_asigned
    (7) rust -> . for_loop
    (8) rust -> . struct_s
    (9) rust -> . while_loop
    (10) rust -> . empty_vector
    (11) rust -> . vector_methods
    (12) rust -> . data_vector
    (13) rust -> . slice_get
    (14) rust -> . slice_contains
    (15) rust -> . read_data
    (16) rust -> . function
    (17) rust -> . empty_function
    (18) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (19) asignacion -> . other_operators ENDLINE
    (20) asignacion -> . op_mat ENDLINE
    (21) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (38) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (45) hashfunc -> . hashset_insert
    (46) hashfunc -> . hashset_union
    (50) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (49) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (67) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (68) struct_s -> . STRUCT sent_stru
    (96) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (103) empty_vector -> . declare_vector VECT types_vector empty_vec
    (120) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (121) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (104) data_vector -> . declare_vector VECT types_vector vector_content
    (105) data_vector -> . declare_vector vector_content
    (106) data_vector -> . declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE
    (91) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (94) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (97) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (99) function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (100) empty_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (23) declarador -> . VARIABLE
    (24) declarador -> . let_asig
    (22) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (77) op_mat -> . art_exp
    (78) op_mat -> . VARIABLE signo_arit art_exp
    (79) op_mat -> . U8 signo_arit art_exp
    (25) declarador_sintipo -> . VARIABLE
    (26) declarador_sintipo -> . let_asig_sintipo
    (47) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (48) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (51) if_type -> . IF
    (52) if_type -> . ELSE IF
    (53) if_type -> . ELSE
    (115) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (116) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (27) let_asig -> . LET var_tipo
    (28) let_asig -> . LET MUT var_tipo
    (80) art_exp -> . VARIABLE signo_arit VARIABLE
    (81) art_exp -> . U8 signo_arit VARIABLE
    (82) art_exp -> . VARIABLE signo_arit U8
    (83) art_exp -> . U8 signo_arit U8
    (29) let_asig_sintipo -> . LET MUT VARIABLE
    (30) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 23
    FOR             shift and go to state 27
    STRUCT          shift and go to state 29
    WHILE           shift and go to state 30
    VARIABLE        shift and go to state 28
    IO              shift and go to state 33
    FUNCTION        shift and go to state 34
    U8              shift and go to state 32
    IF              shift and go to state 38
    ELSE            shift and go to state 39
    LET             shift and go to state 40

    rust                           shift and go to state 260
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    empty_function                 shift and go to state 18
    declarador                     shift and go to state 19
    other_operators                shift and go to state 20
    op_mat                         shift and go to state 21
    declarador_sintipo             shift and go to state 22
    hashset_insert                 shift and go to state 24
    hashset_union                  shift and go to state 25
    if_type                        shift and go to state 26
    declare_vector                 shift and go to state 31
    let_asig                       shift and go to state 35
    art_exp                        shift and go to state 36
    let_asig_sintipo               shift and go to state 37

state 238

    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 261


state 239

    (44) hashset -> HASHSET empty PATHSEP empty NEWFUNC .

    ENDLINE         reduce using rule 44 (hashset -> HASHSET empty PATHSEP empty NEWFUNC .)


state 240

    (90) slice_exp -> AND empty VARIABLE empty BRACKETL . rango BRACKETR
    (89) rango -> . U8 DOT DOT U8

    U8              shift and go to state 145

    rango                          shift and go to state 262

state 241

    (38) prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .

    $end            reduce using rule 38 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 38 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)


state 242

    (41) print_args -> print_datos COMMA . print_args
    (41) print_args -> . print_datos COMMA print_args
    (42) print_args -> . print_datos
    (43) print_datos -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    print_datos                    shift and go to state 214
    print_args                     shift and go to state 263
    expresion                      shift and go to state 215

state 243

    (67) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 67 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 67 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)


state 244

    (89) rango -> U8 DOT DOT U8 .

    LLAVEIZ         reduce using rule 89 (rango -> U8 DOT DOT U8 .)
    BRACKETR        reduce using rule 89 (rango -> U8 DOT DOT U8 .)
    RPAREN          reduce using rule 89 (rango -> U8 DOT DOT U8 .)


state 245

    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion . RPAREN

    RPAREN          shift and go to state 264


state 246

    (121) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .

    $end            reduce using rule 121 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    LLAVEDER        reduce using rule 121 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)


state 247

    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN . valor_get RPAREN
    (92) valor_get -> . rango
    (93) valor_get -> . U8
    (89) rango -> . U8 DOT DOT U8

    U8              shift and go to state 267

    valor_get                      shift and go to state 265
    rango                          shift and go to state 266

state 248

    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN . AND U8 RPAREN

    AND             shift and go to state 268


state 249

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN . expresion RPAREN empty ENDLINE
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    expresion                      shift and go to state 269

state 250

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN . AND empty VARIABLE RPAREN empty ENDLINE

    AND             shift and go to state 270


state 251

    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (69) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (71) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 153
    PUB             shift and go to state 155

    argumentos_juntos              shift and go to state 271

state 252

    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    COMMA           shift and go to state 272


state 253

    (117) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC . ENDLINE

    ENDLINE         shift and go to state 273


state 254

    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM . LPAREN RPAREN ENDLINE

    LPAREN          shift and go to state 274


state 255

    (118) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR . ENDLINE

    ENDLINE         shift and go to state 275


state 256

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN . LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE

    LLAVEIZ         shift and go to state 276


state 257

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements . LLAVEDER ENDLINE

    LLAVEDER        shift and go to state 277


state 258

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN . empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    DOT             reduce using rule 95 (empty -> .)

    empty                          shift and go to state 278

state 259

    (102) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA . arguments
    (101) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (102) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    VARIABLE        shift and go to state 169

    arguments                      shift and go to state 279

state 260

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 280


state 261

    (100) empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 100 (empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 100 (empty_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)


state 262

    (90) slice_exp -> AND empty VARIABLE empty BRACKETL rango . BRACKETR

    BRACKETR        shift and go to state 281


state 263

    (41) print_args -> print_datos COMMA print_args .

    RPAREN          reduce using rule 41 (print_args -> print_datos COMMA print_args .)


state 264

    (120) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .

    $end            reduce using rule 120 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    LLAVEDER        reduce using rule 120 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)


state 265

    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get . RPAREN

    RPAREN          shift and go to state 282


state 266

    (92) valor_get -> rango .

    RPAREN          reduce using rule 92 (valor_get -> rango .)


state 267

    (93) valor_get -> U8 .
    (89) rango -> U8 . DOT DOT U8

    RPAREN          reduce using rule 93 (valor_get -> U8 .)
    DOT             shift and go to state 180


state 268

    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND . U8 RPAREN

    U8              shift and go to state 283


state 269

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 284


state 270

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND . empty VARIABLE RPAREN empty ENDLINE
    (95) empty -> .

    VARIABLE        reduce using rule 95 (empty -> .)

    empty                          shift and go to state 285

state 271

    (70) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 70 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)


state 272

    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (69) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (70) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (71) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 153
    PUB             shift and go to state 155

    argumentos_juntos              shift and go to state 286

state 273

    (117) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .

    $end            reduce using rule 117 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    LLAVEDER        reduce using rule 117 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)


state 274

    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN . RPAREN ENDLINE

    RPAREN          shift and go to state 287


state 275

    (118) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .

    $end            reduce using rule 118 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    LLAVEDER        reduce using rule 118 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)


state 276

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ . vector_elements LLAVEDER RPAREN ENDLINE
    (109) vector_elements -> . element
    (110) vector_elements -> . element COMMA vector_elements
    (111) element -> . expresion
    (124) expresion -> . STRING
    (125) expresion -> . U8
    (126) expresion -> . F32
    (127) expresion -> . VARIABLE

    STRING          shift and go to state 82
    U8              shift and go to state 83
    F32             shift and go to state 84
    VARIABLE        shift and go to state 85

    vector_elements                shift and go to state 288
    element                        shift and go to state 166
    expresion                      shift and go to state 167

state 277

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER . ENDLINE

    ENDLINE         shift and go to state 289


state 278

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty . DOT empty READ LPAREN reference RPAREN ENDLINE

    DOT             shift and go to state 290


state 279

    (102) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .

    RPAREN          reduce using rule 102 (arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .)


state 280

    (99) function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 99 (function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 99 (function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)


state 281

    (90) slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .

    ENDLINE         reduce using rule 90 (slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .)


state 282

    (91) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .

    $end            reduce using rule 91 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    LLAVEDER        reduce using rule 91 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)


state 283

    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 . RPAREN

    RPAREN          shift and go to state 291


state 284

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN . empty ENDLINE
    (95) empty -> .

    ENDLINE         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 292

state 285

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty . VARIABLE RPAREN empty ENDLINE

    VARIABLE        shift and go to state 293


state 286

    (71) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 71 (argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)


state 287

    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN . ENDLINE

    ENDLINE         shift and go to state 294


state 288

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements . LLAVEDER RPAREN ENDLINE

    LLAVEDER        shift and go to state 295


state 289

    (106) data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE .

    $end            reduce using rule 106 (data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE .)
    LLAVEDER        reduce using rule 106 (data_vector -> declare_vector ASIGNAR VECTMACRO LLAVEIZ element_type COMMA vector_elements LLAVEDER ENDLINE .)


state 290

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT . empty READ LPAREN reference RPAREN ENDLINE
    (95) empty -> .

    READ            reduce using rule 95 (empty -> .)

    empty                          shift and go to state 296

state 291

    (94) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .

    $end            reduce using rule 94 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    LLAVEDER        reduce using rule 94 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)


state 292

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 297


state 293

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE . RPAREN empty ENDLINE

    RPAREN          shift and go to state 298


state 294

    (119) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .

    $end            reduce using rule 119 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 119 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)


state 295

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER . RPAREN ENDLINE

    RPAREN          shift and go to state 299


state 296

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty . READ LPAREN reference RPAREN ENDLINE

    READ            shift and go to state 300


state 297

    (47) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .

    $end            reduce using rule 47 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 47 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)


state 298

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN . empty ENDLINE
    (95) empty -> .

    ENDLINE         reduce using rule 95 (empty -> .)

    empty                          shift and go to state 301

state 299

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN . ENDLINE

    ENDLINE         shift and go to state 302


state 300

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ . LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 303


state 301

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 304


state 302

    (108) vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE .

    $end            reduce using rule 108 (vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 108 (vector_content -> VECT empty PATHSEP empty FROM LPAREN LLAVEIZ vector_elements LLAVEDER RPAREN ENDLINE .)


state 303

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN . reference RPAREN ENDLINE
    (98) reference -> . AND empty MUT VARIABLE

    AND             shift and go to state 306

    reference                      shift and go to state 305

state 304

    (48) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .

    $end            reduce using rule 48 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 48 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)


state 305

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference . RPAREN ENDLINE

    RPAREN          shift and go to state 307


state 306

    (98) reference -> AND . empty MUT VARIABLE
    (95) empty -> .

    MUT             reduce using rule 95 (empty -> .)

    empty                          shift and go to state 308

state 307

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN . ENDLINE

    ENDLINE         shift and go to state 309


state 308

    (98) reference -> AND empty . MUT VARIABLE

    MUT             shift and go to state 310


state 309

    (97) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .

    $end            reduce using rule 97 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 97 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)


state 310

    (98) reference -> AND empty MUT . VARIABLE

    VARIABLE        shift and go to state 311


state 311

    (98) reference -> AND empty MUT VARIABLE .

    RPAREN          reduce using rule 98 (reference -> AND empty MUT VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASIGNAR in state 28 resolved as shift
WARNING: reduce/reduce conflict in state 28 resolved using rule (declarador -> VARIABLE)
WARNING: rejected rule (declarador_sintipo -> VARIABLE) in state 28
WARNING: reduce/reduce conflict in state 78 resolved using rule (let_asig_sintipo -> LET VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 78
WARNING: reduce/reduce conflict in state 126 resolved using rule (let_asig_sintipo -> LET MUT VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 126
WARNING: Rule (declarador_sintipo -> VARIABLE) is never reduced
WARNING: Rule (var_tipo -> VARIABLE) is never reduced
