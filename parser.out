Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AS
    ASYNC
    AWAIT
    BREAK
    B_FALSE
    B_TRUE
    CONST
    CONTIN
    CRATE
    DOLLAR
    DOTDOTDOT
    DYN
    ENUM
    ERRORPROP
    EXTERN
    IMPL
    LESSEQ
    LOOP
    MATCH
    MAYOR
    MAYORIGUAL
    MOD
    MOVE
    NOT
    NUMBER
    OR
    REF
    SELF
    SELFLOWERCASE
    STATIC
    SUPER
    TRAIT
    TYPE
    UNSAFE
    USE
    WHERE

Grammar

Rule 0     S' -> rust
Rule 1     op_mat -> ope_u8
Rule 2     op_mat -> ope_f32
Rule 3     op_mat -> ope_i8
Rule 4     rust -> asignacion
Rule 5     rust -> asignacion_sintipo
Rule 6     rust -> prints
Rule 7     rust -> hashfunc
Rule 8     rust -> conditional
Rule 9     rust -> conditional_asigned
Rule 10    rust -> for_loop
Rule 11    rust -> struct_s
Rule 12    rust -> while_loop
Rule 13    rust -> empty_vector
Rule 14    rust -> vector_methods
Rule 15    rust -> data_vector
Rule 16    rust -> slice_get
Rule 17    rust -> slice_contains
Rule 18    rust -> read_data
Rule 19    rust -> function
Rule 20    ope_u8 -> U8 signo_arit U8
Rule 21    ope_u8 -> U8 signo_arit VARIABLE
Rule 22    ope_u8 -> VARIABLE signo_arit U8
Rule 23    ope_u8 -> U8 signo_arit ope_u8
Rule 24    ope_u8 -> VARIABLE signo_arit ope_u8
Rule 25    ope_f32 -> F32 signo_arit F32
Rule 26    ope_f32 -> F32 signo_arit VARIABLE
Rule 27    ope_f32 -> VARIABLE signo_arit F32
Rule 28    ope_f32 -> F32 signo_arit ope_f32
Rule 29    ope_f32 -> VARIABLE signo_arit ope_f32
Rule 30    ope_i8 -> I8 signo_arit I8
Rule 31    ope_i8 -> I8 signo_arit VARIABLE
Rule 32    ope_i8 -> VARIABLE signo_arit I8
Rule 33    ope_i8 -> I8 signo_arit ope_i8
Rule 34    ope_i8 -> VARIABLE signo_arit ope_i8
Rule 35    asignacion -> declarador ASIGNAR expresion ENDLINE
Rule 36    asignacion -> other_operators ENDLINE
Rule 37    asignacion -> op_mat ENDLINE
Rule 38    asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
Rule 39    other_operators -> VARIABLE oper_asig expresion_sintipo
Rule 40    declarador -> VARIABLE
Rule 41    declarador -> let_asig
Rule 42    declarador_sintipo -> VARIABLE
Rule 43    declarador_sintipo -> let_asig_sintipo
Rule 44    let_asig -> LET var_tipo
Rule 45    let_asig -> LET MUT var_tipo
Rule 46    let_asig_sintipo -> LET MUT VARIABLE
Rule 47    let_asig_sintipo -> LET VARIABLE
Rule 48    var_tipo -> VARIABLE
Rule 49    var_tipo -> VARIABLE ASIGNATION_TYPE tipos
Rule 50    oper_asig -> ASIGNAR
Rule 51    oper_asig -> PLUSEQ
Rule 52    oper_asig -> MINUSEQ
Rule 53    oper_asig -> STAREQ
Rule 54    oper_asig -> SLASHEQ
Rule 55    prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
Rule 56    print_expresion -> STRING
Rule 57    print_expresion -> STRING COMMA print_args
Rule 58    print_args -> print_datos COMMA print_args
Rule 59    print_args -> print_datos
Rule 60    print_datos -> expresion
Rule 61    hashset -> HASHSET empty PATHSEP empty NEWFUNC
Rule 62    hashfunc -> hashset_insert
Rule 63    hashfunc -> hashset_union
Rule 64    hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
Rule 65    hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
Rule 66    conditional_asigned -> declarador ASIGNAR conditional ENDLINE
Rule 67    conditional -> if_type validations LLAVEIZ rust LLAVEDER
Rule 68    if_type -> IF
Rule 69    if_type -> ELSE IF
Rule 70    if_type -> ELSE
Rule 71    validations -> comparison
Rule 72    validations -> comparison ANDAND validations
Rule 73    validations -> comparison OROR validations
Rule 74    comparison -> VARIABLE signo_comp VARIABLE
Rule 75    comparison -> VARIABLE signo_comp U8
Rule 76    comparison -> U8 signo_comp VARIABLE
Rule 77    signo_comp -> GREATER
Rule 78    signo_comp -> LESST
Rule 79    signo_comp -> GREATEQ
Rule 80    signo_comp -> EQUAL
Rule 81    signo_comp -> DIFFERENT
Rule 82    f_comparacion -> rango
Rule 83    f_comparacion -> VARIABLE
Rule 84    for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
Rule 85    struct_s -> STRUCT sent_stru
Rule 86    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos
Rule 87    argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 88    argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
Rule 89    argumentos_tipo -> tipos
Rule 90    argumentos_tipo -> tipos COMMA argumentos_tipo
Rule 91    sent_stru -> UNIT ENDLINE
Rule 92    sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
Rule 93    sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER
Rule 94    signo_arit -> MAS
Rule 95    signo_arit -> MENOS
Rule 96    signo_arit -> MULT
Rule 97    signo_arit -> DIVISION
Rule 98    signo_arit -> MODULO
Rule 99    rango -> U8 DOT DOT U8
Rule 100   slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR
Rule 101   slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
Rule 102   valor_get -> rango
Rule 103   valor_get -> U8
Rule 104   slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
Rule 105   empty -> <empty>
Rule 106   while_loop -> WHILE validations LLAVEIZ rust LLAVEDER
Rule 107   read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
Rule 108   reference -> AND empty MUT VARIABLE
Rule 109   function -> no_return_function
Rule 110   function -> return_function
Rule 111   return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
Rule 112   return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
Rule 113   return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
Rule 114   no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
Rule 115   no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
Rule 116   arguments -> VARIABLE ASIGNATION_TYPE tipos
Rule 117   arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments
Rule 118   return -> RETURN expresion ENDLINE
Rule 119   return -> expresion
Rule 120   empty_vector -> declare_vector types_vector empty_vec
Rule 121   data_vector -> declare_vector types_vector vector_content
Rule 122   data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
Rule 123   vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE
Rule 124   vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE
Rule 125   vect_list -> BRACKETL vector_elements BRACKETR
Rule 126   vector_elements -> expresion
Rule 127   vector_elements -> expresion COMMA vector_elements
Rule 128   element_type -> U8 empty NUMDATATYPES
Rule 129   types_vector -> VECT empty LESST DATATYPES GREATER
Rule 130   types_vector -> VECT empty LESST NUMDATATYPES GREATER
Rule 131   declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE
Rule 132   declare_vector -> LET VARIABLE ASIGNATION_TYPE
Rule 133   empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
Rule 134   empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
Rule 135   empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
Rule 136   vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
Rule 137   vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
Rule 138   tipos -> DATATYPES
Rule 139   tipos -> NUMDATATYPES
Rule 140   expresion -> STRING
Rule 141   expresion -> U8
Rule 142   expresion -> F32
Rule 143   expresion -> VARIABLE
Rule 144   expresion -> op_mat
Rule 145   expresion_sintipo -> hashset
Rule 146   expresion_sintipo -> slice_exp
Rule 147   expresion_sintipo -> expresion

Terminals, with rules where they appear

AND                  : 65 100 104 108
ANDAND               : 72
ARROW                : 111 112 113
AS                   : 
ASIGNAR              : 35 38 50 66 122 123 124 133 134 135
ASIGNATION_TYPE      : 49 86 87 88 116 117 131 132
ASYNC                : 
AWAIT                : 
BRACKETL             : 100 122 125 134
BRACKETR             : 100 122 125 134
BREAK                : 
B_FALSE              : 
B_TRUE               : 
COMMA                : 57 58 87 88 90 117 122 127
CONST                : 
CONTAINS_SLICE       : 104
CONTIN               : 
CRATE                : 
DATATYPES            : 129 138
DIFFERENT            : 81
DIVISION             : 97
DOLLAR               : 
DOT                  : 64 65 99 99 101 104 107 136 137
DOTDOTDOT            : 
DYN                  : 
ELSE                 : 69 70
ENDLINE              : 35 36 37 38 55 64 65 66 91 92 107 118 122 123 124 133 134 135
ENUM                 : 
EQUAL                : 80
ERRORPROP            : 
EXTERN               : 
F32                  : 25 25 26 27 28 142
FOR                  : 84
FROM                 : 124 135
FUNCTION             : 111 112 113 114 115
GET_SLICE            : 101
GREATEQ              : 79
GREATER              : 77 129 130
HASHSET              : 61
I8                   : 30 30 31 32 33
IF                   : 68 69
IMPL                 : 
IN                   : 84
INSERT_HASH          : 64
IO                   : 107
LESSEQ               : 
LESST                : 78 129 130
LET                  : 44 45 46 47 131 132
LLAVEDER             : 67 84 93 106 111 112 113 114 115
LLAVEIZ              : 67 84 93 106 111 112 113 114 115
LOOP                 : 
LPAREN               : 55 64 65 92 101 104 107 107 111 112 113 114 115 124 135 136 137
MAS                  : 94
MATCH                : 
MAYOR                : 
MAYORIGUAL           : 
MENOS                : 95
MINUSEQ              : 52
MOD                  : 
MODULO               : 98
MOVE                 : 
MULT                 : 96
MUT                  : 45 46 108 131
NEWFUNC              : 61 133
NOT                  : 
NUMBER               : 
NUMDATATYPES         : 128 130 139
OR                   : 
OROR                 : 73
PATHSEP              : 61 107 124 133 135
PLUSEQ               : 51
POP_VEC              : 137
PRINTS               : 55
PUB                  : 88
PUSH_VEC             : 136
READ                 : 107
REF                  : 
RETURN               : 118
RPAREN               : 55 64 65 92 101 104 107 107 111 112 113 114 115 124 135 136 137
SELF                 : 
SELFLOWERCASE        : 
SLASHEQ              : 54
STAREQ               : 53
STATIC               : 
STDIN                : 107
STRING               : 56 57 140
STRUCT               : 85
SUPER                : 
TRAIT                : 
TUPLE                : 92
TYPE                 : 
U8                   : 20 20 21 22 23 75 76 99 99 103 104 128 141
UNION_HASH           : 65
UNIT                 : 91
UNSAFE               : 
USE                  : 
VARIABLE             : 21 22 24 26 27 29 31 32 34 39 40 42 46 47 48 49 64 65 65 74 74 75 76 83 84 86 87 88 93 100 101 104 108 111 112 113 114 115 116 117 131 132 136 137 143
VECT                 : 124 129 130 133 135
VECTMACRO            : 122 123 134
WHERE                : 
WHILE                : 106
error                : 

Nonterminals, with rules where they appear

argumentos_juntos    : 87 88 93
argumentos_tipo      : 90 92
arguments            : 111 114 117
asignacion           : 4
asignacion_sintipo   : 5
comparison           : 71 72 73
conditional          : 8 66
conditional_asigned  : 9
data_vector          : 15
declarador           : 35 66
declarador_sintipo   : 38
declare_vector       : 120 121 122
element_type         : 122
empty                : 55 55 61 61 64 64 64 64 65 65 65 65 65 100 100 101 101 101 104 104 104 107 107 107 107 108 128 129 130 136 136 137 137
empty_vec            : 120
empty_vector         : 13
expresion            : 35 60 64 118 119 126 127 136 147
expresion_sintipo    : 38 39
f_comparacion        : 84
for_loop             : 10
function             : 19
hashfunc             : 7
hashset              : 145
hashset_insert       : 62
hashset_union        : 63
if_type              : 67
let_asig             : 41
let_asig_sintipo     : 43
no_return_function   : 109
op_mat               : 37 144
ope_f32              : 2 28 29
ope_i8               : 3 33 34
ope_u8               : 1 23 24
oper_asig            : 39
other_operators      : 36
print_args           : 57 58
print_datos          : 58 59
print_expresion      : 55
prints               : 6
rango                : 82 100 102
read_data            : 18
reference            : 107
return               : 111 112 113
return_function      : 110
rust                 : 67 84 106 111 112 114 115 0
sent_stru            : 85
signo_arit           : 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
signo_comp           : 74 75 76
slice_contains       : 17
slice_exp            : 146
slice_get            : 16
struct_s             : 11
tipos                : 49 86 87 88 89 90 111 112 113 116 117
types_vector         : 120 121
validations          : 67 72 73 106
valor_get            : 101
var_tipo             : 44 45
vect_list            : 123 124
vector_content       : 121
vector_elements      : 122 125 127
vector_methods       : 14
while_loop           : 12

Parsing method: LALR

state 0

    (0) S' -> . rust
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    rust                           shift and go to state 1
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 1

    (0) S' -> rust .



state 2

    (4) rust -> asignacion .

    $end            reduce using rule 4 (rust -> asignacion .)
    LLAVEDER        reduce using rule 4 (rust -> asignacion .)
    RETURN          reduce using rule 4 (rust -> asignacion .)
    STRING          reduce using rule 4 (rust -> asignacion .)
    U8              reduce using rule 4 (rust -> asignacion .)
    F32             reduce using rule 4 (rust -> asignacion .)
    VARIABLE        reduce using rule 4 (rust -> asignacion .)
    I8              reduce using rule 4 (rust -> asignacion .)


state 3

    (5) rust -> asignacion_sintipo .

    $end            reduce using rule 5 (rust -> asignacion_sintipo .)
    LLAVEDER        reduce using rule 5 (rust -> asignacion_sintipo .)
    RETURN          reduce using rule 5 (rust -> asignacion_sintipo .)
    STRING          reduce using rule 5 (rust -> asignacion_sintipo .)
    U8              reduce using rule 5 (rust -> asignacion_sintipo .)
    F32             reduce using rule 5 (rust -> asignacion_sintipo .)
    VARIABLE        reduce using rule 5 (rust -> asignacion_sintipo .)
    I8              reduce using rule 5 (rust -> asignacion_sintipo .)


state 4

    (6) rust -> prints .

    $end            reduce using rule 6 (rust -> prints .)
    LLAVEDER        reduce using rule 6 (rust -> prints .)
    RETURN          reduce using rule 6 (rust -> prints .)
    STRING          reduce using rule 6 (rust -> prints .)
    U8              reduce using rule 6 (rust -> prints .)
    F32             reduce using rule 6 (rust -> prints .)
    VARIABLE        reduce using rule 6 (rust -> prints .)
    I8              reduce using rule 6 (rust -> prints .)


state 5

    (7) rust -> hashfunc .

    $end            reduce using rule 7 (rust -> hashfunc .)
    LLAVEDER        reduce using rule 7 (rust -> hashfunc .)
    RETURN          reduce using rule 7 (rust -> hashfunc .)
    STRING          reduce using rule 7 (rust -> hashfunc .)
    U8              reduce using rule 7 (rust -> hashfunc .)
    F32             reduce using rule 7 (rust -> hashfunc .)
    VARIABLE        reduce using rule 7 (rust -> hashfunc .)
    I8              reduce using rule 7 (rust -> hashfunc .)


state 6

    (8) rust -> conditional .

    $end            reduce using rule 8 (rust -> conditional .)
    LLAVEDER        reduce using rule 8 (rust -> conditional .)
    RETURN          reduce using rule 8 (rust -> conditional .)
    STRING          reduce using rule 8 (rust -> conditional .)
    U8              reduce using rule 8 (rust -> conditional .)
    F32             reduce using rule 8 (rust -> conditional .)
    VARIABLE        reduce using rule 8 (rust -> conditional .)
    I8              reduce using rule 8 (rust -> conditional .)


state 7

    (9) rust -> conditional_asigned .

    $end            reduce using rule 9 (rust -> conditional_asigned .)
    LLAVEDER        reduce using rule 9 (rust -> conditional_asigned .)
    RETURN          reduce using rule 9 (rust -> conditional_asigned .)
    STRING          reduce using rule 9 (rust -> conditional_asigned .)
    U8              reduce using rule 9 (rust -> conditional_asigned .)
    F32             reduce using rule 9 (rust -> conditional_asigned .)
    VARIABLE        reduce using rule 9 (rust -> conditional_asigned .)
    I8              reduce using rule 9 (rust -> conditional_asigned .)


state 8

    (10) rust -> for_loop .

    $end            reduce using rule 10 (rust -> for_loop .)
    LLAVEDER        reduce using rule 10 (rust -> for_loop .)
    RETURN          reduce using rule 10 (rust -> for_loop .)
    STRING          reduce using rule 10 (rust -> for_loop .)
    U8              reduce using rule 10 (rust -> for_loop .)
    F32             reduce using rule 10 (rust -> for_loop .)
    VARIABLE        reduce using rule 10 (rust -> for_loop .)
    I8              reduce using rule 10 (rust -> for_loop .)


state 9

    (11) rust -> struct_s .

    $end            reduce using rule 11 (rust -> struct_s .)
    LLAVEDER        reduce using rule 11 (rust -> struct_s .)
    RETURN          reduce using rule 11 (rust -> struct_s .)
    STRING          reduce using rule 11 (rust -> struct_s .)
    U8              reduce using rule 11 (rust -> struct_s .)
    F32             reduce using rule 11 (rust -> struct_s .)
    VARIABLE        reduce using rule 11 (rust -> struct_s .)
    I8              reduce using rule 11 (rust -> struct_s .)


state 10

    (12) rust -> while_loop .

    $end            reduce using rule 12 (rust -> while_loop .)
    LLAVEDER        reduce using rule 12 (rust -> while_loop .)
    RETURN          reduce using rule 12 (rust -> while_loop .)
    STRING          reduce using rule 12 (rust -> while_loop .)
    U8              reduce using rule 12 (rust -> while_loop .)
    F32             reduce using rule 12 (rust -> while_loop .)
    VARIABLE        reduce using rule 12 (rust -> while_loop .)
    I8              reduce using rule 12 (rust -> while_loop .)


state 11

    (13) rust -> empty_vector .

    $end            reduce using rule 13 (rust -> empty_vector .)
    LLAVEDER        reduce using rule 13 (rust -> empty_vector .)
    RETURN          reduce using rule 13 (rust -> empty_vector .)
    STRING          reduce using rule 13 (rust -> empty_vector .)
    U8              reduce using rule 13 (rust -> empty_vector .)
    F32             reduce using rule 13 (rust -> empty_vector .)
    VARIABLE        reduce using rule 13 (rust -> empty_vector .)
    I8              reduce using rule 13 (rust -> empty_vector .)


state 12

    (14) rust -> vector_methods .

    $end            reduce using rule 14 (rust -> vector_methods .)
    LLAVEDER        reduce using rule 14 (rust -> vector_methods .)
    RETURN          reduce using rule 14 (rust -> vector_methods .)
    STRING          reduce using rule 14 (rust -> vector_methods .)
    U8              reduce using rule 14 (rust -> vector_methods .)
    F32             reduce using rule 14 (rust -> vector_methods .)
    VARIABLE        reduce using rule 14 (rust -> vector_methods .)
    I8              reduce using rule 14 (rust -> vector_methods .)


state 13

    (15) rust -> data_vector .

    $end            reduce using rule 15 (rust -> data_vector .)
    LLAVEDER        reduce using rule 15 (rust -> data_vector .)
    RETURN          reduce using rule 15 (rust -> data_vector .)
    STRING          reduce using rule 15 (rust -> data_vector .)
    U8              reduce using rule 15 (rust -> data_vector .)
    F32             reduce using rule 15 (rust -> data_vector .)
    VARIABLE        reduce using rule 15 (rust -> data_vector .)
    I8              reduce using rule 15 (rust -> data_vector .)


state 14

    (16) rust -> slice_get .

    $end            reduce using rule 16 (rust -> slice_get .)
    LLAVEDER        reduce using rule 16 (rust -> slice_get .)
    RETURN          reduce using rule 16 (rust -> slice_get .)
    STRING          reduce using rule 16 (rust -> slice_get .)
    U8              reduce using rule 16 (rust -> slice_get .)
    F32             reduce using rule 16 (rust -> slice_get .)
    VARIABLE        reduce using rule 16 (rust -> slice_get .)
    I8              reduce using rule 16 (rust -> slice_get .)


state 15

    (17) rust -> slice_contains .

    $end            reduce using rule 17 (rust -> slice_contains .)
    LLAVEDER        reduce using rule 17 (rust -> slice_contains .)
    RETURN          reduce using rule 17 (rust -> slice_contains .)
    STRING          reduce using rule 17 (rust -> slice_contains .)
    U8              reduce using rule 17 (rust -> slice_contains .)
    F32             reduce using rule 17 (rust -> slice_contains .)
    VARIABLE        reduce using rule 17 (rust -> slice_contains .)
    I8              reduce using rule 17 (rust -> slice_contains .)


state 16

    (18) rust -> read_data .

    $end            reduce using rule 18 (rust -> read_data .)
    LLAVEDER        reduce using rule 18 (rust -> read_data .)
    RETURN          reduce using rule 18 (rust -> read_data .)
    STRING          reduce using rule 18 (rust -> read_data .)
    U8              reduce using rule 18 (rust -> read_data .)
    F32             reduce using rule 18 (rust -> read_data .)
    VARIABLE        reduce using rule 18 (rust -> read_data .)
    I8              reduce using rule 18 (rust -> read_data .)


state 17

    (19) rust -> function .

    $end            reduce using rule 19 (rust -> function .)
    LLAVEDER        reduce using rule 19 (rust -> function .)
    RETURN          reduce using rule 19 (rust -> function .)
    STRING          reduce using rule 19 (rust -> function .)
    U8              reduce using rule 19 (rust -> function .)
    F32             reduce using rule 19 (rust -> function .)
    VARIABLE        reduce using rule 19 (rust -> function .)
    I8              reduce using rule 19 (rust -> function .)


state 18

    (35) asignacion -> declarador . ASIGNAR expresion ENDLINE
    (66) conditional_asigned -> declarador . ASIGNAR conditional ENDLINE

    ASIGNAR         shift and go to state 46


state 19

    (36) asignacion -> other_operators . ENDLINE

    ENDLINE         shift and go to state 47


state 20

    (37) asignacion -> op_mat . ENDLINE

    ENDLINE         shift and go to state 48


state 21

    (38) asignacion_sintipo -> declarador_sintipo . ASIGNAR expresion_sintipo ENDLINE

    ASIGNAR         shift and go to state 49


state 22

    (55) prints -> PRINTS . empty LPAREN print_expresion RPAREN empty ENDLINE
    (105) empty -> .

    LPAREN          reduce using rule 105 (empty -> .)

    empty                          shift and go to state 50

state 23

    (62) hashfunc -> hashset_insert .

    $end            reduce using rule 62 (hashfunc -> hashset_insert .)
    LLAVEDER        reduce using rule 62 (hashfunc -> hashset_insert .)
    RETURN          reduce using rule 62 (hashfunc -> hashset_insert .)
    STRING          reduce using rule 62 (hashfunc -> hashset_insert .)
    U8              reduce using rule 62 (hashfunc -> hashset_insert .)
    F32             reduce using rule 62 (hashfunc -> hashset_insert .)
    VARIABLE        reduce using rule 62 (hashfunc -> hashset_insert .)
    I8              reduce using rule 62 (hashfunc -> hashset_insert .)


state 24

    (63) hashfunc -> hashset_union .

    $end            reduce using rule 63 (hashfunc -> hashset_union .)
    LLAVEDER        reduce using rule 63 (hashfunc -> hashset_union .)
    RETURN          reduce using rule 63 (hashfunc -> hashset_union .)
    STRING          reduce using rule 63 (hashfunc -> hashset_union .)
    U8              reduce using rule 63 (hashfunc -> hashset_union .)
    F32             reduce using rule 63 (hashfunc -> hashset_union .)
    VARIABLE        reduce using rule 63 (hashfunc -> hashset_union .)
    I8              reduce using rule 63 (hashfunc -> hashset_union .)


state 25

    (67) conditional -> if_type . validations LLAVEIZ rust LLAVEDER
    (71) validations -> . comparison
    (72) validations -> . comparison ANDAND validations
    (73) validations -> . comparison OROR validations
    (74) comparison -> . VARIABLE signo_comp VARIABLE
    (75) comparison -> . VARIABLE signo_comp U8
    (76) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 53
    U8              shift and go to state 54

    validations                    shift and go to state 51
    comparison                     shift and go to state 52

state 26

    (84) for_loop -> FOR . VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER

    VARIABLE        shift and go to state 55


state 27

    (136) vector_methods -> VARIABLE . empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> VARIABLE . empty DOT empty POP_VEC LPAREN RPAREN
    (101) slice_get -> VARIABLE . empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> VARIABLE . empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (40) declarador -> VARIABLE .
    (39) other_operators -> VARIABLE . oper_asig expresion_sintipo
    (42) declarador_sintipo -> VARIABLE .
    (64) hashset_insert -> VARIABLE . empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> VARIABLE . empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (22) ope_u8 -> VARIABLE . signo_arit U8
    (24) ope_u8 -> VARIABLE . signo_arit ope_u8
    (27) ope_f32 -> VARIABLE . signo_arit F32
    (29) ope_f32 -> VARIABLE . signo_arit ope_f32
    (32) ope_i8 -> VARIABLE . signo_arit I8
    (34) ope_i8 -> VARIABLE . signo_arit ope_i8
    (105) empty -> .
    (50) oper_asig -> . ASIGNAR
    (51) oper_asig -> . PLUSEQ
    (52) oper_asig -> . MINUSEQ
    (53) oper_asig -> . STAREQ
    (54) oper_asig -> . SLASHEQ
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

  ! reduce/reduce conflict for ASIGNAR resolved using rule 40 (declarador -> VARIABLE .)
  ! shift/reduce conflict for ASIGNAR resolved as shift
    DOT             reduce using rule 105 (empty -> .)
    ASIGNAR         shift and go to state 59
    PLUSEQ          shift and go to state 60
    MINUSEQ         shift and go to state 61
    STAREQ          shift and go to state 62
    SLASHEQ         shift and go to state 63
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

  ! ASIGNAR         [ reduce using rule 40 (declarador -> VARIABLE .) ]
  ! ASIGNAR         [ reduce using rule 42 (declarador_sintipo -> VARIABLE .) ]

    empty                          shift and go to state 56
    oper_asig                      shift and go to state 57
    signo_arit                     shift and go to state 58

state 28

    (85) struct_s -> STRUCT . sent_stru
    (91) sent_stru -> . UNIT ENDLINE
    (92) sent_stru -> . TUPLE LPAREN argumentos_tipo RPAREN ENDLINE
    (93) sent_stru -> . VARIABLE LLAVEIZ argumentos_juntos LLAVEDER

    UNIT            shift and go to state 70
    TUPLE           shift and go to state 71
    VARIABLE        shift and go to state 72

    sent_stru                      shift and go to state 69

state 29

    (106) while_loop -> WHILE . validations LLAVEIZ rust LLAVEDER
    (71) validations -> . comparison
    (72) validations -> . comparison ANDAND validations
    (73) validations -> . comparison OROR validations
    (74) comparison -> . VARIABLE signo_comp VARIABLE
    (75) comparison -> . VARIABLE signo_comp U8
    (76) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 53
    U8              shift and go to state 54

    validations                    shift and go to state 73
    comparison                     shift and go to state 52

state 30

    (120) empty_vector -> declare_vector . types_vector empty_vec
    (121) data_vector -> declare_vector . types_vector vector_content
    (122) data_vector -> declare_vector . ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (129) types_vector -> . VECT empty LESST DATATYPES GREATER
    (130) types_vector -> . VECT empty LESST NUMDATATYPES GREATER

    ASIGNAR         shift and go to state 75
    VECT            shift and go to state 76

    types_vector                   shift and go to state 74

state 31

    (20) ope_u8 -> U8 . signo_arit U8
    (21) ope_u8 -> U8 . signo_arit VARIABLE
    (23) ope_u8 -> U8 . signo_arit ope_u8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 77

state 32

    (107) read_data -> IO . empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (105) empty -> .

    PATHSEP         reduce using rule 105 (empty -> .)

    empty                          shift and go to state 78

state 33

    (109) function -> no_return_function .

    $end            reduce using rule 109 (function -> no_return_function .)
    LLAVEDER        reduce using rule 109 (function -> no_return_function .)
    RETURN          reduce using rule 109 (function -> no_return_function .)
    STRING          reduce using rule 109 (function -> no_return_function .)
    U8              reduce using rule 109 (function -> no_return_function .)
    F32             reduce using rule 109 (function -> no_return_function .)
    VARIABLE        reduce using rule 109 (function -> no_return_function .)
    I8              reduce using rule 109 (function -> no_return_function .)


state 34

    (110) function -> return_function .

    $end            reduce using rule 110 (function -> return_function .)
    LLAVEDER        reduce using rule 110 (function -> return_function .)
    RETURN          reduce using rule 110 (function -> return_function .)
    STRING          reduce using rule 110 (function -> return_function .)
    U8              reduce using rule 110 (function -> return_function .)
    F32             reduce using rule 110 (function -> return_function .)
    VARIABLE        reduce using rule 110 (function -> return_function .)
    I8              reduce using rule 110 (function -> return_function .)


state 35

    (41) declarador -> let_asig .

    ASIGNAR         reduce using rule 41 (declarador -> let_asig .)


state 36

    (1) op_mat -> ope_u8 .

    ENDLINE         reduce using rule 1 (op_mat -> ope_u8 .)
    COMMA           reduce using rule 1 (op_mat -> ope_u8 .)
    RPAREN          reduce using rule 1 (op_mat -> ope_u8 .)
    BRACKETR        reduce using rule 1 (op_mat -> ope_u8 .)
    LLAVEDER        reduce using rule 1 (op_mat -> ope_u8 .)


state 37

    (2) op_mat -> ope_f32 .

    ENDLINE         reduce using rule 2 (op_mat -> ope_f32 .)
    COMMA           reduce using rule 2 (op_mat -> ope_f32 .)
    RPAREN          reduce using rule 2 (op_mat -> ope_f32 .)
    BRACKETR        reduce using rule 2 (op_mat -> ope_f32 .)
    LLAVEDER        reduce using rule 2 (op_mat -> ope_f32 .)


state 38

    (3) op_mat -> ope_i8 .

    ENDLINE         reduce using rule 3 (op_mat -> ope_i8 .)
    COMMA           reduce using rule 3 (op_mat -> ope_i8 .)
    RPAREN          reduce using rule 3 (op_mat -> ope_i8 .)
    BRACKETR        reduce using rule 3 (op_mat -> ope_i8 .)
    LLAVEDER        reduce using rule 3 (op_mat -> ope_i8 .)


state 39

    (43) declarador_sintipo -> let_asig_sintipo .

    ASIGNAR         reduce using rule 43 (declarador_sintipo -> let_asig_sintipo .)


state 40

    (68) if_type -> IF .

    VARIABLE        reduce using rule 68 (if_type -> IF .)
    U8              reduce using rule 68 (if_type -> IF .)


state 41

    (69) if_type -> ELSE . IF
    (70) if_type -> ELSE .

    IF              shift and go to state 79
    VARIABLE        reduce using rule 70 (if_type -> ELSE .)
    U8              reduce using rule 70 (if_type -> ELSE .)


state 42

    (131) declare_vector -> LET . MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> LET . VARIABLE ASIGNATION_TYPE
    (44) let_asig -> LET . var_tipo
    (45) let_asig -> LET . MUT var_tipo
    (46) let_asig_sintipo -> LET . MUT VARIABLE
    (47) let_asig_sintipo -> LET . VARIABLE
    (48) var_tipo -> . VARIABLE
    (49) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    MUT             shift and go to state 80
    VARIABLE        shift and go to state 81

    var_tipo                       shift and go to state 82

state 43

    (114) no_return_function -> FUNCTION . VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> FUNCTION . VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> FUNCTION . VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> FUNCTION . VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> FUNCTION . VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER

    VARIABLE        shift and go to state 83


state 44

    (25) ope_f32 -> F32 . signo_arit F32
    (26) ope_f32 -> F32 . signo_arit VARIABLE
    (28) ope_f32 -> F32 . signo_arit ope_f32
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 84

state 45

    (30) ope_i8 -> I8 . signo_arit I8
    (31) ope_i8 -> I8 . signo_arit VARIABLE
    (33) ope_i8 -> I8 . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 85

state 46

    (35) asignacion -> declarador ASIGNAR . expresion ENDLINE
    (66) conditional_asigned -> declarador ASIGNAR . conditional ENDLINE
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    I8              shift and go to state 45

    expresion                      shift and go to state 86
    conditional                    shift and go to state 87
    op_mat                         shift and go to state 92
    if_type                        shift and go to state 25
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 47

    (36) asignacion -> other_operators ENDLINE .

    $end            reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    LLAVEDER        reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    RETURN          reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    STRING          reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    U8              reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    F32             reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    VARIABLE        reduce using rule 36 (asignacion -> other_operators ENDLINE .)
    I8              reduce using rule 36 (asignacion -> other_operators ENDLINE .)


state 48

    (37) asignacion -> op_mat ENDLINE .

    $end            reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    LLAVEDER        reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    RETURN          reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    STRING          reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    U8              reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    F32             reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    VARIABLE        reduce using rule 37 (asignacion -> op_mat ENDLINE .)
    I8              reduce using rule 37 (asignacion -> op_mat ENDLINE .)


state 49

    (38) asignacion_sintipo -> declarador_sintipo ASIGNAR . expresion_sintipo ENDLINE
    (145) expresion_sintipo -> . hashset
    (146) expresion_sintipo -> . slice_exp
    (147) expresion_sintipo -> . expresion
    (61) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (100) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    HASHSET         shift and go to state 97
    AND             shift and go to state 98
    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    expresion_sintipo              shift and go to state 93
    hashset                        shift and go to state 94
    slice_exp                      shift and go to state 95
    expresion                      shift and go to state 96
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 50

    (55) prints -> PRINTS empty . LPAREN print_expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 99


state 51

    (67) conditional -> if_type validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 100


state 52

    (71) validations -> comparison .
    (72) validations -> comparison . ANDAND validations
    (73) validations -> comparison . OROR validations

    LLAVEIZ         reduce using rule 71 (validations -> comparison .)
    ANDAND          shift and go to state 101
    OROR            shift and go to state 102


state 53

    (74) comparison -> VARIABLE . signo_comp VARIABLE
    (75) comparison -> VARIABLE . signo_comp U8
    (77) signo_comp -> . GREATER
    (78) signo_comp -> . LESST
    (79) signo_comp -> . GREATEQ
    (80) signo_comp -> . EQUAL
    (81) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 104
    LESST           shift and go to state 105
    GREATEQ         shift and go to state 106
    EQUAL           shift and go to state 107
    DIFFERENT       shift and go to state 108

    signo_comp                     shift and go to state 103

state 54

    (76) comparison -> U8 . signo_comp VARIABLE
    (77) signo_comp -> . GREATER
    (78) signo_comp -> . LESST
    (79) signo_comp -> . GREATEQ
    (80) signo_comp -> . EQUAL
    (81) signo_comp -> . DIFFERENT

    GREATER         shift and go to state 104
    LESST           shift and go to state 105
    GREATEQ         shift and go to state 106
    EQUAL           shift and go to state 107
    DIFFERENT       shift and go to state 108

    signo_comp                     shift and go to state 109

state 55

    (84) for_loop -> FOR VARIABLE . IN f_comparacion LLAVEIZ rust LLAVEDER

    IN              shift and go to state 110


state 56

    (136) vector_methods -> VARIABLE empty . DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> VARIABLE empty . DOT empty POP_VEC LPAREN RPAREN
    (101) slice_get -> VARIABLE empty . DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> VARIABLE empty . DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (64) hashset_insert -> VARIABLE empty . DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> VARIABLE empty . DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    DOT             shift and go to state 111


state 57

    (39) other_operators -> VARIABLE oper_asig . expresion_sintipo
    (145) expresion_sintipo -> . hashset
    (146) expresion_sintipo -> . slice_exp
    (147) expresion_sintipo -> . expresion
    (61) hashset -> . HASHSET empty PATHSEP empty NEWFUNC
    (100) slice_exp -> . AND empty VARIABLE empty BRACKETL rango BRACKETR
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    HASHSET         shift and go to state 97
    AND             shift and go to state 98
    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    expresion_sintipo              shift and go to state 112
    hashset                        shift and go to state 94
    slice_exp                      shift and go to state 95
    expresion                      shift and go to state 96
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 58

    (22) ope_u8 -> VARIABLE signo_arit . U8
    (24) ope_u8 -> VARIABLE signo_arit . ope_u8
    (27) ope_f32 -> VARIABLE signo_arit . F32
    (29) ope_f32 -> VARIABLE signo_arit . ope_f32
    (32) ope_i8 -> VARIABLE signo_arit . I8
    (34) ope_i8 -> VARIABLE signo_arit . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    U8              shift and go to state 114
    F32             shift and go to state 116
    I8              shift and go to state 118
    VARIABLE        shift and go to state 113

    ope_u8                         shift and go to state 115
    ope_f32                        shift and go to state 117
    ope_i8                         shift and go to state 119

state 59

    (50) oper_asig -> ASIGNAR .

    HASHSET         reduce using rule 50 (oper_asig -> ASIGNAR .)
    AND             reduce using rule 50 (oper_asig -> ASIGNAR .)
    STRING          reduce using rule 50 (oper_asig -> ASIGNAR .)
    U8              reduce using rule 50 (oper_asig -> ASIGNAR .)
    F32             reduce using rule 50 (oper_asig -> ASIGNAR .)
    VARIABLE        reduce using rule 50 (oper_asig -> ASIGNAR .)
    I8              reduce using rule 50 (oper_asig -> ASIGNAR .)


state 60

    (51) oper_asig -> PLUSEQ .

    HASHSET         reduce using rule 51 (oper_asig -> PLUSEQ .)
    AND             reduce using rule 51 (oper_asig -> PLUSEQ .)
    STRING          reduce using rule 51 (oper_asig -> PLUSEQ .)
    U8              reduce using rule 51 (oper_asig -> PLUSEQ .)
    F32             reduce using rule 51 (oper_asig -> PLUSEQ .)
    VARIABLE        reduce using rule 51 (oper_asig -> PLUSEQ .)
    I8              reduce using rule 51 (oper_asig -> PLUSEQ .)


state 61

    (52) oper_asig -> MINUSEQ .

    HASHSET         reduce using rule 52 (oper_asig -> MINUSEQ .)
    AND             reduce using rule 52 (oper_asig -> MINUSEQ .)
    STRING          reduce using rule 52 (oper_asig -> MINUSEQ .)
    U8              reduce using rule 52 (oper_asig -> MINUSEQ .)
    F32             reduce using rule 52 (oper_asig -> MINUSEQ .)
    VARIABLE        reduce using rule 52 (oper_asig -> MINUSEQ .)
    I8              reduce using rule 52 (oper_asig -> MINUSEQ .)


state 62

    (53) oper_asig -> STAREQ .

    HASHSET         reduce using rule 53 (oper_asig -> STAREQ .)
    AND             reduce using rule 53 (oper_asig -> STAREQ .)
    STRING          reduce using rule 53 (oper_asig -> STAREQ .)
    U8              reduce using rule 53 (oper_asig -> STAREQ .)
    F32             reduce using rule 53 (oper_asig -> STAREQ .)
    VARIABLE        reduce using rule 53 (oper_asig -> STAREQ .)
    I8              reduce using rule 53 (oper_asig -> STAREQ .)


state 63

    (54) oper_asig -> SLASHEQ .

    HASHSET         reduce using rule 54 (oper_asig -> SLASHEQ .)
    AND             reduce using rule 54 (oper_asig -> SLASHEQ .)
    STRING          reduce using rule 54 (oper_asig -> SLASHEQ .)
    U8              reduce using rule 54 (oper_asig -> SLASHEQ .)
    F32             reduce using rule 54 (oper_asig -> SLASHEQ .)
    VARIABLE        reduce using rule 54 (oper_asig -> SLASHEQ .)
    I8              reduce using rule 54 (oper_asig -> SLASHEQ .)


state 64

    (94) signo_arit -> MAS .

    U8              reduce using rule 94 (signo_arit -> MAS .)
    F32             reduce using rule 94 (signo_arit -> MAS .)
    I8              reduce using rule 94 (signo_arit -> MAS .)
    VARIABLE        reduce using rule 94 (signo_arit -> MAS .)


state 65

    (95) signo_arit -> MENOS .

    U8              reduce using rule 95 (signo_arit -> MENOS .)
    F32             reduce using rule 95 (signo_arit -> MENOS .)
    I8              reduce using rule 95 (signo_arit -> MENOS .)
    VARIABLE        reduce using rule 95 (signo_arit -> MENOS .)


state 66

    (96) signo_arit -> MULT .

    U8              reduce using rule 96 (signo_arit -> MULT .)
    F32             reduce using rule 96 (signo_arit -> MULT .)
    I8              reduce using rule 96 (signo_arit -> MULT .)
    VARIABLE        reduce using rule 96 (signo_arit -> MULT .)


state 67

    (97) signo_arit -> DIVISION .

    U8              reduce using rule 97 (signo_arit -> DIVISION .)
    F32             reduce using rule 97 (signo_arit -> DIVISION .)
    I8              reduce using rule 97 (signo_arit -> DIVISION .)
    VARIABLE        reduce using rule 97 (signo_arit -> DIVISION .)


state 68

    (98) signo_arit -> MODULO .

    U8              reduce using rule 98 (signo_arit -> MODULO .)
    F32             reduce using rule 98 (signo_arit -> MODULO .)
    I8              reduce using rule 98 (signo_arit -> MODULO .)
    VARIABLE        reduce using rule 98 (signo_arit -> MODULO .)


state 69

    (85) struct_s -> STRUCT sent_stru .

    $end            reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    LLAVEDER        reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    RETURN          reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    STRING          reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    U8              reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    F32             reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    VARIABLE        reduce using rule 85 (struct_s -> STRUCT sent_stru .)
    I8              reduce using rule 85 (struct_s -> STRUCT sent_stru .)


state 70

    (91) sent_stru -> UNIT . ENDLINE

    ENDLINE         shift and go to state 120


state 71

    (92) sent_stru -> TUPLE . LPAREN argumentos_tipo RPAREN ENDLINE

    LPAREN          shift and go to state 121


state 72

    (93) sent_stru -> VARIABLE . LLAVEIZ argumentos_juntos LLAVEDER

    LLAVEIZ         shift and go to state 122


state 73

    (106) while_loop -> WHILE validations . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 123


state 74

    (120) empty_vector -> declare_vector types_vector . empty_vec
    (121) data_vector -> declare_vector types_vector . vector_content
    (133) empty_vec -> . ASIGNAR VECT PATHSEP NEWFUNC ENDLINE
    (134) empty_vec -> . ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE
    (135) empty_vec -> . ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE
    (123) vector_content -> . ASIGNAR VECTMACRO vect_list ENDLINE
    (124) vector_content -> . ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE

    ASIGNAR         shift and go to state 126

    empty_vec                      shift and go to state 124
    vector_content                 shift and go to state 125

state 75

    (122) data_vector -> declare_vector ASIGNAR . VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE

    VECTMACRO       shift and go to state 127


state 76

    (129) types_vector -> VECT . empty LESST DATATYPES GREATER
    (130) types_vector -> VECT . empty LESST NUMDATATYPES GREATER
    (105) empty -> .

    LESST           reduce using rule 105 (empty -> .)

    empty                          shift and go to state 128

state 77

    (20) ope_u8 -> U8 signo_arit . U8
    (21) ope_u8 -> U8 signo_arit . VARIABLE
    (23) ope_u8 -> U8 signo_arit . ope_u8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8

    U8              shift and go to state 129
    VARIABLE        shift and go to state 130

    ope_u8                         shift and go to state 131

state 78

    (107) read_data -> IO empty . PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    PATHSEP         shift and go to state 132


state 79

    (69) if_type -> ELSE IF .

    VARIABLE        reduce using rule 69 (if_type -> ELSE IF .)
    U8              reduce using rule 69 (if_type -> ELSE IF .)


state 80

    (131) declare_vector -> LET MUT . VARIABLE ASIGNATION_TYPE
    (45) let_asig -> LET MUT . var_tipo
    (46) let_asig_sintipo -> LET MUT . VARIABLE
    (48) var_tipo -> . VARIABLE
    (49) var_tipo -> . VARIABLE ASIGNATION_TYPE tipos

    VARIABLE        shift and go to state 133

    var_tipo                       shift and go to state 134

state 81

    (132) declare_vector -> LET VARIABLE . ASIGNATION_TYPE
    (47) let_asig_sintipo -> LET VARIABLE .
    (48) var_tipo -> VARIABLE .
    (49) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 47 (let_asig_sintipo -> LET VARIABLE .)
    ASIGNATION_TYPE shift and go to state 135
    ASIGNAR         reduce using rule 47 (let_asig_sintipo -> LET VARIABLE .)

  ! ASIGNAR         [ reduce using rule 48 (var_tipo -> VARIABLE .) ]


state 82

    (44) let_asig -> LET var_tipo .

    ASIGNAR         reduce using rule 44 (let_asig -> LET var_tipo .)


state 83

    (114) no_return_function -> FUNCTION VARIABLE . LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> FUNCTION VARIABLE . LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> FUNCTION VARIABLE . LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> FUNCTION VARIABLE . LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> FUNCTION VARIABLE . LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER

    LPAREN          shift and go to state 136


state 84

    (25) ope_f32 -> F32 signo_arit . F32
    (26) ope_f32 -> F32 signo_arit . VARIABLE
    (28) ope_f32 -> F32 signo_arit . ope_f32
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32

    F32             shift and go to state 137
    VARIABLE        shift and go to state 138

    ope_f32                        shift and go to state 139

state 85

    (30) ope_i8 -> I8 signo_arit . I8
    (31) ope_i8 -> I8 signo_arit . VARIABLE
    (33) ope_i8 -> I8 signo_arit . ope_i8
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    I8              shift and go to state 140
    VARIABLE        shift and go to state 141

    ope_i8                         shift and go to state 142

state 86

    (35) asignacion -> declarador ASIGNAR expresion . ENDLINE

    ENDLINE         shift and go to state 143


state 87

    (66) conditional_asigned -> declarador ASIGNAR conditional . ENDLINE

    ENDLINE         shift and go to state 144


state 88

    (140) expresion -> STRING .

    ENDLINE         reduce using rule 140 (expresion -> STRING .)
    COMMA           reduce using rule 140 (expresion -> STRING .)
    RPAREN          reduce using rule 140 (expresion -> STRING .)
    BRACKETR        reduce using rule 140 (expresion -> STRING .)
    LLAVEDER        reduce using rule 140 (expresion -> STRING .)


state 89

    (141) expresion -> U8 .
    (20) ope_u8 -> U8 . signo_arit U8
    (21) ope_u8 -> U8 . signo_arit VARIABLE
    (23) ope_u8 -> U8 . signo_arit ope_u8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 141 (expresion -> U8 .)
    COMMA           reduce using rule 141 (expresion -> U8 .)
    RPAREN          reduce using rule 141 (expresion -> U8 .)
    BRACKETR        reduce using rule 141 (expresion -> U8 .)
    LLAVEDER        reduce using rule 141 (expresion -> U8 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 77

state 90

    (142) expresion -> F32 .
    (25) ope_f32 -> F32 . signo_arit F32
    (26) ope_f32 -> F32 . signo_arit VARIABLE
    (28) ope_f32 -> F32 . signo_arit ope_f32
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 142 (expresion -> F32 .)
    COMMA           reduce using rule 142 (expresion -> F32 .)
    RPAREN          reduce using rule 142 (expresion -> F32 .)
    BRACKETR        reduce using rule 142 (expresion -> F32 .)
    LLAVEDER        reduce using rule 142 (expresion -> F32 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 84

state 91

    (143) expresion -> VARIABLE .
    (22) ope_u8 -> VARIABLE . signo_arit U8
    (24) ope_u8 -> VARIABLE . signo_arit ope_u8
    (27) ope_f32 -> VARIABLE . signo_arit F32
    (29) ope_f32 -> VARIABLE . signo_arit ope_f32
    (32) ope_i8 -> VARIABLE . signo_arit I8
    (34) ope_i8 -> VARIABLE . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 143 (expresion -> VARIABLE .)
    COMMA           reduce using rule 143 (expresion -> VARIABLE .)
    RPAREN          reduce using rule 143 (expresion -> VARIABLE .)
    BRACKETR        reduce using rule 143 (expresion -> VARIABLE .)
    LLAVEDER        reduce using rule 143 (expresion -> VARIABLE .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 58

state 92

    (144) expresion -> op_mat .

    ENDLINE         reduce using rule 144 (expresion -> op_mat .)
    COMMA           reduce using rule 144 (expresion -> op_mat .)
    RPAREN          reduce using rule 144 (expresion -> op_mat .)
    BRACKETR        reduce using rule 144 (expresion -> op_mat .)
    LLAVEDER        reduce using rule 144 (expresion -> op_mat .)


state 93

    (38) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo . ENDLINE

    ENDLINE         shift and go to state 145


state 94

    (145) expresion_sintipo -> hashset .

    ENDLINE         reduce using rule 145 (expresion_sintipo -> hashset .)


state 95

    (146) expresion_sintipo -> slice_exp .

    ENDLINE         reduce using rule 146 (expresion_sintipo -> slice_exp .)


state 96

    (147) expresion_sintipo -> expresion .

    ENDLINE         reduce using rule 147 (expresion_sintipo -> expresion .)


state 97

    (61) hashset -> HASHSET . empty PATHSEP empty NEWFUNC
    (105) empty -> .

    PATHSEP         reduce using rule 105 (empty -> .)

    empty                          shift and go to state 146

state 98

    (100) slice_exp -> AND . empty VARIABLE empty BRACKETL rango BRACKETR
    (105) empty -> .

    VARIABLE        reduce using rule 105 (empty -> .)

    empty                          shift and go to state 147

state 99

    (55) prints -> PRINTS empty LPAREN . print_expresion RPAREN empty ENDLINE
    (56) print_expresion -> . STRING
    (57) print_expresion -> . STRING COMMA print_args

    STRING          shift and go to state 149

    print_expresion                shift and go to state 148

state 100

    (67) conditional -> if_type validations LLAVEIZ . rust LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    if_type                        shift and go to state 25
    rust                           shift and go to state 150
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 101

    (72) validations -> comparison ANDAND . validations
    (71) validations -> . comparison
    (72) validations -> . comparison ANDAND validations
    (73) validations -> . comparison OROR validations
    (74) comparison -> . VARIABLE signo_comp VARIABLE
    (75) comparison -> . VARIABLE signo_comp U8
    (76) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 53
    U8              shift and go to state 54

    comparison                     shift and go to state 52
    validations                    shift and go to state 151

state 102

    (73) validations -> comparison OROR . validations
    (71) validations -> . comparison
    (72) validations -> . comparison ANDAND validations
    (73) validations -> . comparison OROR validations
    (74) comparison -> . VARIABLE signo_comp VARIABLE
    (75) comparison -> . VARIABLE signo_comp U8
    (76) comparison -> . U8 signo_comp VARIABLE

    VARIABLE        shift and go to state 53
    U8              shift and go to state 54

    comparison                     shift and go to state 52
    validations                    shift and go to state 152

state 103

    (74) comparison -> VARIABLE signo_comp . VARIABLE
    (75) comparison -> VARIABLE signo_comp . U8

    VARIABLE        shift and go to state 153
    U8              shift and go to state 154


state 104

    (77) signo_comp -> GREATER .

    VARIABLE        reduce using rule 77 (signo_comp -> GREATER .)
    U8              reduce using rule 77 (signo_comp -> GREATER .)


state 105

    (78) signo_comp -> LESST .

    VARIABLE        reduce using rule 78 (signo_comp -> LESST .)
    U8              reduce using rule 78 (signo_comp -> LESST .)


state 106

    (79) signo_comp -> GREATEQ .

    VARIABLE        reduce using rule 79 (signo_comp -> GREATEQ .)
    U8              reduce using rule 79 (signo_comp -> GREATEQ .)


state 107

    (80) signo_comp -> EQUAL .

    VARIABLE        reduce using rule 80 (signo_comp -> EQUAL .)
    U8              reduce using rule 80 (signo_comp -> EQUAL .)


state 108

    (81) signo_comp -> DIFFERENT .

    VARIABLE        reduce using rule 81 (signo_comp -> DIFFERENT .)
    U8              reduce using rule 81 (signo_comp -> DIFFERENT .)


state 109

    (76) comparison -> U8 signo_comp . VARIABLE

    VARIABLE        shift and go to state 155


state 110

    (84) for_loop -> FOR VARIABLE IN . f_comparacion LLAVEIZ rust LLAVEDER
    (82) f_comparacion -> . rango
    (83) f_comparacion -> . VARIABLE
    (99) rango -> . U8 DOT DOT U8

    VARIABLE        shift and go to state 156
    U8              shift and go to state 159

    f_comparacion                  shift and go to state 157
    rango                          shift and go to state 158

state 111

    (136) vector_methods -> VARIABLE empty DOT . empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> VARIABLE empty DOT . empty POP_VEC LPAREN RPAREN
    (101) slice_get -> VARIABLE empty DOT . empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> VARIABLE empty DOT . empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (64) hashset_insert -> VARIABLE empty DOT . empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> VARIABLE empty DOT . empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (105) empty -> .

    PUSH_VEC        reduce using rule 105 (empty -> .)
    POP_VEC         reduce using rule 105 (empty -> .)
    GET_SLICE       reduce using rule 105 (empty -> .)
    CONTAINS_SLICE  reduce using rule 105 (empty -> .)
    INSERT_HASH     reduce using rule 105 (empty -> .)
    UNION_HASH      reduce using rule 105 (empty -> .)

    empty                          shift and go to state 160

state 112

    (39) other_operators -> VARIABLE oper_asig expresion_sintipo .

    ENDLINE         reduce using rule 39 (other_operators -> VARIABLE oper_asig expresion_sintipo .)


state 113

    (22) ope_u8 -> VARIABLE . signo_arit U8
    (24) ope_u8 -> VARIABLE . signo_arit ope_u8
    (27) ope_f32 -> VARIABLE . signo_arit F32
    (29) ope_f32 -> VARIABLE . signo_arit ope_f32
    (32) ope_i8 -> VARIABLE . signo_arit I8
    (34) ope_i8 -> VARIABLE . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 58

state 114

    (22) ope_u8 -> VARIABLE signo_arit U8 .
    (20) ope_u8 -> U8 . signo_arit U8
    (21) ope_u8 -> U8 . signo_arit VARIABLE
    (23) ope_u8 -> U8 . signo_arit ope_u8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 22 (ope_u8 -> VARIABLE signo_arit U8 .)
    COMMA           reduce using rule 22 (ope_u8 -> VARIABLE signo_arit U8 .)
    RPAREN          reduce using rule 22 (ope_u8 -> VARIABLE signo_arit U8 .)
    BRACKETR        reduce using rule 22 (ope_u8 -> VARIABLE signo_arit U8 .)
    LLAVEDER        reduce using rule 22 (ope_u8 -> VARIABLE signo_arit U8 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 77

state 115

    (24) ope_u8 -> VARIABLE signo_arit ope_u8 .

    ENDLINE         reduce using rule 24 (ope_u8 -> VARIABLE signo_arit ope_u8 .)
    COMMA           reduce using rule 24 (ope_u8 -> VARIABLE signo_arit ope_u8 .)
    RPAREN          reduce using rule 24 (ope_u8 -> VARIABLE signo_arit ope_u8 .)
    BRACKETR        reduce using rule 24 (ope_u8 -> VARIABLE signo_arit ope_u8 .)
    LLAVEDER        reduce using rule 24 (ope_u8 -> VARIABLE signo_arit ope_u8 .)


state 116

    (27) ope_f32 -> VARIABLE signo_arit F32 .
    (25) ope_f32 -> F32 . signo_arit F32
    (26) ope_f32 -> F32 . signo_arit VARIABLE
    (28) ope_f32 -> F32 . signo_arit ope_f32
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 27 (ope_f32 -> VARIABLE signo_arit F32 .)
    COMMA           reduce using rule 27 (ope_f32 -> VARIABLE signo_arit F32 .)
    RPAREN          reduce using rule 27 (ope_f32 -> VARIABLE signo_arit F32 .)
    BRACKETR        reduce using rule 27 (ope_f32 -> VARIABLE signo_arit F32 .)
    LLAVEDER        reduce using rule 27 (ope_f32 -> VARIABLE signo_arit F32 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 84

state 117

    (29) ope_f32 -> VARIABLE signo_arit ope_f32 .

    ENDLINE         reduce using rule 29 (ope_f32 -> VARIABLE signo_arit ope_f32 .)
    COMMA           reduce using rule 29 (ope_f32 -> VARIABLE signo_arit ope_f32 .)
    RPAREN          reduce using rule 29 (ope_f32 -> VARIABLE signo_arit ope_f32 .)
    BRACKETR        reduce using rule 29 (ope_f32 -> VARIABLE signo_arit ope_f32 .)
    LLAVEDER        reduce using rule 29 (ope_f32 -> VARIABLE signo_arit ope_f32 .)


state 118

    (32) ope_i8 -> VARIABLE signo_arit I8 .
    (30) ope_i8 -> I8 . signo_arit I8
    (31) ope_i8 -> I8 . signo_arit VARIABLE
    (33) ope_i8 -> I8 . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 32 (ope_i8 -> VARIABLE signo_arit I8 .)
    COMMA           reduce using rule 32 (ope_i8 -> VARIABLE signo_arit I8 .)
    RPAREN          reduce using rule 32 (ope_i8 -> VARIABLE signo_arit I8 .)
    BRACKETR        reduce using rule 32 (ope_i8 -> VARIABLE signo_arit I8 .)
    LLAVEDER        reduce using rule 32 (ope_i8 -> VARIABLE signo_arit I8 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 85

state 119

    (34) ope_i8 -> VARIABLE signo_arit ope_i8 .

    ENDLINE         reduce using rule 34 (ope_i8 -> VARIABLE signo_arit ope_i8 .)
    COMMA           reduce using rule 34 (ope_i8 -> VARIABLE signo_arit ope_i8 .)
    RPAREN          reduce using rule 34 (ope_i8 -> VARIABLE signo_arit ope_i8 .)
    BRACKETR        reduce using rule 34 (ope_i8 -> VARIABLE signo_arit ope_i8 .)
    LLAVEDER        reduce using rule 34 (ope_i8 -> VARIABLE signo_arit ope_i8 .)


state 120

    (91) sent_stru -> UNIT ENDLINE .

    $end            reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    LLAVEDER        reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    RETURN          reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    STRING          reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    U8              reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    F32             reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    VARIABLE        reduce using rule 91 (sent_stru -> UNIT ENDLINE .)
    I8              reduce using rule 91 (sent_stru -> UNIT ENDLINE .)


state 121

    (92) sent_stru -> TUPLE LPAREN . argumentos_tipo RPAREN ENDLINE
    (89) argumentos_tipo -> . tipos
    (90) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    argumentos_tipo                shift and go to state 161
    tipos                          shift and go to state 162

state 122

    (93) sent_stru -> VARIABLE LLAVEIZ . argumentos_juntos LLAVEDER
    (86) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (87) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (88) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 165
    PUB             shift and go to state 167

    argumentos_juntos              shift and go to state 166

state 123

    (106) while_loop -> WHILE validations LLAVEIZ . rust LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    rust                           shift and go to state 168
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 124

    (120) empty_vector -> declare_vector types_vector empty_vec .

    $end            reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    LLAVEDER        reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    RETURN          reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    STRING          reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    U8              reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    F32             reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    VARIABLE        reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)
    I8              reduce using rule 120 (empty_vector -> declare_vector types_vector empty_vec .)


state 125

    (121) data_vector -> declare_vector types_vector vector_content .

    $end            reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    LLAVEDER        reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    RETURN          reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    STRING          reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    U8              reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    F32             reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    VARIABLE        reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)
    I8              reduce using rule 121 (data_vector -> declare_vector types_vector vector_content .)


state 126

    (133) empty_vec -> ASIGNAR . VECT PATHSEP NEWFUNC ENDLINE
    (134) empty_vec -> ASIGNAR . VECTMACRO BRACKETL BRACKETR ENDLINE
    (135) empty_vec -> ASIGNAR . VECT PATHSEP FROM LPAREN RPAREN ENDLINE
    (123) vector_content -> ASIGNAR . VECTMACRO vect_list ENDLINE
    (124) vector_content -> ASIGNAR . VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE

    VECT            shift and go to state 169
    VECTMACRO       shift and go to state 170


state 127

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO . BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE

    BRACKETL        shift and go to state 171


state 128

    (129) types_vector -> VECT empty . LESST DATATYPES GREATER
    (130) types_vector -> VECT empty . LESST NUMDATATYPES GREATER

    LESST           shift and go to state 172


state 129

    (20) ope_u8 -> U8 signo_arit U8 .
    (20) ope_u8 -> U8 . signo_arit U8
    (21) ope_u8 -> U8 . signo_arit VARIABLE
    (23) ope_u8 -> U8 . signo_arit ope_u8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 20 (ope_u8 -> U8 signo_arit U8 .)
    COMMA           reduce using rule 20 (ope_u8 -> U8 signo_arit U8 .)
    RPAREN          reduce using rule 20 (ope_u8 -> U8 signo_arit U8 .)
    BRACKETR        reduce using rule 20 (ope_u8 -> U8 signo_arit U8 .)
    LLAVEDER        reduce using rule 20 (ope_u8 -> U8 signo_arit U8 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 77

state 130

    (21) ope_u8 -> U8 signo_arit VARIABLE .
    (22) ope_u8 -> VARIABLE . signo_arit U8
    (24) ope_u8 -> VARIABLE . signo_arit ope_u8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 21 (ope_u8 -> U8 signo_arit VARIABLE .)
    COMMA           reduce using rule 21 (ope_u8 -> U8 signo_arit VARIABLE .)
    RPAREN          reduce using rule 21 (ope_u8 -> U8 signo_arit VARIABLE .)
    BRACKETR        reduce using rule 21 (ope_u8 -> U8 signo_arit VARIABLE .)
    LLAVEDER        reduce using rule 21 (ope_u8 -> U8 signo_arit VARIABLE .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 173

state 131

    (23) ope_u8 -> U8 signo_arit ope_u8 .

    ENDLINE         reduce using rule 23 (ope_u8 -> U8 signo_arit ope_u8 .)
    COMMA           reduce using rule 23 (ope_u8 -> U8 signo_arit ope_u8 .)
    RPAREN          reduce using rule 23 (ope_u8 -> U8 signo_arit ope_u8 .)
    BRACKETR        reduce using rule 23 (ope_u8 -> U8 signo_arit ope_u8 .)
    LLAVEDER        reduce using rule 23 (ope_u8 -> U8 signo_arit ope_u8 .)


state 132

    (107) read_data -> IO empty PATHSEP . empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (105) empty -> .

    STDIN           reduce using rule 105 (empty -> .)

    empty                          shift and go to state 174

state 133

    (131) declare_vector -> LET MUT VARIABLE . ASIGNATION_TYPE
    (46) let_asig_sintipo -> LET MUT VARIABLE .
    (48) var_tipo -> VARIABLE .
    (49) var_tipo -> VARIABLE . ASIGNATION_TYPE tipos

  ! reduce/reduce conflict for ASIGNAR resolved using rule 46 (let_asig_sintipo -> LET MUT VARIABLE .)
    ASIGNATION_TYPE shift and go to state 175
    ASIGNAR         reduce using rule 46 (let_asig_sintipo -> LET MUT VARIABLE .)

  ! ASIGNAR         [ reduce using rule 48 (var_tipo -> VARIABLE .) ]


state 134

    (45) let_asig -> LET MUT var_tipo .

    ASIGNAR         reduce using rule 45 (let_asig -> LET MUT var_tipo .)


state 135

    (132) declare_vector -> LET VARIABLE ASIGNATION_TYPE .
    (49) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    ASIGNAR         reduce using rule 132 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    VECT            reduce using rule 132 (declare_vector -> LET VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 176

state 136

    (114) no_return_function -> FUNCTION VARIABLE LPAREN . arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> FUNCTION VARIABLE LPAREN . RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> FUNCTION VARIABLE LPAREN . arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> FUNCTION VARIABLE LPAREN . RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> FUNCTION VARIABLE LPAREN . RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (116) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (117) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    RPAREN          shift and go to state 179
    VARIABLE        shift and go to state 177

    arguments                      shift and go to state 178

state 137

    (25) ope_f32 -> F32 signo_arit F32 .
    (25) ope_f32 -> F32 . signo_arit F32
    (26) ope_f32 -> F32 . signo_arit VARIABLE
    (28) ope_f32 -> F32 . signo_arit ope_f32
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 25 (ope_f32 -> F32 signo_arit F32 .)
    COMMA           reduce using rule 25 (ope_f32 -> F32 signo_arit F32 .)
    RPAREN          reduce using rule 25 (ope_f32 -> F32 signo_arit F32 .)
    BRACKETR        reduce using rule 25 (ope_f32 -> F32 signo_arit F32 .)
    LLAVEDER        reduce using rule 25 (ope_f32 -> F32 signo_arit F32 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 84

state 138

    (26) ope_f32 -> F32 signo_arit VARIABLE .
    (27) ope_f32 -> VARIABLE . signo_arit F32
    (29) ope_f32 -> VARIABLE . signo_arit ope_f32
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 26 (ope_f32 -> F32 signo_arit VARIABLE .)
    COMMA           reduce using rule 26 (ope_f32 -> F32 signo_arit VARIABLE .)
    RPAREN          reduce using rule 26 (ope_f32 -> F32 signo_arit VARIABLE .)
    BRACKETR        reduce using rule 26 (ope_f32 -> F32 signo_arit VARIABLE .)
    LLAVEDER        reduce using rule 26 (ope_f32 -> F32 signo_arit VARIABLE .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 180

state 139

    (28) ope_f32 -> F32 signo_arit ope_f32 .

    ENDLINE         reduce using rule 28 (ope_f32 -> F32 signo_arit ope_f32 .)
    COMMA           reduce using rule 28 (ope_f32 -> F32 signo_arit ope_f32 .)
    RPAREN          reduce using rule 28 (ope_f32 -> F32 signo_arit ope_f32 .)
    BRACKETR        reduce using rule 28 (ope_f32 -> F32 signo_arit ope_f32 .)
    LLAVEDER        reduce using rule 28 (ope_f32 -> F32 signo_arit ope_f32 .)


state 140

    (30) ope_i8 -> I8 signo_arit I8 .
    (30) ope_i8 -> I8 . signo_arit I8
    (31) ope_i8 -> I8 . signo_arit VARIABLE
    (33) ope_i8 -> I8 . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 30 (ope_i8 -> I8 signo_arit I8 .)
    COMMA           reduce using rule 30 (ope_i8 -> I8 signo_arit I8 .)
    RPAREN          reduce using rule 30 (ope_i8 -> I8 signo_arit I8 .)
    BRACKETR        reduce using rule 30 (ope_i8 -> I8 signo_arit I8 .)
    LLAVEDER        reduce using rule 30 (ope_i8 -> I8 signo_arit I8 .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 85

state 141

    (31) ope_i8 -> I8 signo_arit VARIABLE .
    (32) ope_i8 -> VARIABLE . signo_arit I8
    (34) ope_i8 -> VARIABLE . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    ENDLINE         reduce using rule 31 (ope_i8 -> I8 signo_arit VARIABLE .)
    COMMA           reduce using rule 31 (ope_i8 -> I8 signo_arit VARIABLE .)
    RPAREN          reduce using rule 31 (ope_i8 -> I8 signo_arit VARIABLE .)
    BRACKETR        reduce using rule 31 (ope_i8 -> I8 signo_arit VARIABLE .)
    LLAVEDER        reduce using rule 31 (ope_i8 -> I8 signo_arit VARIABLE .)
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 181

state 142

    (33) ope_i8 -> I8 signo_arit ope_i8 .

    ENDLINE         reduce using rule 33 (ope_i8 -> I8 signo_arit ope_i8 .)
    COMMA           reduce using rule 33 (ope_i8 -> I8 signo_arit ope_i8 .)
    RPAREN          reduce using rule 33 (ope_i8 -> I8 signo_arit ope_i8 .)
    BRACKETR        reduce using rule 33 (ope_i8 -> I8 signo_arit ope_i8 .)
    LLAVEDER        reduce using rule 33 (ope_i8 -> I8 signo_arit ope_i8 .)


state 143

    (35) asignacion -> declarador ASIGNAR expresion ENDLINE .

    $end            reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    LLAVEDER        reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    RETURN          reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    STRING          reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    U8              reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    F32             reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    VARIABLE        reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)
    I8              reduce using rule 35 (asignacion -> declarador ASIGNAR expresion ENDLINE .)


state 144

    (66) conditional_asigned -> declarador ASIGNAR conditional ENDLINE .

    $end            reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    LLAVEDER        reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    RETURN          reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    STRING          reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    U8              reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    F32             reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    VARIABLE        reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)
    I8              reduce using rule 66 (conditional_asigned -> declarador ASIGNAR conditional ENDLINE .)


state 145

    (38) asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .

    $end            reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    LLAVEDER        reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    RETURN          reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    STRING          reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    U8              reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    F32             reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    VARIABLE        reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)
    I8              reduce using rule 38 (asignacion_sintipo -> declarador_sintipo ASIGNAR expresion_sintipo ENDLINE .)


state 146

    (61) hashset -> HASHSET empty . PATHSEP empty NEWFUNC

    PATHSEP         shift and go to state 182


state 147

    (100) slice_exp -> AND empty . VARIABLE empty BRACKETL rango BRACKETR

    VARIABLE        shift and go to state 183


state 148

    (55) prints -> PRINTS empty LPAREN print_expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 184


state 149

    (56) print_expresion -> STRING .
    (57) print_expresion -> STRING . COMMA print_args

    RPAREN          reduce using rule 56 (print_expresion -> STRING .)
    COMMA           shift and go to state 185


state 150

    (67) conditional -> if_type validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 186


state 151

    (72) validations -> comparison ANDAND validations .

    LLAVEIZ         reduce using rule 72 (validations -> comparison ANDAND validations .)


state 152

    (73) validations -> comparison OROR validations .

    LLAVEIZ         reduce using rule 73 (validations -> comparison OROR validations .)


state 153

    (74) comparison -> VARIABLE signo_comp VARIABLE .

    ANDAND          reduce using rule 74 (comparison -> VARIABLE signo_comp VARIABLE .)
    OROR            reduce using rule 74 (comparison -> VARIABLE signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 74 (comparison -> VARIABLE signo_comp VARIABLE .)


state 154

    (75) comparison -> VARIABLE signo_comp U8 .

    ANDAND          reduce using rule 75 (comparison -> VARIABLE signo_comp U8 .)
    OROR            reduce using rule 75 (comparison -> VARIABLE signo_comp U8 .)
    LLAVEIZ         reduce using rule 75 (comparison -> VARIABLE signo_comp U8 .)


state 155

    (76) comparison -> U8 signo_comp VARIABLE .

    ANDAND          reduce using rule 76 (comparison -> U8 signo_comp VARIABLE .)
    OROR            reduce using rule 76 (comparison -> U8 signo_comp VARIABLE .)
    LLAVEIZ         reduce using rule 76 (comparison -> U8 signo_comp VARIABLE .)


state 156

    (83) f_comparacion -> VARIABLE .

    LLAVEIZ         reduce using rule 83 (f_comparacion -> VARIABLE .)


state 157

    (84) for_loop -> FOR VARIABLE IN f_comparacion . LLAVEIZ rust LLAVEDER

    LLAVEIZ         shift and go to state 187


state 158

    (82) f_comparacion -> rango .

    LLAVEIZ         reduce using rule 82 (f_comparacion -> rango .)


state 159

    (99) rango -> U8 . DOT DOT U8

    DOT             shift and go to state 188


state 160

    (136) vector_methods -> VARIABLE empty DOT empty . PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> VARIABLE empty DOT empty . POP_VEC LPAREN RPAREN
    (101) slice_get -> VARIABLE empty DOT empty . GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> VARIABLE empty DOT empty . CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (64) hashset_insert -> VARIABLE empty DOT empty . INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> VARIABLE empty DOT empty . UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    PUSH_VEC        shift and go to state 189
    POP_VEC         shift and go to state 190
    GET_SLICE       shift and go to state 191
    CONTAINS_SLICE  shift and go to state 192
    INSERT_HASH     shift and go to state 193
    UNION_HASH      shift and go to state 194


state 161

    (92) sent_stru -> TUPLE LPAREN argumentos_tipo . RPAREN ENDLINE

    RPAREN          shift and go to state 195


state 162

    (89) argumentos_tipo -> tipos .
    (90) argumentos_tipo -> tipos . COMMA argumentos_tipo

    RPAREN          reduce using rule 89 (argumentos_tipo -> tipos .)
    COMMA           shift and go to state 196


state 163

    (138) tipos -> DATATYPES .

    COMMA           reduce using rule 138 (tipos -> DATATYPES .)
    RPAREN          reduce using rule 138 (tipos -> DATATYPES .)
    ASIGNAR         reduce using rule 138 (tipos -> DATATYPES .)
    LLAVEDER        reduce using rule 138 (tipos -> DATATYPES .)
    LLAVEIZ         reduce using rule 138 (tipos -> DATATYPES .)


state 164

    (139) tipos -> NUMDATATYPES .

    COMMA           reduce using rule 139 (tipos -> NUMDATATYPES .)
    RPAREN          reduce using rule 139 (tipos -> NUMDATATYPES .)
    ASIGNAR         reduce using rule 139 (tipos -> NUMDATATYPES .)
    LLAVEDER        reduce using rule 139 (tipos -> NUMDATATYPES .)
    LLAVEIZ         reduce using rule 139 (tipos -> NUMDATATYPES .)


state 165

    (86) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos
    (87) argumentos_juntos -> VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 197


state 166

    (93) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos . LLAVEDER

    LLAVEDER        shift and go to state 198


state 167

    (88) argumentos_juntos -> PUB . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 199


state 168

    (106) while_loop -> WHILE validations LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 200


state 169

    (133) empty_vec -> ASIGNAR VECT . PATHSEP NEWFUNC ENDLINE
    (135) empty_vec -> ASIGNAR VECT . PATHSEP FROM LPAREN RPAREN ENDLINE
    (124) vector_content -> ASIGNAR VECT . PATHSEP FROM LPAREN vect_list RPAREN ENDLINE

    PATHSEP         shift and go to state 201


state 170

    (134) empty_vec -> ASIGNAR VECTMACRO . BRACKETL BRACKETR ENDLINE
    (123) vector_content -> ASIGNAR VECTMACRO . vect_list ENDLINE
    (125) vect_list -> . BRACKETL vector_elements BRACKETR

    BRACKETL        shift and go to state 202

    vect_list                      shift and go to state 203

state 171

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL . element_type COMMA vector_elements BRACKETR ENDLINE
    (128) element_type -> . U8 empty NUMDATATYPES

    U8              shift and go to state 205

    element_type                   shift and go to state 204

state 172

    (129) types_vector -> VECT empty LESST . DATATYPES GREATER
    (130) types_vector -> VECT empty LESST . NUMDATATYPES GREATER

    DATATYPES       shift and go to state 206
    NUMDATATYPES    shift and go to state 207


state 173

    (22) ope_u8 -> VARIABLE signo_arit . U8
    (24) ope_u8 -> VARIABLE signo_arit . ope_u8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8

    U8              shift and go to state 114
    VARIABLE        shift and go to state 208

    ope_u8                         shift and go to state 115

state 174

    (107) read_data -> IO empty PATHSEP empty . STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    STDIN           shift and go to state 209


state 175

    (131) declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .
    (49) var_tipo -> VARIABLE ASIGNATION_TYPE . tipos
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    ASIGNAR         reduce using rule 131 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    VECT            reduce using rule 131 (declare_vector -> LET MUT VARIABLE ASIGNATION_TYPE .)
    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 176

state 176

    (49) var_tipo -> VARIABLE ASIGNATION_TYPE tipos .

    ASIGNAR         reduce using rule 49 (var_tipo -> VARIABLE ASIGNATION_TYPE tipos .)


state 177

    (116) arguments -> VARIABLE . ASIGNATION_TYPE tipos
    (117) arguments -> VARIABLE . ASIGNATION_TYPE tipos COMMA arguments

    ASIGNATION_TYPE shift and go to state 210


state 178

    (114) no_return_function -> FUNCTION VARIABLE LPAREN arguments . RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> FUNCTION VARIABLE LPAREN arguments . RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER

    RPAREN          shift and go to state 211


state 179

    (115) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN . LLAVEIZ rust LLAVEDER
    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN . ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> FUNCTION VARIABLE LPAREN RPAREN . ARROW tipos LLAVEIZ return LLAVEDER

    LLAVEIZ         shift and go to state 212
    ARROW           shift and go to state 213


state 180

    (27) ope_f32 -> VARIABLE signo_arit . F32
    (29) ope_f32 -> VARIABLE signo_arit . ope_f32
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32

    F32             shift and go to state 116
    VARIABLE        shift and go to state 214

    ope_f32                        shift and go to state 117

state 181

    (32) ope_i8 -> VARIABLE signo_arit . I8
    (34) ope_i8 -> VARIABLE signo_arit . ope_i8
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    I8              shift and go to state 118
    VARIABLE        shift and go to state 215

    ope_i8                         shift and go to state 119

state 182

    (61) hashset -> HASHSET empty PATHSEP . empty NEWFUNC
    (105) empty -> .

    NEWFUNC         reduce using rule 105 (empty -> .)

    empty                          shift and go to state 216

state 183

    (100) slice_exp -> AND empty VARIABLE . empty BRACKETL rango BRACKETR
    (105) empty -> .

    BRACKETL        reduce using rule 105 (empty -> .)

    empty                          shift and go to state 217

state 184

    (55) prints -> PRINTS empty LPAREN print_expresion RPAREN . empty ENDLINE
    (105) empty -> .

    ENDLINE         reduce using rule 105 (empty -> .)

    empty                          shift and go to state 218

state 185

    (57) print_expresion -> STRING COMMA . print_args
    (58) print_args -> . print_datos COMMA print_args
    (59) print_args -> . print_datos
    (60) print_datos -> . expresion
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    print_args                     shift and go to state 219
    print_datos                    shift and go to state 220
    expresion                      shift and go to state 221
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 186

    (67) conditional -> if_type validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    ENDLINE         reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)
    I8              reduce using rule 67 (conditional -> if_type validations LLAVEIZ rust LLAVEDER .)


state 187

    (84) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ . rust LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    rust                           shift and go to state 222
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 188

    (99) rango -> U8 DOT . DOT U8

    DOT             shift and go to state 223


state 189

    (136) vector_methods -> VARIABLE empty DOT empty PUSH_VEC . LPAREN expresion RPAREN

    LPAREN          shift and go to state 224


state 190

    (137) vector_methods -> VARIABLE empty DOT empty POP_VEC . LPAREN RPAREN

    LPAREN          shift and go to state 225


state 191

    (101) slice_get -> VARIABLE empty DOT empty GET_SLICE . empty LPAREN valor_get RPAREN
    (105) empty -> .

    LPAREN          reduce using rule 105 (empty -> .)

    empty                          shift and go to state 226

state 192

    (104) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE . empty LPAREN AND U8 RPAREN
    (105) empty -> .

    LPAREN          reduce using rule 105 (empty -> .)

    empty                          shift and go to state 227

state 193

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH . empty LPAREN expresion RPAREN empty ENDLINE
    (105) empty -> .

    LPAREN          reduce using rule 105 (empty -> .)

    empty                          shift and go to state 228

state 194

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH . empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (105) empty -> .

    LPAREN          reduce using rule 105 (empty -> .)

    empty                          shift and go to state 229

state 195

    (92) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN . ENDLINE

    ENDLINE         shift and go to state 230


state 196

    (90) argumentos_tipo -> tipos COMMA . argumentos_tipo
    (89) argumentos_tipo -> . tipos
    (90) argumentos_tipo -> . tipos COMMA argumentos_tipo
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 162
    argumentos_tipo                shift and go to state 231

state 197

    (86) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos
    (87) argumentos_juntos -> VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 232

state 198

    (93) sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .

    $end            reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    LLAVEDER        reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    RETURN          reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    STRING          reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    U8              reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    F32             reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    VARIABLE        reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)
    I8              reduce using rule 93 (sent_stru -> VARIABLE LLAVEIZ argumentos_juntos LLAVEDER .)


state 199

    (88) argumentos_juntos -> PUB VARIABLE . ASIGNATION_TYPE tipos COMMA argumentos_juntos

    ASIGNATION_TYPE shift and go to state 233


state 200

    (106) while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)
    I8              reduce using rule 106 (while_loop -> WHILE validations LLAVEIZ rust LLAVEDER .)


state 201

    (133) empty_vec -> ASIGNAR VECT PATHSEP . NEWFUNC ENDLINE
    (135) empty_vec -> ASIGNAR VECT PATHSEP . FROM LPAREN RPAREN ENDLINE
    (124) vector_content -> ASIGNAR VECT PATHSEP . FROM LPAREN vect_list RPAREN ENDLINE

    NEWFUNC         shift and go to state 234
    FROM            shift and go to state 235


state 202

    (134) empty_vec -> ASIGNAR VECTMACRO BRACKETL . BRACKETR ENDLINE
    (125) vect_list -> BRACKETL . vector_elements BRACKETR
    (126) vector_elements -> . expresion
    (127) vector_elements -> . expresion COMMA vector_elements
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    BRACKETR        shift and go to state 236
    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    vector_elements                shift and go to state 237
    expresion                      shift and go to state 238
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 203

    (123) vector_content -> ASIGNAR VECTMACRO vect_list . ENDLINE

    ENDLINE         shift and go to state 239


state 204

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type . COMMA vector_elements BRACKETR ENDLINE

    COMMA           shift and go to state 240


state 205

    (128) element_type -> U8 . empty NUMDATATYPES
    (105) empty -> .

    NUMDATATYPES    reduce using rule 105 (empty -> .)

    empty                          shift and go to state 241

state 206

    (129) types_vector -> VECT empty LESST DATATYPES . GREATER

    GREATER         shift and go to state 242


state 207

    (130) types_vector -> VECT empty LESST NUMDATATYPES . GREATER

    GREATER         shift and go to state 243


state 208

    (22) ope_u8 -> VARIABLE . signo_arit U8
    (24) ope_u8 -> VARIABLE . signo_arit ope_u8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 173

state 209

    (107) read_data -> IO empty PATHSEP empty STDIN . LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 244


state 210

    (116) arguments -> VARIABLE ASIGNATION_TYPE . tipos
    (117) arguments -> VARIABLE ASIGNATION_TYPE . tipos COMMA arguments
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 245

state 211

    (114) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN . LLAVEIZ rust LLAVEDER
    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN . ARROW tipos LLAVEIZ rust return LLAVEDER

    LLAVEIZ         shift and go to state 246
    ARROW           shift and go to state 247


state 212

    (115) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ . rust LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    rust                           shift and go to state 248
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 213

    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW . tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW . tipos LLAVEIZ return LLAVEDER
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 249

state 214

    (27) ope_f32 -> VARIABLE . signo_arit F32
    (29) ope_f32 -> VARIABLE . signo_arit ope_f32
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 180

state 215

    (32) ope_i8 -> VARIABLE . signo_arit I8
    (34) ope_i8 -> VARIABLE . signo_arit ope_i8
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

    signo_arit                     shift and go to state 181

state 216

    (61) hashset -> HASHSET empty PATHSEP empty . NEWFUNC

    NEWFUNC         shift and go to state 250


state 217

    (100) slice_exp -> AND empty VARIABLE empty . BRACKETL rango BRACKETR

    BRACKETL        shift and go to state 251


state 218

    (55) prints -> PRINTS empty LPAREN print_expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 252


state 219

    (57) print_expresion -> STRING COMMA print_args .

    RPAREN          reduce using rule 57 (print_expresion -> STRING COMMA print_args .)


state 220

    (58) print_args -> print_datos . COMMA print_args
    (59) print_args -> print_datos .

    COMMA           shift and go to state 253
    RPAREN          reduce using rule 59 (print_args -> print_datos .)


state 221

    (60) print_datos -> expresion .

    COMMA           reduce using rule 60 (print_datos -> expresion .)
    RPAREN          reduce using rule 60 (print_datos -> expresion .)


state 222

    (84) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 254


state 223

    (99) rango -> U8 DOT DOT . U8

    U8              shift and go to state 255


state 224

    (136) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN . expresion RPAREN
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    expresion                      shift and go to state 256
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 225

    (137) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN . RPAREN

    RPAREN          shift and go to state 257


state 226

    (101) slice_get -> VARIABLE empty DOT empty GET_SLICE empty . LPAREN valor_get RPAREN

    LPAREN          shift and go to state 258


state 227

    (104) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty . LPAREN AND U8 RPAREN

    LPAREN          shift and go to state 259


state 228

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty . LPAREN expresion RPAREN empty ENDLINE

    LPAREN          shift and go to state 260


state 229

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty . LPAREN AND empty VARIABLE RPAREN empty ENDLINE

    LPAREN          shift and go to state 261


state 230

    (92) sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .

    $end            reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    RETURN          reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    STRING          reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    U8              reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    F32             reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    VARIABLE        reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)
    I8              reduce using rule 92 (sent_stru -> TUPLE LPAREN argumentos_tipo RPAREN ENDLINE .)


state 231

    (90) argumentos_tipo -> tipos COMMA argumentos_tipo .

    RPAREN          reduce using rule 90 (argumentos_tipo -> tipos COMMA argumentos_tipo .)


state 232

    (86) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .
    (87) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    LLAVEDER        reduce using rule 86 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 262


state 233

    (88) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE . tipos COMMA argumentos_juntos
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 263

state 234

    (133) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC . ENDLINE

    ENDLINE         shift and go to state 264


state 235

    (135) empty_vec -> ASIGNAR VECT PATHSEP FROM . LPAREN RPAREN ENDLINE
    (124) vector_content -> ASIGNAR VECT PATHSEP FROM . LPAREN vect_list RPAREN ENDLINE

    LPAREN          shift and go to state 265


state 236

    (134) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR . ENDLINE

    ENDLINE         shift and go to state 266


state 237

    (125) vect_list -> BRACKETL vector_elements . BRACKETR

    BRACKETR        shift and go to state 267


state 238

    (126) vector_elements -> expresion .
    (127) vector_elements -> expresion . COMMA vector_elements

    BRACKETR        reduce using rule 126 (vector_elements -> expresion .)
    COMMA           shift and go to state 268


state 239

    (123) vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .

    $end            reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    LLAVEDER        reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    RETURN          reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    STRING          reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    U8              reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    F32             reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    VARIABLE        reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)
    I8              reduce using rule 123 (vector_content -> ASIGNAR VECTMACRO vect_list ENDLINE .)


state 240

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA . vector_elements BRACKETR ENDLINE
    (126) vector_elements -> . expresion
    (127) vector_elements -> . expresion COMMA vector_elements
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    vector_elements                shift and go to state 269
    expresion                      shift and go to state 238
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 241

    (128) element_type -> U8 empty . NUMDATATYPES

    NUMDATATYPES    shift and go to state 270


state 242

    (129) types_vector -> VECT empty LESST DATATYPES GREATER .

    ASIGNAR         reduce using rule 129 (types_vector -> VECT empty LESST DATATYPES GREATER .)


state 243

    (130) types_vector -> VECT empty LESST NUMDATATYPES GREATER .

    ASIGNAR         reduce using rule 130 (types_vector -> VECT empty LESST NUMDATATYPES GREATER .)


state 244

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN . RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE

    RPAREN          shift and go to state 271


state 245

    (116) arguments -> VARIABLE ASIGNATION_TYPE tipos .
    (117) arguments -> VARIABLE ASIGNATION_TYPE tipos . COMMA arguments

    RPAREN          reduce using rule 116 (arguments -> VARIABLE ASIGNATION_TYPE tipos .)
    COMMA           shift and go to state 272


state 246

    (114) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ . rust LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    rust                           shift and go to state 273
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 247

    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW . tipos LLAVEIZ rust return LLAVEDER
    (138) tipos -> . DATATYPES
    (139) tipos -> . NUMDATATYPES

    DATATYPES       shift and go to state 163
    NUMDATATYPES    shift and go to state 164

    tipos                          shift and go to state 274

state 248

    (115) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 275


state 249

    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos . LLAVEIZ rust return LLAVEDER
    (113) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos . LLAVEIZ return LLAVEDER

    LLAVEIZ         shift and go to state 276


state 250

    (61) hashset -> HASHSET empty PATHSEP empty NEWFUNC .

    ENDLINE         reduce using rule 61 (hashset -> HASHSET empty PATHSEP empty NEWFUNC .)


state 251

    (100) slice_exp -> AND empty VARIABLE empty BRACKETL . rango BRACKETR
    (99) rango -> . U8 DOT DOT U8

    U8              shift and go to state 159

    rango                          shift and go to state 277

state 252

    (55) prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .

    $end            reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    RETURN          reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    STRING          reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    U8              reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    F32             reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    VARIABLE        reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)
    I8              reduce using rule 55 (prints -> PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE .)


state 253

    (58) print_args -> print_datos COMMA . print_args
    (58) print_args -> . print_datos COMMA print_args
    (59) print_args -> . print_datos
    (60) print_datos -> . expresion
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    print_datos                    shift and go to state 220
    print_args                     shift and go to state 278
    expresion                      shift and go to state 221
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 254

    (84) for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)
    I8              reduce using rule 84 (for_loop -> FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER .)


state 255

    (99) rango -> U8 DOT DOT U8 .

    LLAVEIZ         reduce using rule 99 (rango -> U8 DOT DOT U8 .)
    BRACKETR        reduce using rule 99 (rango -> U8 DOT DOT U8 .)
    RPAREN          reduce using rule 99 (rango -> U8 DOT DOT U8 .)


state 256

    (136) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion . RPAREN

    RPAREN          shift and go to state 279


state 257

    (137) vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .

    $end            reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    LLAVEDER        reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    RETURN          reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    STRING          reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    U8              reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    F32             reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    VARIABLE        reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)
    I8              reduce using rule 137 (vector_methods -> VARIABLE empty DOT empty POP_VEC LPAREN RPAREN .)


state 258

    (101) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN . valor_get RPAREN
    (102) valor_get -> . rango
    (103) valor_get -> . U8
    (99) rango -> . U8 DOT DOT U8

    U8              shift and go to state 282

    valor_get                      shift and go to state 280
    rango                          shift and go to state 281

state 259

    (104) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN . AND U8 RPAREN

    AND             shift and go to state 283


state 260

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN . expresion RPAREN empty ENDLINE
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    expresion                      shift and go to state 284
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 261

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN . AND empty VARIABLE RPAREN empty ENDLINE

    AND             shift and go to state 285


state 262

    (87) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (86) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (87) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (88) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 165
    PUB             shift and go to state 167

    argumentos_juntos              shift and go to state 286

state 263

    (88) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos . COMMA argumentos_juntos

    COMMA           shift and go to state 287


state 264

    (133) empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .

    $end            reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    LLAVEDER        reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    RETURN          reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    STRING          reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    U8              reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    F32             reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    VARIABLE        reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)
    I8              reduce using rule 133 (empty_vec -> ASIGNAR VECT PATHSEP NEWFUNC ENDLINE .)


state 265

    (135) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN . RPAREN ENDLINE
    (124) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN . vect_list RPAREN ENDLINE
    (125) vect_list -> . BRACKETL vector_elements BRACKETR

    RPAREN          shift and go to state 288
    BRACKETL        shift and go to state 290

    vect_list                      shift and go to state 289

state 266

    (134) empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .

    $end            reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    LLAVEDER        reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    RETURN          reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    STRING          reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    U8              reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    F32             reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    VARIABLE        reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)
    I8              reduce using rule 134 (empty_vec -> ASIGNAR VECTMACRO BRACKETL BRACKETR ENDLINE .)


state 267

    (125) vect_list -> BRACKETL vector_elements BRACKETR .

    ENDLINE         reduce using rule 125 (vect_list -> BRACKETL vector_elements BRACKETR .)
    RPAREN          reduce using rule 125 (vect_list -> BRACKETL vector_elements BRACKETR .)


state 268

    (127) vector_elements -> expresion COMMA . vector_elements
    (126) vector_elements -> . expresion
    (127) vector_elements -> . expresion COMMA vector_elements
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    expresion                      shift and go to state 238
    vector_elements                shift and go to state 291
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 269

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements . BRACKETR ENDLINE

    BRACKETR        shift and go to state 292


state 270

    (128) element_type -> U8 empty NUMDATATYPES .

    COMMA           reduce using rule 128 (element_type -> U8 empty NUMDATATYPES .)


state 271

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN . empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (105) empty -> .

    DOT             reduce using rule 105 (empty -> .)

    empty                          shift and go to state 293

state 272

    (117) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA . arguments
    (116) arguments -> . VARIABLE ASIGNATION_TYPE tipos
    (117) arguments -> . VARIABLE ASIGNATION_TYPE tipos COMMA arguments

    VARIABLE        shift and go to state 177

    arguments                      shift and go to state 294

state 273

    (114) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust . LLAVEDER

    LLAVEDER        shift and go to state 295


state 274

    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos . LLAVEIZ rust return LLAVEDER

    LLAVEIZ         shift and go to state 296


state 275

    (115) no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)
    I8              reduce using rule 115 (no_return_function -> FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER .)


state 276

    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ . rust return LLAVEDER
    (113) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ . return LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (118) return -> . RETURN expresion ENDLINE
    (119) return -> . expresion
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    RETURN          shift and go to state 300
    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 297
    IO              shift and go to state 32
    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    I8              shift and go to state 45

    rust                           shift and go to state 298
    return                         shift and go to state 299
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    expresion                      shift and go to state 301
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 302
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 277

    (100) slice_exp -> AND empty VARIABLE empty BRACKETL rango . BRACKETR

    BRACKETR        shift and go to state 303


state 278

    (58) print_args -> print_datos COMMA print_args .

    RPAREN          reduce using rule 58 (print_args -> print_datos COMMA print_args .)


state 279

    (136) vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .

    $end            reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    LLAVEDER        reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    RETURN          reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    STRING          reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    U8              reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    F32             reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    VARIABLE        reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)
    I8              reduce using rule 136 (vector_methods -> VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN .)


state 280

    (101) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get . RPAREN

    RPAREN          shift and go to state 304


state 281

    (102) valor_get -> rango .

    RPAREN          reduce using rule 102 (valor_get -> rango .)


state 282

    (103) valor_get -> U8 .
    (99) rango -> U8 . DOT DOT U8

    RPAREN          reduce using rule 103 (valor_get -> U8 .)
    DOT             shift and go to state 188


state 283

    (104) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND . U8 RPAREN

    U8              shift and go to state 305


state 284

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion . RPAREN empty ENDLINE

    RPAREN          shift and go to state 306


state 285

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND . empty VARIABLE RPAREN empty ENDLINE
    (105) empty -> .

    VARIABLE        reduce using rule 105 (empty -> .)

    empty                          shift and go to state 307

state 286

    (87) argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 87 (argumentos_juntos -> VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)


state 287

    (88) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA . argumentos_juntos
    (86) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos
    (87) argumentos_juntos -> . VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos
    (88) argumentos_juntos -> . PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos

    VARIABLE        shift and go to state 165
    PUB             shift and go to state 167

    argumentos_juntos              shift and go to state 308

state 288

    (135) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN . ENDLINE

    ENDLINE         shift and go to state 309


state 289

    (124) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list . RPAREN ENDLINE

    RPAREN          shift and go to state 310


state 290

    (125) vect_list -> BRACKETL . vector_elements BRACKETR
    (126) vector_elements -> . expresion
    (127) vector_elements -> . expresion COMMA vector_elements
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    vector_elements                shift and go to state 237
    expresion                      shift and go to state 238
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 291

    (127) vector_elements -> expresion COMMA vector_elements .

    BRACKETR        reduce using rule 127 (vector_elements -> expresion COMMA vector_elements .)


state 292

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR . ENDLINE

    ENDLINE         shift and go to state 311


state 293

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty . DOT empty READ LPAREN reference RPAREN ENDLINE

    DOT             shift and go to state 312


state 294

    (117) arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .

    RPAREN          reduce using rule 117 (arguments -> VARIABLE ASIGNATION_TYPE tipos COMMA arguments .)


state 295

    (114) no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .

    $end            reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    LLAVEDER        reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    RETURN          reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    STRING          reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    U8              reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    F32             reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    VARIABLE        reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)
    I8              reduce using rule 114 (no_return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER .)


state 296

    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ . rust return LLAVEDER
    (4) rust -> . asignacion
    (5) rust -> . asignacion_sintipo
    (6) rust -> . prints
    (7) rust -> . hashfunc
    (8) rust -> . conditional
    (9) rust -> . conditional_asigned
    (10) rust -> . for_loop
    (11) rust -> . struct_s
    (12) rust -> . while_loop
    (13) rust -> . empty_vector
    (14) rust -> . vector_methods
    (15) rust -> . data_vector
    (16) rust -> . slice_get
    (17) rust -> . slice_contains
    (18) rust -> . read_data
    (19) rust -> . function
    (35) asignacion -> . declarador ASIGNAR expresion ENDLINE
    (36) asignacion -> . other_operators ENDLINE
    (37) asignacion -> . op_mat ENDLINE
    (38) asignacion_sintipo -> . declarador_sintipo ASIGNAR expresion_sintipo ENDLINE
    (55) prints -> . PRINTS empty LPAREN print_expresion RPAREN empty ENDLINE
    (62) hashfunc -> . hashset_insert
    (63) hashfunc -> . hashset_union
    (67) conditional -> . if_type validations LLAVEIZ rust LLAVEDER
    (66) conditional_asigned -> . declarador ASIGNAR conditional ENDLINE
    (84) for_loop -> . FOR VARIABLE IN f_comparacion LLAVEIZ rust LLAVEDER
    (85) struct_s -> . STRUCT sent_stru
    (106) while_loop -> . WHILE validations LLAVEIZ rust LLAVEDER
    (120) empty_vector -> . declare_vector types_vector empty_vec
    (136) vector_methods -> . VARIABLE empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> . VARIABLE empty DOT empty POP_VEC LPAREN RPAREN
    (121) data_vector -> . declare_vector types_vector vector_content
    (122) data_vector -> . declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE
    (101) slice_get -> . VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> . VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (107) read_data -> . IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE
    (109) function -> . no_return_function
    (110) function -> . return_function
    (40) declarador -> . VARIABLE
    (41) declarador -> . let_asig
    (39) other_operators -> . VARIABLE oper_asig expresion_sintipo
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (42) declarador_sintipo -> . VARIABLE
    (43) declarador_sintipo -> . let_asig_sintipo
    (64) hashset_insert -> . VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> . VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (68) if_type -> . IF
    (69) if_type -> . ELSE IF
    (70) if_type -> . ELSE
    (131) declare_vector -> . LET MUT VARIABLE ASIGNATION_TYPE
    (132) declare_vector -> . LET VARIABLE ASIGNATION_TYPE
    (114) no_return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN LLAVEIZ rust LLAVEDER
    (115) no_return_function -> . FUNCTION VARIABLE LPAREN RPAREN LLAVEIZ rust LLAVEDER
    (111) return_function -> . FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (112) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER
    (113) return_function -> . FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER
    (44) let_asig -> . LET var_tipo
    (45) let_asig -> . LET MUT var_tipo
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8
    (46) let_asig_sintipo -> . LET MUT VARIABLE
    (47) let_asig_sintipo -> . LET VARIABLE

    PRINTS          shift and go to state 22
    FOR             shift and go to state 26
    STRUCT          shift and go to state 28
    WHILE           shift and go to state 29
    VARIABLE        shift and go to state 27
    IO              shift and go to state 32
    IF              shift and go to state 40
    ELSE            shift and go to state 41
    LET             shift and go to state 42
    FUNCTION        shift and go to state 43
    U8              shift and go to state 31
    F32             shift and go to state 44
    I8              shift and go to state 45

    rust                           shift and go to state 313
    asignacion                     shift and go to state 2
    asignacion_sintipo             shift and go to state 3
    prints                         shift and go to state 4
    hashfunc                       shift and go to state 5
    conditional                    shift and go to state 6
    conditional_asigned            shift and go to state 7
    for_loop                       shift and go to state 8
    struct_s                       shift and go to state 9
    while_loop                     shift and go to state 10
    empty_vector                   shift and go to state 11
    vector_methods                 shift and go to state 12
    data_vector                    shift and go to state 13
    slice_get                      shift and go to state 14
    slice_contains                 shift and go to state 15
    read_data                      shift and go to state 16
    function                       shift and go to state 17
    declarador                     shift and go to state 18
    other_operators                shift and go to state 19
    op_mat                         shift and go to state 20
    declarador_sintipo             shift and go to state 21
    hashset_insert                 shift and go to state 23
    hashset_union                  shift and go to state 24
    if_type                        shift and go to state 25
    declare_vector                 shift and go to state 30
    no_return_function             shift and go to state 33
    return_function                shift and go to state 34
    let_asig                       shift and go to state 35
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38
    let_asig_sintipo               shift and go to state 39

state 297

    (136) vector_methods -> VARIABLE . empty DOT empty PUSH_VEC LPAREN expresion RPAREN
    (137) vector_methods -> VARIABLE . empty DOT empty POP_VEC LPAREN RPAREN
    (101) slice_get -> VARIABLE . empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN
    (104) slice_contains -> VARIABLE . empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN
    (143) expresion -> VARIABLE .
    (40) declarador -> VARIABLE .
    (39) other_operators -> VARIABLE . oper_asig expresion_sintipo
    (42) declarador_sintipo -> VARIABLE .
    (64) hashset_insert -> VARIABLE . empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE
    (65) hashset_union -> VARIABLE . empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE
    (22) ope_u8 -> VARIABLE . signo_arit U8
    (24) ope_u8 -> VARIABLE . signo_arit ope_u8
    (27) ope_f32 -> VARIABLE . signo_arit F32
    (29) ope_f32 -> VARIABLE . signo_arit ope_f32
    (32) ope_i8 -> VARIABLE . signo_arit I8
    (34) ope_i8 -> VARIABLE . signo_arit ope_i8
    (105) empty -> .
    (50) oper_asig -> . ASIGNAR
    (51) oper_asig -> . PLUSEQ
    (52) oper_asig -> . MINUSEQ
    (53) oper_asig -> . STAREQ
    (54) oper_asig -> . SLASHEQ
    (94) signo_arit -> . MAS
    (95) signo_arit -> . MENOS
    (96) signo_arit -> . MULT
    (97) signo_arit -> . DIVISION
    (98) signo_arit -> . MODULO

  ! reduce/reduce conflict for ASIGNAR resolved using rule 40 (declarador -> VARIABLE .)
  ! shift/reduce conflict for ASIGNAR resolved as shift
    LLAVEDER        reduce using rule 143 (expresion -> VARIABLE .)
    DOT             reduce using rule 105 (empty -> .)
    ASIGNAR         shift and go to state 59
    PLUSEQ          shift and go to state 60
    MINUSEQ         shift and go to state 61
    STAREQ          shift and go to state 62
    SLASHEQ         shift and go to state 63
    MAS             shift and go to state 64
    MENOS           shift and go to state 65
    MULT            shift and go to state 66
    DIVISION        shift and go to state 67
    MODULO          shift and go to state 68

  ! ASIGNAR         [ reduce using rule 40 (declarador -> VARIABLE .) ]
  ! ASIGNAR         [ reduce using rule 42 (declarador_sintipo -> VARIABLE .) ]

    empty                          shift and go to state 56
    oper_asig                      shift and go to state 57
    signo_arit                     shift and go to state 58

state 298

    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust . return LLAVEDER
    (118) return -> . RETURN expresion ENDLINE
    (119) return -> . expresion
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    RETURN          shift and go to state 300
    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    return                         shift and go to state 314
    expresion                      shift and go to state 301
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 299

    (113) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return . LLAVEDER

    LLAVEDER        shift and go to state 315


state 300

    (118) return -> RETURN . expresion ENDLINE
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    expresion                      shift and go to state 316
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 301

    (119) return -> expresion .

    LLAVEDER        reduce using rule 119 (return -> expresion .)


state 302

    (37) asignacion -> op_mat . ENDLINE
    (144) expresion -> op_mat .

    ENDLINE         shift and go to state 48
    LLAVEDER        reduce using rule 144 (expresion -> op_mat .)


state 303

    (100) slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .

    ENDLINE         reduce using rule 100 (slice_exp -> AND empty VARIABLE empty BRACKETL rango BRACKETR .)


state 304

    (101) slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .

    $end            reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    LLAVEDER        reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    RETURN          reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    STRING          reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    U8              reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    F32             reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    VARIABLE        reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)
    I8              reduce using rule 101 (slice_get -> VARIABLE empty DOT empty GET_SLICE empty LPAREN valor_get RPAREN .)


state 305

    (104) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 . RPAREN

    RPAREN          shift and go to state 317


state 306

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN . empty ENDLINE
    (105) empty -> .

    ENDLINE         reduce using rule 105 (empty -> .)

    empty                          shift and go to state 318

state 307

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty . VARIABLE RPAREN empty ENDLINE

    VARIABLE        shift and go to state 319


state 308

    (88) argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .

    LLAVEDER        reduce using rule 88 (argumentos_juntos -> PUB VARIABLE ASIGNATION_TYPE tipos COMMA argumentos_juntos .)


state 309

    (135) empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .

    $end            reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    RETURN          reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    STRING          reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    U8              reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    F32             reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    VARIABLE        reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)
    I8              reduce using rule 135 (empty_vec -> ASIGNAR VECT PATHSEP FROM LPAREN RPAREN ENDLINE .)


state 310

    (124) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN . ENDLINE

    ENDLINE         shift and go to state 320


state 311

    (122) data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .

    $end            reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    LLAVEDER        reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    RETURN          reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    STRING          reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    U8              reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    F32             reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    VARIABLE        reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)
    I8              reduce using rule 122 (data_vector -> declare_vector ASIGNAR VECTMACRO BRACKETL element_type COMMA vector_elements BRACKETR ENDLINE .)


state 312

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT . empty READ LPAREN reference RPAREN ENDLINE
    (105) empty -> .

    READ            reduce using rule 105 (empty -> .)

    empty                          shift and go to state 321

state 313

    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust . return LLAVEDER
    (118) return -> . RETURN expresion ENDLINE
    (119) return -> . expresion
    (140) expresion -> . STRING
    (141) expresion -> . U8
    (142) expresion -> . F32
    (143) expresion -> . VARIABLE
    (144) expresion -> . op_mat
    (1) op_mat -> . ope_u8
    (2) op_mat -> . ope_f32
    (3) op_mat -> . ope_i8
    (20) ope_u8 -> . U8 signo_arit U8
    (21) ope_u8 -> . U8 signo_arit VARIABLE
    (22) ope_u8 -> . VARIABLE signo_arit U8
    (23) ope_u8 -> . U8 signo_arit ope_u8
    (24) ope_u8 -> . VARIABLE signo_arit ope_u8
    (25) ope_f32 -> . F32 signo_arit F32
    (26) ope_f32 -> . F32 signo_arit VARIABLE
    (27) ope_f32 -> . VARIABLE signo_arit F32
    (28) ope_f32 -> . F32 signo_arit ope_f32
    (29) ope_f32 -> . VARIABLE signo_arit ope_f32
    (30) ope_i8 -> . I8 signo_arit I8
    (31) ope_i8 -> . I8 signo_arit VARIABLE
    (32) ope_i8 -> . VARIABLE signo_arit I8
    (33) ope_i8 -> . I8 signo_arit ope_i8
    (34) ope_i8 -> . VARIABLE signo_arit ope_i8

    RETURN          shift and go to state 300
    STRING          shift and go to state 88
    U8              shift and go to state 89
    F32             shift and go to state 90
    VARIABLE        shift and go to state 91
    I8              shift and go to state 45

    return                         shift and go to state 322
    expresion                      shift and go to state 301
    op_mat                         shift and go to state 92
    ope_u8                         shift and go to state 36
    ope_f32                        shift and go to state 37
    ope_i8                         shift and go to state 38

state 314

    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return . LLAVEDER

    LLAVEDER        shift and go to state 323


state 315

    (113) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .

    $end            reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    LLAVEDER        reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    RETURN          reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    STRING          reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    U8              reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    F32             reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    VARIABLE        reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)
    I8              reduce using rule 113 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ return LLAVEDER .)


state 316

    (118) return -> RETURN expresion . ENDLINE

    ENDLINE         shift and go to state 324


state 317

    (104) slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .

    $end            reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    LLAVEDER        reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    RETURN          reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    STRING          reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    U8              reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    F32             reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    VARIABLE        reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)
    I8              reduce using rule 104 (slice_contains -> VARIABLE empty DOT empty CONTAINS_SLICE empty LPAREN AND U8 RPAREN .)


state 318

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 325


state 319

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE . RPAREN empty ENDLINE

    RPAREN          shift and go to state 326


state 320

    (124) vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .

    $end            reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    RETURN          reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    STRING          reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    U8              reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    F32             reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    VARIABLE        reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)
    I8              reduce using rule 124 (vector_content -> ASIGNAR VECT PATHSEP FROM LPAREN vect_list RPAREN ENDLINE .)


state 321

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty . READ LPAREN reference RPAREN ENDLINE

    READ            shift and go to state 327


state 322

    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return . LLAVEDER

    LLAVEDER        shift and go to state 328


state 323

    (112) return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .

    $end            reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    LLAVEDER        reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    RETURN          reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    STRING          reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    U8              reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    F32             reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    VARIABLE        reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    I8              reduce using rule 112 (return_function -> FUNCTION VARIABLE LPAREN RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)


state 324

    (118) return -> RETURN expresion ENDLINE .

    LLAVEDER        reduce using rule 118 (return -> RETURN expresion ENDLINE .)


state 325

    (64) hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .

    $end            reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    RETURN          reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    STRING          reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    U8              reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    F32             reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    VARIABLE        reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)
    I8              reduce using rule 64 (hashset_insert -> VARIABLE empty DOT empty INSERT_HASH empty LPAREN expresion RPAREN empty ENDLINE .)


state 326

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN . empty ENDLINE
    (105) empty -> .

    ENDLINE         reduce using rule 105 (empty -> .)

    empty                          shift and go to state 329

state 327

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ . LPAREN reference RPAREN ENDLINE

    LPAREN          shift and go to state 330


state 328

    (111) return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .

    $end            reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    LLAVEDER        reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    RETURN          reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    STRING          reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    U8              reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    F32             reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    VARIABLE        reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)
    I8              reduce using rule 111 (return_function -> FUNCTION VARIABLE LPAREN arguments RPAREN ARROW tipos LLAVEIZ rust return LLAVEDER .)


state 329

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty . ENDLINE

    ENDLINE         shift and go to state 331


state 330

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN . reference RPAREN ENDLINE
    (108) reference -> . AND empty MUT VARIABLE

    AND             shift and go to state 333

    reference                      shift and go to state 332

state 331

    (65) hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .

    $end            reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    LLAVEDER        reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    RETURN          reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    STRING          reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    U8              reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    F32             reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    VARIABLE        reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)
    I8              reduce using rule 65 (hashset_union -> VARIABLE empty DOT empty UNION_HASH empty LPAREN AND empty VARIABLE RPAREN empty ENDLINE .)


state 332

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference . RPAREN ENDLINE

    RPAREN          shift and go to state 334


state 333

    (108) reference -> AND . empty MUT VARIABLE
    (105) empty -> .

    MUT             reduce using rule 105 (empty -> .)

    empty                          shift and go to state 335

state 334

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN . ENDLINE

    ENDLINE         shift and go to state 336


state 335

    (108) reference -> AND empty . MUT VARIABLE

    MUT             shift and go to state 337


state 336

    (107) read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .

    $end            reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    LLAVEDER        reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    RETURN          reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    STRING          reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    U8              reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    F32             reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    VARIABLE        reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)
    I8              reduce using rule 107 (read_data -> IO empty PATHSEP empty STDIN LPAREN RPAREN empty DOT empty READ LPAREN reference RPAREN ENDLINE .)


state 337

    (108) reference -> AND empty MUT . VARIABLE

    VARIABLE        shift and go to state 338


state 338

    (108) reference -> AND empty MUT VARIABLE .

    RPAREN          reduce using rule 108 (reference -> AND empty MUT VARIABLE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ASIGNAR in state 27 resolved as shift
WARNING: shift/reduce conflict for ASIGNAR in state 297 resolved as shift
WARNING: reduce/reduce conflict in state 27 resolved using rule (declarador -> VARIABLE)
WARNING: rejected rule (declarador_sintipo -> VARIABLE) in state 27
WARNING: reduce/reduce conflict in state 81 resolved using rule (let_asig_sintipo -> LET VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 81
WARNING: reduce/reduce conflict in state 133 resolved using rule (let_asig_sintipo -> LET MUT VARIABLE)
WARNING: rejected rule (var_tipo -> VARIABLE) in state 133
WARNING: reduce/reduce conflict in state 297 resolved using rule (declarador -> VARIABLE)
WARNING: rejected rule (declarador_sintipo -> VARIABLE) in state 297
WARNING: Rule (declarador_sintipo -> VARIABLE) is never reduced
WARNING: Rule (var_tipo -> VARIABLE) is never reduced
